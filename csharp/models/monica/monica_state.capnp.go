// Code generated by capnpc-go. DO NOT EDIT.

package monica

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	common "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/common"
	management "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/management"
	math "math"
)

type MaybeBool struct{ capnp.Struct }

// MaybeBool_TypeID is the unique identifier for the type MaybeBool.
const MaybeBool_TypeID = 0xd8af9210839bc071

func NewMaybeBool(s *capnp.Segment) (MaybeBool, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MaybeBool{st}, err
}

func NewRootMaybeBool(s *capnp.Segment) (MaybeBool, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MaybeBool{st}, err
}

func ReadRootMaybeBool(msg *capnp.Message) (MaybeBool, error) {
	root, err := msg.Root()
	return MaybeBool{root.Struct()}, err
}

func (s MaybeBool) String() string {
	str, _ := text.Marshal(0xd8af9210839bc071, s.Struct)
	return str
}

func (s MaybeBool) Value() bool {
	return s.Struct.Bit(0)
}

func (s MaybeBool) SetValue(v bool) {
	s.Struct.SetBit(0, v)
}

// MaybeBool_List is a list of MaybeBool.
type MaybeBool_List struct{ capnp.List }

// NewMaybeBool creates a new list of MaybeBool.
func NewMaybeBool_List(s *capnp.Segment, sz int32) (MaybeBool_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return MaybeBool_List{l}, err
}

func (s MaybeBool_List) At(i int) MaybeBool { return MaybeBool{s.List.Struct(i)} }

func (s MaybeBool_List) Set(i int, v MaybeBool) error { return s.List.SetStruct(i, v.Struct) }

func (s MaybeBool_List) String() string {
	str, _ := text.MarshalList(0xd8af9210839bc071, s.List)
	return str
}

// MaybeBool_Future is a wrapper for a MaybeBool promised by a client call.
type MaybeBool_Future struct{ *capnp.Future }

func (p MaybeBool_Future) Struct() (MaybeBool, error) {
	s, err := p.Future.Struct()
	return MaybeBool{s}, err
}

type RuntimeState struct{ capnp.Struct }

// RuntimeState_TypeID is the unique identifier for the type RuntimeState.
const RuntimeState_TypeID = 0xd599d06dc405571a

func NewRuntimeState(s *capnp.Segment) (RuntimeState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RuntimeState{st}, err
}

func NewRootRuntimeState(s *capnp.Segment) (RuntimeState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RuntimeState{st}, err
}

func ReadRootRuntimeState(msg *capnp.Message) (RuntimeState, error) {
	root, err := msg.Root()
	return RuntimeState{root.Struct()}, err
}

func (s RuntimeState) String() string {
	str, _ := text.Marshal(0xd599d06dc405571a, s.Struct)
	return str
}

func (s RuntimeState) ModelState() (MonicaModelState, error) {
	p, err := s.Struct.Ptr(0)
	return MonicaModelState{Struct: p.Struct()}, err
}

func (s RuntimeState) HasModelState() bool {
	return s.Struct.HasPtr(0)
}

func (s RuntimeState) SetModelState(v MonicaModelState) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewModelState sets the modelState field to a newly
// allocated MonicaModelState struct, preferring placement in s's segment.
func (s RuntimeState) NewModelState() (MonicaModelState, error) {
	ss, err := NewMonicaModelState(s.Struct.Segment())
	if err != nil {
		return MonicaModelState{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// RuntimeState_List is a list of RuntimeState.
type RuntimeState_List struct{ capnp.List }

// NewRuntimeState creates a new list of RuntimeState.
func NewRuntimeState_List(s *capnp.Segment, sz int32) (RuntimeState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RuntimeState_List{l}, err
}

func (s RuntimeState_List) At(i int) RuntimeState { return RuntimeState{s.List.Struct(i)} }

func (s RuntimeState_List) Set(i int, v RuntimeState) error { return s.List.SetStruct(i, v.Struct) }

func (s RuntimeState_List) String() string {
	str, _ := text.MarshalList(0xd599d06dc405571a, s.List)
	return str
}

// RuntimeState_Future is a wrapper for a RuntimeState promised by a client call.
type RuntimeState_Future struct{ *capnp.Future }

func (p RuntimeState_Future) Struct() (RuntimeState, error) {
	s, err := p.Future.Struct()
	return RuntimeState{s}, err
}

func (p RuntimeState_Future) ModelState() MonicaModelState_Future {
	return MonicaModelState_Future{Future: p.Future.Field(0, nil)}
}

type CropState struct{ capnp.Struct }

// CropState_TypeID is the unique identifier for the type CropState.
const CropState_TypeID = 0x8b008567c93f7c7d

func NewCropState(s *capnp.Segment) (CropState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 11})
	return CropState{st}, err
}

func NewRootCropState(s *capnp.Segment) (CropState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 11})
	return CropState{st}, err
}

func ReadRootCropState(msg *capnp.Message) (CropState, error) {
	root, err := msg.Root()
	return CropState{root.Struct()}, err
}

func (s CropState) String() string {
	str, _ := text.Marshal(0x8b008567c93f7c7d, s.Struct)
	return str
}

func (s CropState) SpeciesName() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s CropState) HasSpeciesName() bool {
	return s.Struct.HasPtr(1)
}

func (s CropState) SpeciesNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s CropState) SetSpeciesName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s CropState) CultivarName() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s CropState) HasCultivarName() bool {
	return s.Struct.HasPtr(2)
}

func (s CropState) CultivarNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s CropState) SetCultivarName(v string) error {
	return s.Struct.SetText(2, v)
}

func (s CropState) SeedDate() (common.Date, error) {
	p, err := s.Struct.Ptr(3)
	return common.Date{Struct: p.Struct()}, err
}

func (s CropState) HasSeedDate() bool {
	return s.Struct.HasPtr(3)
}

func (s CropState) SetSeedDate(v common.Date) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewSeedDate sets the seedDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s CropState) NewSeedDate() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

func (s CropState) HarvestDate() (common.Date, error) {
	p, err := s.Struct.Ptr(4)
	return common.Date{Struct: p.Struct()}, err
}

func (s CropState) HasHarvestDate() bool {
	return s.Struct.HasPtr(4)
}

func (s CropState) SetHarvestDate(v common.Date) error {
	return s.Struct.SetPtr(4, v.Struct.ToPtr())
}

// NewHarvestDate sets the harvestDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s CropState) NewHarvestDate() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(4, ss.Struct.ToPtr())
	return ss, err
}

func (s CropState) IsWinterCrop() (MaybeBool, error) {
	p, err := s.Struct.Ptr(5)
	return MaybeBool{Struct: p.Struct()}, err
}

func (s CropState) HasIsWinterCrop() bool {
	return s.Struct.HasPtr(5)
}

func (s CropState) SetIsWinterCrop(v MaybeBool) error {
	return s.Struct.SetPtr(5, v.Struct.ToPtr())
}

// NewIsWinterCrop sets the isWinterCrop field to a newly
// allocated MaybeBool struct, preferring placement in s's segment.
func (s CropState) NewIsWinterCrop() (MaybeBool, error) {
	ss, err := NewMaybeBool(s.Struct.Segment())
	if err != nil {
		return MaybeBool{}, err
	}
	err = s.Struct.SetPtr(5, ss.Struct.ToPtr())
	return ss, err
}

func (s CropState) IsPerennialCrop() (MaybeBool, error) {
	p, err := s.Struct.Ptr(6)
	return MaybeBool{Struct: p.Struct()}, err
}

func (s CropState) HasIsPerennialCrop() bool {
	return s.Struct.HasPtr(6)
}

func (s CropState) SetIsPerennialCrop(v MaybeBool) error {
	return s.Struct.SetPtr(6, v.Struct.ToPtr())
}

// NewIsPerennialCrop sets the isPerennialCrop field to a newly
// allocated MaybeBool struct, preferring placement in s's segment.
func (s CropState) NewIsPerennialCrop() (MaybeBool, error) {
	ss, err := NewMaybeBool(s.Struct.Segment())
	if err != nil {
		return MaybeBool{}, err
	}
	err = s.Struct.SetPtr(6, ss.Struct.ToPtr())
	return ss, err
}

func (s CropState) CuttingDates() (common.Date_List, error) {
	p, err := s.Struct.Ptr(7)
	return common.Date_List{List: p.List()}, err
}

func (s CropState) HasCuttingDates() bool {
	return s.Struct.HasPtr(7)
}

func (s CropState) SetCuttingDates(v common.Date_List) error {
	return s.Struct.SetPtr(7, v.List.ToPtr())
}

// NewCuttingDates sets the cuttingDates field to a newly
// allocated common.Date_List, preferring placement in s's segment.
func (s CropState) NewCuttingDates(n int32) (common.Date_List, error) {
	l, err := common.NewDate_List(s.Struct.Segment(), n)
	if err != nil {
		return common.Date_List{}, err
	}
	err = s.Struct.SetPtr(7, l.List.ToPtr())
	return l, err
}

func (s CropState) CropParams() (CropParameters, error) {
	p, err := s.Struct.Ptr(8)
	return CropParameters{Struct: p.Struct()}, err
}

func (s CropState) HasCropParams() bool {
	return s.Struct.HasPtr(8)
}

func (s CropState) SetCropParams(v CropParameters) error {
	return s.Struct.SetPtr(8, v.Struct.ToPtr())
}

// NewCropParams sets the cropParams field to a newly
// allocated CropParameters struct, preferring placement in s's segment.
func (s CropState) NewCropParams() (CropParameters, error) {
	ss, err := NewCropParameters(s.Struct.Segment())
	if err != nil {
		return CropParameters{}, err
	}
	err = s.Struct.SetPtr(8, ss.Struct.ToPtr())
	return ss, err
}

func (s CropState) PerennialCropParams() (CropParameters, error) {
	p, err := s.Struct.Ptr(9)
	return CropParameters{Struct: p.Struct()}, err
}

func (s CropState) HasPerennialCropParams() bool {
	return s.Struct.HasPtr(9)
}

func (s CropState) SetPerennialCropParams(v CropParameters) error {
	return s.Struct.SetPtr(9, v.Struct.ToPtr())
}

// NewPerennialCropParams sets the perennialCropParams field to a newly
// allocated CropParameters struct, preferring placement in s's segment.
func (s CropState) NewPerennialCropParams() (CropParameters, error) {
	ss, err := NewCropParameters(s.Struct.Segment())
	if err != nil {
		return CropParameters{}, err
	}
	err = s.Struct.SetPtr(9, ss.Struct.ToPtr())
	return ss, err
}

func (s CropState) ResidueParams() (CropResidueParameters, error) {
	p, err := s.Struct.Ptr(10)
	return CropResidueParameters{Struct: p.Struct()}, err
}

func (s CropState) HasResidueParams() bool {
	return s.Struct.HasPtr(10)
}

func (s CropState) SetResidueParams(v CropResidueParameters) error {
	return s.Struct.SetPtr(10, v.Struct.ToPtr())
}

// NewResidueParams sets the residueParams field to a newly
// allocated CropResidueParameters struct, preferring placement in s's segment.
func (s CropState) NewResidueParams() (CropResidueParameters, error) {
	ss, err := NewCropResidueParameters(s.Struct.Segment())
	if err != nil {
		return CropResidueParameters{}, err
	}
	err = s.Struct.SetPtr(10, ss.Struct.ToPtr())
	return ss, err
}

func (s CropState) CrossCropAdaptionFactor() float64 {
	return math.Float64frombits(s.Struct.Uint64(0) ^ 0x3ff0000000000000)
}

func (s CropState) SetCrossCropAdaptionFactor(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropState) AutomaticHarvest() bool {
	return s.Struct.Bit(64)
}

func (s CropState) SetAutomaticHarvest(v bool) {
	s.Struct.SetBit(64, v)
}

func (s CropState) AutomaticHarvestParams() (AutomaticHarvestParameters, error) {
	p, err := s.Struct.Ptr(0)
	return AutomaticHarvestParameters{Struct: p.Struct()}, err
}

func (s CropState) HasAutomaticHarvestParams() bool {
	return s.Struct.HasPtr(0)
}

func (s CropState) SetAutomaticHarvestParams(v AutomaticHarvestParameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAutomaticHarvestParams sets the automaticHarvestParams field to a newly
// allocated AutomaticHarvestParameters struct, preferring placement in s's segment.
func (s CropState) NewAutomaticHarvestParams() (AutomaticHarvestParameters, error) {
	ss, err := NewAutomaticHarvestParameters(s.Struct.Segment())
	if err != nil {
		return AutomaticHarvestParameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// CropState_List is a list of CropState.
type CropState_List struct{ capnp.List }

// NewCropState creates a new list of CropState.
func NewCropState_List(s *capnp.Segment, sz int32) (CropState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 11}, sz)
	return CropState_List{l}, err
}

func (s CropState_List) At(i int) CropState { return CropState{s.List.Struct(i)} }

func (s CropState_List) Set(i int, v CropState) error { return s.List.SetStruct(i, v.Struct) }

func (s CropState_List) String() string {
	str, _ := text.MarshalList(0x8b008567c93f7c7d, s.List)
	return str
}

// CropState_Future is a wrapper for a CropState promised by a client call.
type CropState_Future struct{ *capnp.Future }

func (p CropState_Future) Struct() (CropState, error) {
	s, err := p.Future.Struct()
	return CropState{s}, err
}

func (p CropState_Future) SeedDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(3, nil)}
}

func (p CropState_Future) HarvestDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(4, nil)}
}

func (p CropState_Future) IsWinterCrop() MaybeBool_Future {
	return MaybeBool_Future{Future: p.Future.Field(5, nil)}
}

func (p CropState_Future) IsPerennialCrop() MaybeBool_Future {
	return MaybeBool_Future{Future: p.Future.Field(6, nil)}
}

func (p CropState_Future) CropParams() CropParameters_Future {
	return CropParameters_Future{Future: p.Future.Field(8, nil)}
}

func (p CropState_Future) PerennialCropParams() CropParameters_Future {
	return CropParameters_Future{Future: p.Future.Field(9, nil)}
}

func (p CropState_Future) ResidueParams() CropResidueParameters_Future {
	return CropResidueParameters_Future{Future: p.Future.Field(10, nil)}
}

func (p CropState_Future) AutomaticHarvestParams() AutomaticHarvestParameters_Future {
	return AutomaticHarvestParameters_Future{Future: p.Future.Field(0, nil)}
}

type AOMProperties struct{ capnp.Struct }

// AOMProperties_TypeID is the unique identifier for the type AOMProperties.
const AOMProperties_TypeID = 0xe3512e62df901c18

func NewAOMProperties(s *capnp.Segment) (AOMProperties, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 152, PointerCount: 0})
	return AOMProperties{st}, err
}

func NewRootAOMProperties(s *capnp.Segment) (AOMProperties, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 152, PointerCount: 0})
	return AOMProperties{st}, err
}

func ReadRootAOMProperties(msg *capnp.Message) (AOMProperties, error) {
	root, err := msg.Root()
	return AOMProperties{root.Struct()}, err
}

func (s AOMProperties) String() string {
	str, _ := text.Marshal(0xe3512e62df901c18, s.Struct)
	return str
}

func (s AOMProperties) AomSlow() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s AOMProperties) SetAomSlow(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s AOMProperties) AomFast() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s AOMProperties) SetAomFast(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDecRatetoSMBSlow() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s AOMProperties) SetAomSlowDecRatetoSMBSlow(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDecRatetoSMBFast() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s AOMProperties) SetAomSlowDecRatetoSMBFast(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s AOMProperties) AomFastDecRatetoSMBSlow() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s AOMProperties) SetAomFastDecRatetoSMBSlow(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s AOMProperties) AomFastDecRatetoSMBFast() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s AOMProperties) SetAomFastDecRatetoSMBFast(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDecCoeff() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s AOMProperties) SetAomSlowDecCoeff(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s AOMProperties) AomFastDecCoeff() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s AOMProperties) SetAomFastDecCoeff(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDecCoeffStandard() float64 {
	return math.Float64frombits(s.Struct.Uint64(64) ^ 0x3ff0000000000000)
}

func (s AOMProperties) SetAomSlowDecCoeffStandard(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v)^0x3ff0000000000000)
}

func (s AOMProperties) AomFastDecCoeffStandard() float64 {
	return math.Float64frombits(s.Struct.Uint64(72) ^ 0x3ff0000000000000)
}

func (s AOMProperties) SetAomFastDecCoeffStandard(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v)^0x3ff0000000000000)
}

func (s AOMProperties) PartAOMSlowtoSMBSlow() float64 {
	return math.Float64frombits(s.Struct.Uint64(80))
}

func (s AOMProperties) SetPartAOMSlowtoSMBSlow(v float64) {
	s.Struct.SetUint64(80, math.Float64bits(v))
}

func (s AOMProperties) PartAOMSlowtoSMBFast() float64 {
	return math.Float64frombits(s.Struct.Uint64(88))
}

func (s AOMProperties) SetPartAOMSlowtoSMBFast(v float64) {
	s.Struct.SetUint64(88, math.Float64bits(v))
}

func (s AOMProperties) CnRatioAOMSlow() float64 {
	return math.Float64frombits(s.Struct.Uint64(96) ^ 0x3ff0000000000000)
}

func (s AOMProperties) SetCnRatioAOMSlow(v float64) {
	s.Struct.SetUint64(96, math.Float64bits(v)^0x3ff0000000000000)
}

func (s AOMProperties) CnRatioAOMFast() float64 {
	return math.Float64frombits(s.Struct.Uint64(104) ^ 0x3ff0000000000000)
}

func (s AOMProperties) SetCnRatioAOMFast(v float64) {
	s.Struct.SetUint64(104, math.Float64bits(v)^0x3ff0000000000000)
}

func (s AOMProperties) DaysAfterApplication() uint16 {
	return s.Struct.Uint16(112)
}

func (s AOMProperties) SetDaysAfterApplication(v uint16) {
	s.Struct.SetUint16(112, v)
}

func (s AOMProperties) AomDryMatterContent() float64 {
	return math.Float64frombits(s.Struct.Uint64(120))
}

func (s AOMProperties) SetAomDryMatterContent(v float64) {
	s.Struct.SetUint64(120, math.Float64bits(v))
}

func (s AOMProperties) AomNH4Content() float64 {
	return math.Float64frombits(s.Struct.Uint64(128))
}

func (s AOMProperties) SetAomNH4Content(v float64) {
	s.Struct.SetUint64(128, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDelta() float64 {
	return math.Float64frombits(s.Struct.Uint64(136))
}

func (s AOMProperties) SetAomSlowDelta(v float64) {
	s.Struct.SetUint64(136, math.Float64bits(v))
}

func (s AOMProperties) AomFastDelta() float64 {
	return math.Float64frombits(s.Struct.Uint64(144))
}

func (s AOMProperties) SetAomFastDelta(v float64) {
	s.Struct.SetUint64(144, math.Float64bits(v))
}

func (s AOMProperties) Incorporation() bool {
	return s.Struct.Bit(912)
}

func (s AOMProperties) SetIncorporation(v bool) {
	s.Struct.SetBit(912, v)
}

func (s AOMProperties) NoVolatilization() bool {
	return !s.Struct.Bit(913)
}

func (s AOMProperties) SetNoVolatilization(v bool) {
	s.Struct.SetBit(913, !v)
}

// AOMProperties_List is a list of AOMProperties.
type AOMProperties_List struct{ capnp.List }

// NewAOMProperties creates a new list of AOMProperties.
func NewAOMProperties_List(s *capnp.Segment, sz int32) (AOMProperties_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 152, PointerCount: 0}, sz)
	return AOMProperties_List{l}, err
}

func (s AOMProperties_List) At(i int) AOMProperties { return AOMProperties{s.List.Struct(i)} }

func (s AOMProperties_List) Set(i int, v AOMProperties) error { return s.List.SetStruct(i, v.Struct) }

func (s AOMProperties_List) String() string {
	str, _ := text.MarshalList(0xe3512e62df901c18, s.List)
	return str
}

// AOMProperties_Future is a wrapper for a AOMProperties promised by a client call.
type AOMProperties_Future struct{ *capnp.Future }

func (p AOMProperties_Future) Struct() (AOMProperties, error) {
	s, err := p.Future.Struct()
	return AOMProperties{s}, err
}

type SoilColumnState struct{ capnp.Struct }

// SoilColumnState_TypeID is the unique identifier for the type SoilColumnState.
const SoilColumnState_TypeID = 0xef3e4198d3e35596

func NewSoilColumnState(s *capnp.Segment) (SoilColumnState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 88, PointerCount: 4})
	return SoilColumnState{st}, err
}

func NewRootSoilColumnState(s *capnp.Segment) (SoilColumnState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 88, PointerCount: 4})
	return SoilColumnState{st}, err
}

func ReadRootSoilColumnState(msg *capnp.Message) (SoilColumnState, error) {
	root, err := msg.Root()
	return SoilColumnState{root.Struct()}, err
}

func (s SoilColumnState) String() string {
	str, _ := text.Marshal(0xef3e4198d3e35596, s.Struct)
	return str
}

func (s SoilColumnState) VsSurfaceWaterStorage() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s SoilColumnState) SetVsSurfaceWaterStorage(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s SoilColumnState) VsInterceptionStorage() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s SoilColumnState) SetVsInterceptionStorage(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s SoilColumnState) VmGroundwaterTable() uint16 {
	return s.Struct.Uint16(16)
}

func (s SoilColumnState) SetVmGroundwaterTable(v uint16) {
	s.Struct.SetUint16(16, v)
}

func (s SoilColumnState) VsFluxAtLowerBoundary() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s SoilColumnState) SetVsFluxAtLowerBoundary(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s SoilColumnState) VqCropNUptake() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s SoilColumnState) SetVqCropNUptake(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s SoilColumnState) VtSoilSurfaceTemperature() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s SoilColumnState) SetVtSoilSurfaceTemperature(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s SoilColumnState) VmSnowDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s SoilColumnState) SetVmSnowDepth(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s SoilColumnState) PsMaxMineralisationDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(56) ^ 0x3fd999999999999a)
}

func (s SoilColumnState) SetPsMaxMineralisationDepth(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v)^0x3fd999999999999a)
}

func (s SoilColumnState) VsNumberOfOrganicLayers() float64 {
	return math.Float64frombits(s.Struct.Uint64(64))
}

func (s SoilColumnState) SetVsNumberOfOrganicLayers(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v))
}

func (s SoilColumnState) VfTopDressing() float64 {
	return math.Float64frombits(s.Struct.Uint64(72))
}

func (s SoilColumnState) SetVfTopDressing(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v))
}

func (s SoilColumnState) VfTopDressingPartition() (management.Params_MineralFertilization_Parameters, error) {
	p, err := s.Struct.Ptr(0)
	return management.Params_MineralFertilization_Parameters{Struct: p.Struct()}, err
}

func (s SoilColumnState) HasVfTopDressingPartition() bool {
	return s.Struct.HasPtr(0)
}

func (s SoilColumnState) SetVfTopDressingPartition(v management.Params_MineralFertilization_Parameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVfTopDressingPartition sets the vfTopDressingPartition field to a newly
// allocated management.Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s SoilColumnState) NewVfTopDressingPartition() (management.Params_MineralFertilization_Parameters, error) {
	ss, err := management.NewParams_MineralFertilization_Parameters(s.Struct.Segment())
	if err != nil {
		return management.Params_MineralFertilization_Parameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SoilColumnState) VfTopDressingDelay() uint16 {
	return s.Struct.Uint16(18)
}

func (s SoilColumnState) SetVfTopDressingDelay(v uint16) {
	s.Struct.SetUint16(18, v)
}

func (s SoilColumnState) CropModule() (CropModuleState, error) {
	p, err := s.Struct.Ptr(1)
	return CropModuleState{Struct: p.Struct()}, err
}

func (s SoilColumnState) HasCropModule() bool {
	return s.Struct.HasPtr(1)
}

func (s SoilColumnState) SetCropModule(v CropModuleState) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewCropModule sets the cropModule field to a newly
// allocated CropModuleState struct, preferring placement in s's segment.
func (s SoilColumnState) NewCropModule() (CropModuleState, error) {
	ss, err := NewCropModuleState(s.Struct.Segment())
	if err != nil {
		return CropModuleState{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s SoilColumnState) DelayedNMinApplications() (SoilColumnState_DelayedNMinApplicationParams_List, error) {
	p, err := s.Struct.Ptr(2)
	return SoilColumnState_DelayedNMinApplicationParams_List{List: p.List()}, err
}

func (s SoilColumnState) HasDelayedNMinApplications() bool {
	return s.Struct.HasPtr(2)
}

func (s SoilColumnState) SetDelayedNMinApplications(v SoilColumnState_DelayedNMinApplicationParams_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewDelayedNMinApplications sets the delayedNMinApplications field to a newly
// allocated SoilColumnState_DelayedNMinApplicationParams_List, preferring placement in s's segment.
func (s SoilColumnState) NewDelayedNMinApplications(n int32) (SoilColumnState_DelayedNMinApplicationParams_List, error) {
	l, err := NewSoilColumnState_DelayedNMinApplicationParams_List(s.Struct.Segment(), n)
	if err != nil {
		return SoilColumnState_DelayedNMinApplicationParams_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s SoilColumnState) PmCriticalMoistureDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(80))
}

func (s SoilColumnState) SetPmCriticalMoistureDepth(v float64) {
	s.Struct.SetUint64(80, math.Float64bits(v))
}

func (s SoilColumnState) Layers() (SoilLayerState_List, error) {
	p, err := s.Struct.Ptr(3)
	return SoilLayerState_List{List: p.List()}, err
}

func (s SoilColumnState) HasLayers() bool {
	return s.Struct.HasPtr(3)
}

func (s SoilColumnState) SetLayers(v SoilLayerState_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewLayers sets the layers field to a newly
// allocated SoilLayerState_List, preferring placement in s's segment.
func (s SoilColumnState) NewLayers(n int32) (SoilLayerState_List, error) {
	l, err := NewSoilLayerState_List(s.Struct.Segment(), n)
	if err != nil {
		return SoilLayerState_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// SoilColumnState_List is a list of SoilColumnState.
type SoilColumnState_List struct{ capnp.List }

// NewSoilColumnState creates a new list of SoilColumnState.
func NewSoilColumnState_List(s *capnp.Segment, sz int32) (SoilColumnState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 88, PointerCount: 4}, sz)
	return SoilColumnState_List{l}, err
}

func (s SoilColumnState_List) At(i int) SoilColumnState { return SoilColumnState{s.List.Struct(i)} }

func (s SoilColumnState_List) Set(i int, v SoilColumnState) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SoilColumnState_List) String() string {
	str, _ := text.MarshalList(0xef3e4198d3e35596, s.List)
	return str
}

// SoilColumnState_Future is a wrapper for a SoilColumnState promised by a client call.
type SoilColumnState_Future struct{ *capnp.Future }

func (p SoilColumnState_Future) Struct() (SoilColumnState, error) {
	s, err := p.Future.Struct()
	return SoilColumnState{s}, err
}

func (p SoilColumnState_Future) VfTopDressingPartition() management.Params_MineralFertilization_Parameters_Future {
	return management.Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

func (p SoilColumnState_Future) CropModule() CropModuleState_Future {
	return CropModuleState_Future{Future: p.Future.Field(1, nil)}
}

type SoilColumnState_DelayedNMinApplicationParams struct{ capnp.Struct }

// SoilColumnState_DelayedNMinApplicationParams_TypeID is the unique identifier for the type SoilColumnState_DelayedNMinApplicationParams.
const SoilColumnState_DelayedNMinApplicationParams_TypeID = 0xd1edcf54f4edf638

func NewSoilColumnState_DelayedNMinApplicationParams(s *capnp.Segment) (SoilColumnState_DelayedNMinApplicationParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return SoilColumnState_DelayedNMinApplicationParams{st}, err
}

func NewRootSoilColumnState_DelayedNMinApplicationParams(s *capnp.Segment) (SoilColumnState_DelayedNMinApplicationParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return SoilColumnState_DelayedNMinApplicationParams{st}, err
}

func ReadRootSoilColumnState_DelayedNMinApplicationParams(msg *capnp.Message) (SoilColumnState_DelayedNMinApplicationParams, error) {
	root, err := msg.Root()
	return SoilColumnState_DelayedNMinApplicationParams{root.Struct()}, err
}

func (s SoilColumnState_DelayedNMinApplicationParams) String() string {
	str, _ := text.Marshal(0xd1edcf54f4edf638, s.Struct)
	return str
}

func (s SoilColumnState_DelayedNMinApplicationParams) Fp() (management.Params_MineralFertilization_Parameters, error) {
	p, err := s.Struct.Ptr(0)
	return management.Params_MineralFertilization_Parameters{Struct: p.Struct()}, err
}

func (s SoilColumnState_DelayedNMinApplicationParams) HasFp() bool {
	return s.Struct.HasPtr(0)
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetFp(v management.Params_MineralFertilization_Parameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewFp sets the fp field to a newly
// allocated management.Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s SoilColumnState_DelayedNMinApplicationParams) NewFp() (management.Params_MineralFertilization_Parameters, error) {
	ss, err := management.NewParams_MineralFertilization_Parameters(s.Struct.Segment())
	if err != nil {
		return management.Params_MineralFertilization_Parameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SoilColumnState_DelayedNMinApplicationParams) SamplingDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetSamplingDepth(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) CropNTarget() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetCropNTarget(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) CropNTarget30() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetCropNTarget30(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) FertiliserMinApplication() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetFertiliserMinApplication(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) FertiliserMaxApplication() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetFertiliserMaxApplication(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) TopDressingDelay() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetTopDressingDelay(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

// SoilColumnState_DelayedNMinApplicationParams_List is a list of SoilColumnState_DelayedNMinApplicationParams.
type SoilColumnState_DelayedNMinApplicationParams_List struct{ capnp.List }

// NewSoilColumnState_DelayedNMinApplicationParams creates a new list of SoilColumnState_DelayedNMinApplicationParams.
func NewSoilColumnState_DelayedNMinApplicationParams_List(s *capnp.Segment, sz int32) (SoilColumnState_DelayedNMinApplicationParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1}, sz)
	return SoilColumnState_DelayedNMinApplicationParams_List{l}, err
}

func (s SoilColumnState_DelayedNMinApplicationParams_List) At(i int) SoilColumnState_DelayedNMinApplicationParams {
	return SoilColumnState_DelayedNMinApplicationParams{s.List.Struct(i)}
}

func (s SoilColumnState_DelayedNMinApplicationParams_List) Set(i int, v SoilColumnState_DelayedNMinApplicationParams) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SoilColumnState_DelayedNMinApplicationParams_List) String() string {
	str, _ := text.MarshalList(0xd1edcf54f4edf638, s.List)
	return str
}

// SoilColumnState_DelayedNMinApplicationParams_Future is a wrapper for a SoilColumnState_DelayedNMinApplicationParams promised by a client call.
type SoilColumnState_DelayedNMinApplicationParams_Future struct{ *capnp.Future }

func (p SoilColumnState_DelayedNMinApplicationParams_Future) Struct() (SoilColumnState_DelayedNMinApplicationParams, error) {
	s, err := p.Future.Struct()
	return SoilColumnState_DelayedNMinApplicationParams{s}, err
}

func (p SoilColumnState_DelayedNMinApplicationParams_Future) Fp() management.Params_MineralFertilization_Parameters_Future {
	return management.Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilLayerState struct{ capnp.Struct }

// SoilLayerState_TypeID is the unique identifier for the type SoilLayerState.
const SoilLayerState_TypeID = 0xdd1e0c7c94dc4211

func NewSoilLayerState(s *capnp.Segment) (SoilLayerState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 2})
	return SoilLayerState{st}, err
}

func NewRootSoilLayerState(s *capnp.Segment) (SoilLayerState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 2})
	return SoilLayerState{st}, err
}

func ReadRootSoilLayerState(msg *capnp.Message) (SoilLayerState, error) {
	root, err := msg.Root()
	return SoilLayerState{root.Struct()}, err
}

func (s SoilLayerState) String() string {
	str, _ := text.Marshal(0xdd1e0c7c94dc4211, s.Struct)
	return str
}

func (s SoilLayerState) LayerThickness() float64 {
	return math.Float64frombits(s.Struct.Uint64(0) ^ 0x3fb999999999999a)
}

func (s SoilLayerState) SetLayerThickness(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SoilLayerState) SoilWaterFlux() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s SoilLayerState) SetSoilWaterFlux(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s SoilLayerState) VoAOMPool() (AOMProperties_List, error) {
	p, err := s.Struct.Ptr(0)
	return AOMProperties_List{List: p.List()}, err
}

func (s SoilLayerState) HasVoAOMPool() bool {
	return s.Struct.HasPtr(0)
}

func (s SoilLayerState) SetVoAOMPool(v AOMProperties_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewVoAOMPool sets the voAOMPool field to a newly
// allocated AOMProperties_List, preferring placement in s's segment.
func (s SoilLayerState) NewVoAOMPool(n int32) (AOMProperties_List, error) {
	l, err := NewAOMProperties_List(s.Struct.Segment(), n)
	if err != nil {
		return AOMProperties_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s SoilLayerState) SomSlow() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s SoilLayerState) SetSomSlow(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s SoilLayerState) SomFast() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s SoilLayerState) SetSomFast(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s SoilLayerState) SmbSlow() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s SoilLayerState) SetSmbSlow(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s SoilLayerState) SmbFast() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s SoilLayerState) SetSmbFast(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s SoilLayerState) SoilCarbamid() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s SoilLayerState) SetSoilCarbamid(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s SoilLayerState) SoilNH4() float64 {
	return math.Float64frombits(s.Struct.Uint64(56) ^ 0x3f1a36e2eb1c432d)
}

func (s SoilLayerState) SetSoilNH4(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v)^0x3f1a36e2eb1c432d)
}

func (s SoilLayerState) SoilNO2() float64 {
	return math.Float64frombits(s.Struct.Uint64(64) ^ 0x3f50624dd2f1a9fc)
}

func (s SoilLayerState) SetSoilNO2(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v)^0x3f50624dd2f1a9fc)
}

func (s SoilLayerState) SoilNO3() float64 {
	return math.Float64frombits(s.Struct.Uint64(72) ^ 0x3f1a36e2eb1c432d)
}

func (s SoilLayerState) SetSoilNO3(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v)^0x3f1a36e2eb1c432d)
}

func (s SoilLayerState) SoilFrozen() bool {
	return s.Struct.Bit(640)
}

func (s SoilLayerState) SetSoilFrozen(v bool) {
	s.Struct.SetBit(640, v)
}

func (s SoilLayerState) Sps() (SoilParameters, error) {
	p, err := s.Struct.Ptr(1)
	return SoilParameters{Struct: p.Struct()}, err
}

func (s SoilLayerState) HasSps() bool {
	return s.Struct.HasPtr(1)
}

func (s SoilLayerState) SetSps(v SoilParameters) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSps sets the sps field to a newly
// allocated SoilParameters struct, preferring placement in s's segment.
func (s SoilLayerState) NewSps() (SoilParameters, error) {
	ss, err := NewSoilParameters(s.Struct.Segment())
	if err != nil {
		return SoilParameters{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s SoilLayerState) SoilMoistureM3() float64 {
	return math.Float64frombits(s.Struct.Uint64(88) ^ 0x3fd0000000000000)
}

func (s SoilLayerState) SetSoilMoistureM3(v float64) {
	s.Struct.SetUint64(88, math.Float64bits(v)^0x3fd0000000000000)
}

func (s SoilLayerState) SoilTemperature() float64 {
	return math.Float64frombits(s.Struct.Uint64(96))
}

func (s SoilLayerState) SetSoilTemperature(v float64) {
	s.Struct.SetUint64(96, math.Float64bits(v))
}

// SoilLayerState_List is a list of SoilLayerState.
type SoilLayerState_List struct{ capnp.List }

// NewSoilLayerState creates a new list of SoilLayerState.
func NewSoilLayerState_List(s *capnp.Segment, sz int32) (SoilLayerState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 104, PointerCount: 2}, sz)
	return SoilLayerState_List{l}, err
}

func (s SoilLayerState_List) At(i int) SoilLayerState { return SoilLayerState{s.List.Struct(i)} }

func (s SoilLayerState_List) Set(i int, v SoilLayerState) error { return s.List.SetStruct(i, v.Struct) }

func (s SoilLayerState_List) String() string {
	str, _ := text.MarshalList(0xdd1e0c7c94dc4211, s.List)
	return str
}

// SoilLayerState_Future is a wrapper for a SoilLayerState promised by a client call.
type SoilLayerState_Future struct{ *capnp.Future }

func (p SoilLayerState_Future) Struct() (SoilLayerState, error) {
	s, err := p.Future.Struct()
	return SoilLayerState{s}, err
}

func (p SoilLayerState_Future) Sps() SoilParameters_Future {
	return SoilParameters_Future{Future: p.Future.Field(1, nil)}
}

type MonicaModelState struct{ capnp.Struct }

// MonicaModelState_TypeID is the unique identifier for the type MonicaModelState.
const MonicaModelState_TypeID = 0xab56969492d293b3

func NewMonicaModelState(s *capnp.Segment) (MonicaModelState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 144, PointerCount: 15})
	return MonicaModelState{st}, err
}

func NewRootMonicaModelState(s *capnp.Segment) (MonicaModelState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 144, PointerCount: 15})
	return MonicaModelState{st}, err
}

func ReadRootMonicaModelState(msg *capnp.Message) (MonicaModelState, error) {
	root, err := msg.Root()
	return MonicaModelState{root.Struct()}, err
}

func (s MonicaModelState) String() string {
	str, _ := text.Marshal(0xab56969492d293b3, s.Struct)
	return str
}

func (s MonicaModelState) SitePs() (SiteParameters, error) {
	p, err := s.Struct.Ptr(0)
	return SiteParameters{Struct: p.Struct()}, err
}

func (s MonicaModelState) HasSitePs() bool {
	return s.Struct.HasPtr(0)
}

func (s MonicaModelState) SetSitePs(v SiteParameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSitePs sets the sitePs field to a newly
// allocated SiteParameters struct, preferring placement in s's segment.
func (s MonicaModelState) NewSitePs() (SiteParameters, error) {
	ss, err := NewSiteParameters(s.Struct.Segment())
	if err != nil {
		return SiteParameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MonicaModelState) EnvPs() (EnvironmentParameters, error) {
	p, err := s.Struct.Ptr(1)
	return EnvironmentParameters{Struct: p.Struct()}, err
}

func (s MonicaModelState) HasEnvPs() bool {
	return s.Struct.HasPtr(1)
}

func (s MonicaModelState) SetEnvPs(v EnvironmentParameters) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewEnvPs sets the envPs field to a newly
// allocated EnvironmentParameters struct, preferring placement in s's segment.
func (s MonicaModelState) NewEnvPs() (EnvironmentParameters, error) {
	ss, err := NewEnvironmentParameters(s.Struct.Segment())
	if err != nil {
		return EnvironmentParameters{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s MonicaModelState) CropPs() (CropModuleParameters, error) {
	p, err := s.Struct.Ptr(2)
	return CropModuleParameters{Struct: p.Struct()}, err
}

func (s MonicaModelState) HasCropPs() bool {
	return s.Struct.HasPtr(2)
}

func (s MonicaModelState) SetCropPs(v CropModuleParameters) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewCropPs sets the cropPs field to a newly
// allocated CropModuleParameters struct, preferring placement in s's segment.
func (s MonicaModelState) NewCropPs() (CropModuleParameters, error) {
	ss, err := NewCropModuleParameters(s.Struct.Segment())
	if err != nil {
		return CropModuleParameters{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s MonicaModelState) SimPs() (SimulationParameters, error) {
	p, err := s.Struct.Ptr(3)
	return SimulationParameters{Struct: p.Struct()}, err
}

func (s MonicaModelState) HasSimPs() bool {
	return s.Struct.HasPtr(3)
}

func (s MonicaModelState) SetSimPs(v SimulationParameters) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewSimPs sets the simPs field to a newly
// allocated SimulationParameters struct, preferring placement in s's segment.
func (s MonicaModelState) NewSimPs() (SimulationParameters, error) {
	ss, err := NewSimulationParameters(s.Struct.Segment())
	if err != nil {
		return SimulationParameters{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

func (s MonicaModelState) GroundwaterInformation() (MeasuredGroundwaterTableInformation, error) {
	p, err := s.Struct.Ptr(4)
	return MeasuredGroundwaterTableInformation{Struct: p.Struct()}, err
}

func (s MonicaModelState) HasGroundwaterInformation() bool {
	return s.Struct.HasPtr(4)
}

func (s MonicaModelState) SetGroundwaterInformation(v MeasuredGroundwaterTableInformation) error {
	return s.Struct.SetPtr(4, v.Struct.ToPtr())
}

// NewGroundwaterInformation sets the groundwaterInformation field to a newly
// allocated MeasuredGroundwaterTableInformation struct, preferring placement in s's segment.
func (s MonicaModelState) NewGroundwaterInformation() (MeasuredGroundwaterTableInformation, error) {
	ss, err := NewMeasuredGroundwaterTableInformation(s.Struct.Segment())
	if err != nil {
		return MeasuredGroundwaterTableInformation{}, err
	}
	err = s.Struct.SetPtr(4, ss.Struct.ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilColumn() (SoilColumnState, error) {
	p, err := s.Struct.Ptr(5)
	return SoilColumnState{Struct: p.Struct()}, err
}

func (s MonicaModelState) HasSoilColumn() bool {
	return s.Struct.HasPtr(5)
}

func (s MonicaModelState) SetSoilColumn(v SoilColumnState) error {
	return s.Struct.SetPtr(5, v.Struct.ToPtr())
}

// NewSoilColumn sets the soilColumn field to a newly
// allocated SoilColumnState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilColumn() (SoilColumnState, error) {
	ss, err := NewSoilColumnState(s.Struct.Segment())
	if err != nil {
		return SoilColumnState{}, err
	}
	err = s.Struct.SetPtr(5, ss.Struct.ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilTemperature() (SoilTemperatureModuleState, error) {
	p, err := s.Struct.Ptr(6)
	return SoilTemperatureModuleState{Struct: p.Struct()}, err
}

func (s MonicaModelState) HasSoilTemperature() bool {
	return s.Struct.HasPtr(6)
}

func (s MonicaModelState) SetSoilTemperature(v SoilTemperatureModuleState) error {
	return s.Struct.SetPtr(6, v.Struct.ToPtr())
}

// NewSoilTemperature sets the soilTemperature field to a newly
// allocated SoilTemperatureModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilTemperature() (SoilTemperatureModuleState, error) {
	ss, err := NewSoilTemperatureModuleState(s.Struct.Segment())
	if err != nil {
		return SoilTemperatureModuleState{}, err
	}
	err = s.Struct.SetPtr(6, ss.Struct.ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilMoisture() (SoilMoistureModuleState, error) {
	p, err := s.Struct.Ptr(7)
	return SoilMoistureModuleState{Struct: p.Struct()}, err
}

func (s MonicaModelState) HasSoilMoisture() bool {
	return s.Struct.HasPtr(7)
}

func (s MonicaModelState) SetSoilMoisture(v SoilMoistureModuleState) error {
	return s.Struct.SetPtr(7, v.Struct.ToPtr())
}

// NewSoilMoisture sets the soilMoisture field to a newly
// allocated SoilMoistureModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilMoisture() (SoilMoistureModuleState, error) {
	ss, err := NewSoilMoistureModuleState(s.Struct.Segment())
	if err != nil {
		return SoilMoistureModuleState{}, err
	}
	err = s.Struct.SetPtr(7, ss.Struct.ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilOrganic() (SoilOrganicModuleState, error) {
	p, err := s.Struct.Ptr(8)
	return SoilOrganicModuleState{Struct: p.Struct()}, err
}

func (s MonicaModelState) HasSoilOrganic() bool {
	return s.Struct.HasPtr(8)
}

func (s MonicaModelState) SetSoilOrganic(v SoilOrganicModuleState) error {
	return s.Struct.SetPtr(8, v.Struct.ToPtr())
}

// NewSoilOrganic sets the soilOrganic field to a newly
// allocated SoilOrganicModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilOrganic() (SoilOrganicModuleState, error) {
	ss, err := NewSoilOrganicModuleState(s.Struct.Segment())
	if err != nil {
		return SoilOrganicModuleState{}, err
	}
	err = s.Struct.SetPtr(8, ss.Struct.ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilTransport() (SoilTransportModuleState, error) {
	p, err := s.Struct.Ptr(9)
	return SoilTransportModuleState{Struct: p.Struct()}, err
}

func (s MonicaModelState) HasSoilTransport() bool {
	return s.Struct.HasPtr(9)
}

func (s MonicaModelState) SetSoilTransport(v SoilTransportModuleState) error {
	return s.Struct.SetPtr(9, v.Struct.ToPtr())
}

// NewSoilTransport sets the soilTransport field to a newly
// allocated SoilTransportModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilTransport() (SoilTransportModuleState, error) {
	ss, err := NewSoilTransportModuleState(s.Struct.Segment())
	if err != nil {
		return SoilTransportModuleState{}, err
	}
	err = s.Struct.SetPtr(9, ss.Struct.ToPtr())
	return ss, err
}

func (s MonicaModelState) CurrentCropModule() (CropModuleState, error) {
	p, err := s.Struct.Ptr(10)
	return CropModuleState{Struct: p.Struct()}, err
}

func (s MonicaModelState) HasCurrentCropModule() bool {
	return s.Struct.HasPtr(10)
}

func (s MonicaModelState) SetCurrentCropModule(v CropModuleState) error {
	return s.Struct.SetPtr(10, v.Struct.ToPtr())
}

// NewCurrentCropModule sets the currentCropModule field to a newly
// allocated CropModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewCurrentCropModule() (CropModuleState, error) {
	ss, err := NewCropModuleState(s.Struct.Segment())
	if err != nil {
		return CropModuleState{}, err
	}
	err = s.Struct.SetPtr(10, ss.Struct.ToPtr())
	return ss, err
}

func (s MonicaModelState) SumFertiliser() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s MonicaModelState) SetSumFertiliser(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s MonicaModelState) SumOrgFertiliser() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s MonicaModelState) SetSumOrgFertiliser(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s MonicaModelState) DailySumFertiliser() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s MonicaModelState) SetDailySumFertiliser(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s MonicaModelState) DailySumOrgFertiliser() float64 {
	return math.Float64frombits(s.Struct.Uint64(64))
}

func (s MonicaModelState) SetDailySumOrgFertiliser(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v))
}

func (s MonicaModelState) DailySumOrganicFertilizerDM() float64 {
	return math.Float64frombits(s.Struct.Uint64(72))
}

func (s MonicaModelState) SetDailySumOrganicFertilizerDM(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v))
}

func (s MonicaModelState) SumOrganicFertilizerDM() float64 {
	return math.Float64frombits(s.Struct.Uint64(80))
}

func (s MonicaModelState) SetSumOrganicFertilizerDM(v float64) {
	s.Struct.SetUint64(80, math.Float64bits(v))
}

func (s MonicaModelState) HumusBalanceCarryOver() float64 {
	return math.Float64frombits(s.Struct.Uint64(88))
}

func (s MonicaModelState) SetHumusBalanceCarryOver(v float64) {
	s.Struct.SetUint64(88, math.Float64bits(v))
}

func (s MonicaModelState) DailySumIrrigationWater() float64 {
	return math.Float64frombits(s.Struct.Uint64(96))
}

func (s MonicaModelState) SetDailySumIrrigationWater(v float64) {
	s.Struct.SetUint64(96, math.Float64bits(v))
}

func (s MonicaModelState) OptCarbonExportedResidues() float64 {
	return math.Float64frombits(s.Struct.Uint64(104))
}

func (s MonicaModelState) SetOptCarbonExportedResidues(v float64) {
	s.Struct.SetUint64(104, math.Float64bits(v))
}

func (s MonicaModelState) OptCarbonReturnedResidues() float64 {
	return math.Float64frombits(s.Struct.Uint64(112))
}

func (s MonicaModelState) SetOptCarbonReturnedResidues(v float64) {
	s.Struct.SetUint64(112, math.Float64bits(v))
}

func (s MonicaModelState) CurrentStepDate() (common.Date, error) {
	p, err := s.Struct.Ptr(11)
	return common.Date{Struct: p.Struct()}, err
}

func (s MonicaModelState) HasCurrentStepDate() bool {
	return s.Struct.HasPtr(11)
}

func (s MonicaModelState) SetCurrentStepDate(v common.Date) error {
	return s.Struct.SetPtr(11, v.Struct.ToPtr())
}

// NewCurrentStepDate sets the currentStepDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s MonicaModelState) NewCurrentStepDate() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(11, ss.Struct.ToPtr())
	return ss, err
}

func (s MonicaModelState) ClimateData() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(12)
	return capnp.PointerList{List: p.List()}, err
}

func (s MonicaModelState) HasClimateData() bool {
	return s.Struct.HasPtr(12)
}

func (s MonicaModelState) SetClimateData(v capnp.PointerList) error {
	return s.Struct.SetPtr(12, v.List.ToPtr())
}

// NewClimateData sets the climateData field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s MonicaModelState) NewClimateData(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(12, l.List.ToPtr())
	return l, err
}

func (s MonicaModelState) CurrentEvents() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(13)
	return capnp.TextList{List: p.List()}, err
}

func (s MonicaModelState) HasCurrentEvents() bool {
	return s.Struct.HasPtr(13)
}

func (s MonicaModelState) SetCurrentEvents(v capnp.TextList) error {
	return s.Struct.SetPtr(13, v.List.ToPtr())
}

// NewCurrentEvents sets the currentEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s MonicaModelState) NewCurrentEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(13, l.List.ToPtr())
	return l, err
}

func (s MonicaModelState) PreviousDaysEvents() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(14)
	return capnp.TextList{List: p.List()}, err
}

func (s MonicaModelState) HasPreviousDaysEvents() bool {
	return s.Struct.HasPtr(14)
}

func (s MonicaModelState) SetPreviousDaysEvents(v capnp.TextList) error {
	return s.Struct.SetPtr(14, v.List.ToPtr())
}

// NewPreviousDaysEvents sets the previousDaysEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s MonicaModelState) NewPreviousDaysEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(14, l.List.ToPtr())
	return l, err
}

func (s MonicaModelState) ClearCropUponNextDay() bool {
	return s.Struct.Bit(16)
}

func (s MonicaModelState) SetClearCropUponNextDay(v bool) {
	s.Struct.SetBit(16, v)
}

func (s MonicaModelState) DaysWithCrop() uint16 {
	return s.Struct.Uint16(4)
}

func (s MonicaModelState) SetDaysWithCrop(v uint16) {
	s.Struct.SetUint16(4, v)
}

func (s MonicaModelState) AccuNStress() float64 {
	return math.Float64frombits(s.Struct.Uint64(120))
}

func (s MonicaModelState) SetAccuNStress(v float64) {
	s.Struct.SetUint64(120, math.Float64bits(v))
}

func (s MonicaModelState) AccuWaterStress() float64 {
	return math.Float64frombits(s.Struct.Uint64(128))
}

func (s MonicaModelState) SetAccuWaterStress(v float64) {
	s.Struct.SetUint64(128, math.Float64bits(v))
}

func (s MonicaModelState) AccuHeatStress() float64 {
	return math.Float64frombits(s.Struct.Uint64(136))
}

func (s MonicaModelState) SetAccuHeatStress(v float64) {
	s.Struct.SetUint64(136, math.Float64bits(v))
}

func (s MonicaModelState) AccuOxygenStress() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s MonicaModelState) SetAccuOxygenStress(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s MonicaModelState) VwAtmosphericCO2Concentration() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s MonicaModelState) SetVwAtmosphericCO2Concentration(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s MonicaModelState) VwAtmosphericO3Concentration() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s MonicaModelState) SetVwAtmosphericO3Concentration(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s MonicaModelState) VsGroundwaterDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s MonicaModelState) SetVsGroundwaterDepth(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s MonicaModelState) CultivationMethodCount() uint16 {
	return s.Struct.Uint16(0)
}

func (s MonicaModelState) SetCultivationMethodCount(v uint16) {
	s.Struct.SetUint16(0, v)
}

// MonicaModelState_List is a list of MonicaModelState.
type MonicaModelState_List struct{ capnp.List }

// NewMonicaModelState creates a new list of MonicaModelState.
func NewMonicaModelState_List(s *capnp.Segment, sz int32) (MonicaModelState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 144, PointerCount: 15}, sz)
	return MonicaModelState_List{l}, err
}

func (s MonicaModelState_List) At(i int) MonicaModelState { return MonicaModelState{s.List.Struct(i)} }

func (s MonicaModelState_List) Set(i int, v MonicaModelState) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s MonicaModelState_List) String() string {
	str, _ := text.MarshalList(0xab56969492d293b3, s.List)
	return str
}

// MonicaModelState_Future is a wrapper for a MonicaModelState promised by a client call.
type MonicaModelState_Future struct{ *capnp.Future }

func (p MonicaModelState_Future) Struct() (MonicaModelState, error) {
	s, err := p.Future.Struct()
	return MonicaModelState{s}, err
}

func (p MonicaModelState_Future) SitePs() SiteParameters_Future {
	return SiteParameters_Future{Future: p.Future.Field(0, nil)}
}

func (p MonicaModelState_Future) EnvPs() EnvironmentParameters_Future {
	return EnvironmentParameters_Future{Future: p.Future.Field(1, nil)}
}

func (p MonicaModelState_Future) CropPs() CropModuleParameters_Future {
	return CropModuleParameters_Future{Future: p.Future.Field(2, nil)}
}

func (p MonicaModelState_Future) SimPs() SimulationParameters_Future {
	return SimulationParameters_Future{Future: p.Future.Field(3, nil)}
}

func (p MonicaModelState_Future) GroundwaterInformation() MeasuredGroundwaterTableInformation_Future {
	return MeasuredGroundwaterTableInformation_Future{Future: p.Future.Field(4, nil)}
}

func (p MonicaModelState_Future) SoilColumn() SoilColumnState_Future {
	return SoilColumnState_Future{Future: p.Future.Field(5, nil)}
}

func (p MonicaModelState_Future) SoilTemperature() SoilTemperatureModuleState_Future {
	return SoilTemperatureModuleState_Future{Future: p.Future.Field(6, nil)}
}

func (p MonicaModelState_Future) SoilMoisture() SoilMoistureModuleState_Future {
	return SoilMoistureModuleState_Future{Future: p.Future.Field(7, nil)}
}

func (p MonicaModelState_Future) SoilOrganic() SoilOrganicModuleState_Future {
	return SoilOrganicModuleState_Future{Future: p.Future.Field(8, nil)}
}

func (p MonicaModelState_Future) SoilTransport() SoilTransportModuleState_Future {
	return SoilTransportModuleState_Future{Future: p.Future.Field(9, nil)}
}

func (p MonicaModelState_Future) CurrentCropModule() CropModuleState_Future {
	return CropModuleState_Future{Future: p.Future.Field(10, nil)}
}

func (p MonicaModelState_Future) CurrentStepDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(11, nil)}
}

type MonicaModelState_ACDToValue struct{ capnp.Struct }

// MonicaModelState_ACDToValue_TypeID is the unique identifier for the type MonicaModelState_ACDToValue.
const MonicaModelState_ACDToValue_TypeID = 0x98e203c76f83d365

func NewMonicaModelState_ACDToValue(s *capnp.Segment) (MonicaModelState_ACDToValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MonicaModelState_ACDToValue{st}, err
}

func NewRootMonicaModelState_ACDToValue(s *capnp.Segment) (MonicaModelState_ACDToValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MonicaModelState_ACDToValue{st}, err
}

func ReadRootMonicaModelState_ACDToValue(msg *capnp.Message) (MonicaModelState_ACDToValue, error) {
	root, err := msg.Root()
	return MonicaModelState_ACDToValue{root.Struct()}, err
}

func (s MonicaModelState_ACDToValue) String() string {
	str, _ := text.Marshal(0x98e203c76f83d365, s.Struct)
	return str
}

func (s MonicaModelState_ACDToValue) Acd() uint16 {
	return s.Struct.Uint16(0)
}

func (s MonicaModelState_ACDToValue) SetAcd(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s MonicaModelState_ACDToValue) Value() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s MonicaModelState_ACDToValue) SetValue(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

// MonicaModelState_ACDToValue_List is a list of MonicaModelState_ACDToValue.
type MonicaModelState_ACDToValue_List struct{ capnp.List }

// NewMonicaModelState_ACDToValue creates a new list of MonicaModelState_ACDToValue.
func NewMonicaModelState_ACDToValue_List(s *capnp.Segment, sz int32) (MonicaModelState_ACDToValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return MonicaModelState_ACDToValue_List{l}, err
}

func (s MonicaModelState_ACDToValue_List) At(i int) MonicaModelState_ACDToValue {
	return MonicaModelState_ACDToValue{s.List.Struct(i)}
}

func (s MonicaModelState_ACDToValue_List) Set(i int, v MonicaModelState_ACDToValue) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s MonicaModelState_ACDToValue_List) String() string {
	str, _ := text.MarshalList(0x98e203c76f83d365, s.List)
	return str
}

// MonicaModelState_ACDToValue_Future is a wrapper for a MonicaModelState_ACDToValue promised by a client call.
type MonicaModelState_ACDToValue_Future struct{ *capnp.Future }

func (p MonicaModelState_ACDToValue_Future) Struct() (MonicaModelState_ACDToValue, error) {
	s, err := p.Future.Struct()
	return MonicaModelState_ACDToValue{s}, err
}

type CropModuleState struct{ capnp.Struct }

// CropModuleState_TypeID is the unique identifier for the type CropModuleState.
const CropModuleState_TypeID = 0x811d54ac7debc21e

func NewCropModuleState(s *capnp.Segment) (CropModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 1248, PointerCount: 50})
	return CropModuleState{st}, err
}

func NewRootCropModuleState(s *capnp.Segment) (CropModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 1248, PointerCount: 50})
	return CropModuleState{st}, err
}

func ReadRootCropModuleState(msg *capnp.Message) (CropModuleState, error) {
	root, err := msg.Root()
	return CropModuleState{root.Struct()}, err
}

func (s CropModuleState) String() string {
	str, _ := text.Marshal(0x811d54ac7debc21e, s.Struct)
	return str
}

func (s CropModuleState) FrostKillOn() bool {
	return s.Struct.Bit(0)
}

func (s CropModuleState) SetFrostKillOn(v bool) {
	s.Struct.SetBit(0, v)
}

func (s CropModuleState) SpeciesParams() (SpeciesParameters, error) {
	p, err := s.Struct.Ptr(47)
	return SpeciesParameters{Struct: p.Struct()}, err
}

func (s CropModuleState) HasSpeciesParams() bool {
	return s.Struct.HasPtr(47)
}

func (s CropModuleState) SetSpeciesParams(v SpeciesParameters) error {
	return s.Struct.SetPtr(47, v.Struct.ToPtr())
}

// NewSpeciesParams sets the speciesParams field to a newly
// allocated SpeciesParameters struct, preferring placement in s's segment.
func (s CropModuleState) NewSpeciesParams() (SpeciesParameters, error) {
	ss, err := NewSpeciesParameters(s.Struct.Segment())
	if err != nil {
		return SpeciesParameters{}, err
	}
	err = s.Struct.SetPtr(47, ss.Struct.ToPtr())
	return ss, err
}

func (s CropModuleState) CultivarParams() (CultivarParameters, error) {
	p, err := s.Struct.Ptr(48)
	return CultivarParameters{Struct: p.Struct()}, err
}

func (s CropModuleState) HasCultivarParams() bool {
	return s.Struct.HasPtr(48)
}

func (s CropModuleState) SetCultivarParams(v CultivarParameters) error {
	return s.Struct.SetPtr(48, v.Struct.ToPtr())
}

// NewCultivarParams sets the cultivarParams field to a newly
// allocated CultivarParameters struct, preferring placement in s's segment.
func (s CropModuleState) NewCultivarParams() (CultivarParameters, error) {
	ss, err := NewCultivarParameters(s.Struct.Segment())
	if err != nil {
		return CultivarParameters{}, err
	}
	err = s.Struct.SetPtr(48, ss.Struct.ToPtr())
	return ss, err
}

func (s CropModuleState) ResidueParams() (CropResidueParameters, error) {
	p, err := s.Struct.Ptr(49)
	return CropResidueParameters{Struct: p.Struct()}, err
}

func (s CropModuleState) HasResidueParams() bool {
	return s.Struct.HasPtr(49)
}

func (s CropModuleState) SetResidueParams(v CropResidueParameters) error {
	return s.Struct.SetPtr(49, v.Struct.ToPtr())
}

// NewResidueParams sets the residueParams field to a newly
// allocated CropResidueParameters struct, preferring placement in s's segment.
func (s CropModuleState) NewResidueParams() (CropResidueParameters, error) {
	ss, err := NewCropResidueParameters(s.Struct.Segment())
	if err != nil {
		return CropResidueParameters{}, err
	}
	err = s.Struct.SetPtr(49, ss.Struct.ToPtr())
	return ss, err
}

func (s CropModuleState) IsWinterCrop() bool {
	return s.Struct.Bit(7285)
}

func (s CropModuleState) SetIsWinterCrop(v bool) {
	s.Struct.SetBit(7285, v)
}

func (s CropModuleState) VsLatitude() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s CropModuleState) SetVsLatitude(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s CropModuleState) AbovegroundBiomass() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s CropModuleState) SetAbovegroundBiomass(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s CropModuleState) AbovegroundBiomassOld() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s CropModuleState) SetAbovegroundBiomassOld(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s CropModuleState) PcAbovegroundOrgan() (capnp.BitList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.BitList{List: p.List()}, err
}

func (s CropModuleState) HasPcAbovegroundOrgan() bool {
	return s.Struct.HasPtr(0)
}

func (s CropModuleState) SetPcAbovegroundOrgan(v capnp.BitList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewPcAbovegroundOrgan sets the pcAbovegroundOrgan field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s CropModuleState) NewPcAbovegroundOrgan(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) ActualTranspiration() float64 {
	return math.Float64frombits(s.Struct.Uint64(64))
}

func (s CropModuleState) SetActualTranspiration(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v))
}

func (s CropModuleState) PcAssimilatePartitioningCoeff() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.PointerList{List: p.List()}, err
}

func (s CropModuleState) HasPcAssimilatePartitioningCoeff() bool {
	return s.Struct.HasPtr(1)
}

func (s CropModuleState) SetPcAssimilatePartitioningCoeff(v capnp.PointerList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewPcAssimilatePartitioningCoeff sets the pcAssimilatePartitioningCoeff field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s CropModuleState) NewPcAssimilatePartitioningCoeff(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcAssimilateReallocation() float64 {
	return math.Float64frombits(s.Struct.Uint64(72))
}

func (s CropModuleState) SetPcAssimilateReallocation(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v))
}

func (s CropModuleState) Assimilates() float64 {
	return math.Float64frombits(s.Struct.Uint64(80))
}

func (s CropModuleState) SetAssimilates(v float64) {
	s.Struct.SetUint64(80, math.Float64bits(v))
}

func (s CropModuleState) AssimilationRate() float64 {
	return math.Float64frombits(s.Struct.Uint64(88))
}

func (s CropModuleState) SetAssimilationRate(v float64) {
	s.Struct.SetUint64(88, math.Float64bits(v))
}

func (s CropModuleState) AstronomicDayLenght() float64 {
	return math.Float64frombits(s.Struct.Uint64(96))
}

func (s CropModuleState) SetAstronomicDayLenght(v float64) {
	s.Struct.SetUint64(96, math.Float64bits(v))
}

func (s CropModuleState) PcBaseDaylength() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcBaseDaylength() bool {
	return s.Struct.HasPtr(2)
}

func (s CropModuleState) SetPcBaseDaylength(v capnp.Float64List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewPcBaseDaylength sets the pcBaseDaylength field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcBaseDaylength(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcBaseTemperature() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcBaseTemperature() bool {
	return s.Struct.HasPtr(3)
}

func (s CropModuleState) SetPcBaseTemperature(v capnp.Float64List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewPcBaseTemperature sets the pcBaseTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcBaseTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcBeginSensitivePhaseHeatStress() float64 {
	return math.Float64frombits(s.Struct.Uint64(104))
}

func (s CropModuleState) SetPcBeginSensitivePhaseHeatStress(v float64) {
	s.Struct.SetUint64(104, math.Float64bits(v))
}

func (s CropModuleState) BelowgroundBiomass() float64 {
	return math.Float64frombits(s.Struct.Uint64(112))
}

func (s CropModuleState) SetBelowgroundBiomass(v float64) {
	s.Struct.SetUint64(112, math.Float64bits(v))
}

func (s CropModuleState) BelowgroundBiomassOld() float64 {
	return math.Float64frombits(s.Struct.Uint64(120))
}

func (s CropModuleState) SetBelowgroundBiomassOld(v float64) {
	s.Struct.SetUint64(120, math.Float64bits(v))
}

func (s CropModuleState) PcCarboxylationPathway() int64 {
	return int64(s.Struct.Uint64(128))
}

func (s CropModuleState) SetPcCarboxylationPathway(v int64) {
	s.Struct.SetUint64(128, uint64(v))
}

func (s CropModuleState) ClearDayRadiation() float64 {
	return math.Float64frombits(s.Struct.Uint64(136))
}

func (s CropModuleState) SetClearDayRadiation(v float64) {
	s.Struct.SetUint64(136, math.Float64bits(v))
}

func (s CropModuleState) PcCo2Method() uint8 {
	return s.Struct.Uint8(1) ^ 3
}

func (s CropModuleState) SetPcCo2Method(v uint8) {
	s.Struct.SetUint8(1, v^3)
}

func (s CropModuleState) CriticalNConcentration() float64 {
	return math.Float64frombits(s.Struct.Uint64(144))
}

func (s CropModuleState) SetCriticalNConcentration(v float64) {
	s.Struct.SetUint64(144, math.Float64bits(v))
}

func (s CropModuleState) PcCriticalOxygenContent() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(4)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcCriticalOxygenContent() bool {
	return s.Struct.HasPtr(4)
}

func (s CropModuleState) SetPcCriticalOxygenContent(v capnp.Float64List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewPcCriticalOxygenContent sets the pcCriticalOxygenContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcCriticalOxygenContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcCriticalTemperatureHeatStress() float64 {
	return math.Float64frombits(s.Struct.Uint64(152))
}

func (s CropModuleState) SetPcCriticalTemperatureHeatStress(v float64) {
	s.Struct.SetUint64(152, math.Float64bits(v))
}

func (s CropModuleState) CropDiameter() float64 {
	return math.Float64frombits(s.Struct.Uint64(160))
}

func (s CropModuleState) SetCropDiameter(v float64) {
	s.Struct.SetUint64(160, math.Float64bits(v))
}

func (s CropModuleState) CropFrostRedux() float64 {
	return math.Float64frombits(s.Struct.Uint64(168) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetCropFrostRedux(v float64) {
	s.Struct.SetUint64(168, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) CropHeatRedux() float64 {
	return math.Float64frombits(s.Struct.Uint64(176) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetCropHeatRedux(v float64) {
	s.Struct.SetUint64(176, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) CropHeight() float64 {
	return math.Float64frombits(s.Struct.Uint64(184))
}

func (s CropModuleState) SetCropHeight(v float64) {
	s.Struct.SetUint64(184, math.Float64bits(v))
}

func (s CropModuleState) PcCropHeightP1() float64 {
	return math.Float64frombits(s.Struct.Uint64(192))
}

func (s CropModuleState) SetPcCropHeightP1(v float64) {
	s.Struct.SetUint64(192, math.Float64bits(v))
}

func (s CropModuleState) PcCropHeightP2() float64 {
	return math.Float64frombits(s.Struct.Uint64(200))
}

func (s CropModuleState) SetPcCropHeightP2(v float64) {
	s.Struct.SetUint64(200, math.Float64bits(v))
}

func (s CropModuleState) PcCropName() (string, error) {
	p, err := s.Struct.Ptr(5)
	return p.Text(), err
}

func (s CropModuleState) HasPcCropName() bool {
	return s.Struct.HasPtr(5)
}

func (s CropModuleState) PcCropNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return p.TextBytes(), err
}

func (s CropModuleState) SetPcCropName(v string) error {
	return s.Struct.SetText(5, v)
}

func (s CropModuleState) CropNDemand() float64 {
	return math.Float64frombits(s.Struct.Uint64(208))
}

func (s CropModuleState) SetCropNDemand(v float64) {
	s.Struct.SetUint64(208, math.Float64bits(v))
}

func (s CropModuleState) CropNRedux() float64 {
	return math.Float64frombits(s.Struct.Uint64(216) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetCropNRedux(v float64) {
	s.Struct.SetUint64(216, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) PcCropSpecificMaxRootingDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(224))
}

func (s CropModuleState) SetPcCropSpecificMaxRootingDepth(v float64) {
	s.Struct.SetUint64(224, math.Float64bits(v))
}

func (s CropModuleState) CropWaterUptake() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(6)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasCropWaterUptake() bool {
	return s.Struct.HasPtr(6)
}

func (s CropModuleState) SetCropWaterUptake(v capnp.Float64List) error {
	return s.Struct.SetPtr(6, v.List.ToPtr())
}

// NewCropWaterUptake sets the cropWaterUptake field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewCropWaterUptake(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(6, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) CurrentTemperatureSum() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(7)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasCurrentTemperatureSum() bool {
	return s.Struct.HasPtr(7)
}

func (s CropModuleState) SetCurrentTemperatureSum(v capnp.Float64List) error {
	return s.Struct.SetPtr(7, v.List.ToPtr())
}

// NewCurrentTemperatureSum sets the currentTemperatureSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewCurrentTemperatureSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(7, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) CurrentTotalTemperatureSum() float64 {
	return math.Float64frombits(s.Struct.Uint64(232))
}

func (s CropModuleState) SetCurrentTotalTemperatureSum(v float64) {
	s.Struct.SetUint64(232, math.Float64bits(v))
}

func (s CropModuleState) CurrentTotalTemperatureSumRoot() float64 {
	return math.Float64frombits(s.Struct.Uint64(240))
}

func (s CropModuleState) SetCurrentTotalTemperatureSumRoot(v float64) {
	s.Struct.SetUint64(240, math.Float64bits(v))
}

func (s CropModuleState) PcCuttingDelayDays() uint16 {
	return s.Struct.Uint16(2)
}

func (s CropModuleState) SetPcCuttingDelayDays(v uint16) {
	s.Struct.SetUint16(2, v)
}

func (s CropModuleState) DaylengthFactor() float64 {
	return math.Float64frombits(s.Struct.Uint64(248))
}

func (s CropModuleState) SetDaylengthFactor(v float64) {
	s.Struct.SetUint64(248, math.Float64bits(v))
}

func (s CropModuleState) PcDaylengthRequirement() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(8)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcDaylengthRequirement() bool {
	return s.Struct.HasPtr(8)
}

func (s CropModuleState) SetPcDaylengthRequirement(v capnp.Float64List) error {
	return s.Struct.SetPtr(8, v.List.ToPtr())
}

// NewPcDaylengthRequirement sets the pcDaylengthRequirement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcDaylengthRequirement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(8, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) DaysAfterBeginFlowering() uint16 {
	return s.Struct.Uint16(4)
}

func (s CropModuleState) SetDaysAfterBeginFlowering(v uint16) {
	s.Struct.SetUint16(4, v)
}

func (s CropModuleState) Declination() float64 {
	return math.Float64frombits(s.Struct.Uint64(256))
}

func (s CropModuleState) SetDeclination(v float64) {
	s.Struct.SetUint64(256, math.Float64bits(v))
}

func (s CropModuleState) PcDefaultRadiationUseEfficiency() float64 {
	return math.Float64frombits(s.Struct.Uint64(264))
}

func (s CropModuleState) SetPcDefaultRadiationUseEfficiency(v float64) {
	s.Struct.SetUint64(264, math.Float64bits(v))
}

func (s CropModuleState) VmDepthGroundwaterTable() uint16 {
	return s.Struct.Uint16(6)
}

func (s CropModuleState) SetVmDepthGroundwaterTable(v uint16) {
	s.Struct.SetUint16(6, v)
}

func (s CropModuleState) PcDevelopmentAccelerationByNitrogenStress() uint64 {
	return s.Struct.Uint64(272)
}

func (s CropModuleState) SetPcDevelopmentAccelerationByNitrogenStress(v uint64) {
	s.Struct.SetUint64(272, v)
}

func (s CropModuleState) DevelopmentalStage() uint16 {
	return s.Struct.Uint16(280)
}

func (s CropModuleState) SetDevelopmentalStage(v uint16) {
	s.Struct.SetUint16(280, v)
}

func (s CropModuleState) NoOfCropSteps() uint16 {
	return s.Struct.Uint16(282)
}

func (s CropModuleState) SetNoOfCropSteps(v uint16) {
	s.Struct.SetUint16(282, v)
}

func (s CropModuleState) DroughtImpactOnFertility() float64 {
	return math.Float64frombits(s.Struct.Uint64(288) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetDroughtImpactOnFertility(v float64) {
	s.Struct.SetUint64(288, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) PcDroughtImpactOnFertilityFactor() float64 {
	return math.Float64frombits(s.Struct.Uint64(296))
}

func (s CropModuleState) SetPcDroughtImpactOnFertilityFactor(v float64) {
	s.Struct.SetUint64(296, math.Float64bits(v))
}

func (s CropModuleState) PcDroughtStressThreshold() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(9)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcDroughtStressThreshold() bool {
	return s.Struct.HasPtr(9)
}

func (s CropModuleState) SetPcDroughtStressThreshold(v capnp.Float64List) error {
	return s.Struct.SetPtr(9, v.List.ToPtr())
}

// NewPcDroughtStressThreshold sets the pcDroughtStressThreshold field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcDroughtStressThreshold(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(9, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcEmergenceFloodingControlOn() bool {
	return s.Struct.Bit(2)
}

func (s CropModuleState) SetPcEmergenceFloodingControlOn(v bool) {
	s.Struct.SetBit(2, v)
}

func (s CropModuleState) PcEmergenceMoistureControlOn() bool {
	return s.Struct.Bit(3)
}

func (s CropModuleState) SetPcEmergenceMoistureControlOn(v bool) {
	s.Struct.SetBit(3, v)
}

func (s CropModuleState) PcEndSensitivePhaseHeatStress() float64 {
	return math.Float64frombits(s.Struct.Uint64(304))
}

func (s CropModuleState) SetPcEndSensitivePhaseHeatStress(v float64) {
	s.Struct.SetUint64(304, math.Float64bits(v))
}

func (s CropModuleState) EffectiveDayLength() float64 {
	return math.Float64frombits(s.Struct.Uint64(312))
}

func (s CropModuleState) SetEffectiveDayLength(v float64) {
	s.Struct.SetUint64(312, math.Float64bits(v))
}

func (s CropModuleState) ErrorStatus() bool {
	return s.Struct.Bit(4)
}

func (s CropModuleState) SetErrorStatus(v bool) {
	s.Struct.SetBit(4, v)
}

func (s CropModuleState) ErrorMessage() (string, error) {
	p, err := s.Struct.Ptr(10)
	return p.Text(), err
}

func (s CropModuleState) HasErrorMessage() bool {
	return s.Struct.HasPtr(10)
}

func (s CropModuleState) ErrorMessageBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(10)
	return p.TextBytes(), err
}

func (s CropModuleState) SetErrorMessage(v string) error {
	return s.Struct.SetText(10, v)
}

func (s CropModuleState) EvaporatedFromIntercept() float64 {
	return math.Float64frombits(s.Struct.Uint64(320))
}

func (s CropModuleState) SetEvaporatedFromIntercept(v float64) {
	s.Struct.SetUint64(320, math.Float64bits(v))
}

func (s CropModuleState) ExtraterrestrialRadiation() float64 {
	return math.Float64frombits(s.Struct.Uint64(328))
}

func (s CropModuleState) SetExtraterrestrialRadiation(v float64) {
	s.Struct.SetUint64(328, math.Float64bits(v))
}

func (s CropModuleState) PcFieldConditionModifier() float64 {
	return math.Float64frombits(s.Struct.Uint64(336))
}

func (s CropModuleState) SetPcFieldConditionModifier(v float64) {
	s.Struct.SetUint64(336, math.Float64bits(v))
}

func (s CropModuleState) FinalDevelopmentalStage() uint16 {
	return s.Struct.Uint16(284)
}

func (s CropModuleState) SetFinalDevelopmentalStage(v uint16) {
	s.Struct.SetUint16(284, v)
}

func (s CropModuleState) FixedN() float64 {
	return math.Float64frombits(s.Struct.Uint64(344))
}

func (s CropModuleState) SetFixedN(v float64) {
	s.Struct.SetUint64(344, math.Float64bits(v))
}

func (s CropModuleState) PcFrostDehardening() float64 {
	return math.Float64frombits(s.Struct.Uint64(352))
}

func (s CropModuleState) SetPcFrostDehardening(v float64) {
	s.Struct.SetUint64(352, math.Float64bits(v))
}

func (s CropModuleState) PcFrostHardening() float64 {
	return math.Float64frombits(s.Struct.Uint64(360))
}

func (s CropModuleState) SetPcFrostHardening(v float64) {
	s.Struct.SetUint64(360, math.Float64bits(v))
}

func (s CropModuleState) GlobalRadiation() float64 {
	return math.Float64frombits(s.Struct.Uint64(368))
}

func (s CropModuleState) SetGlobalRadiation(v float64) {
	s.Struct.SetUint64(368, math.Float64bits(v))
}

func (s CropModuleState) GreenAreaIndex() float64 {
	return math.Float64frombits(s.Struct.Uint64(376))
}

func (s CropModuleState) SetGreenAreaIndex(v float64) {
	s.Struct.SetUint64(376, math.Float64bits(v))
}

func (s CropModuleState) GrossAssimilates() float64 {
	return math.Float64frombits(s.Struct.Uint64(384))
}

func (s CropModuleState) SetGrossAssimilates(v float64) {
	s.Struct.SetUint64(384, math.Float64bits(v))
}

func (s CropModuleState) GrossPhotosynthesis() float64 {
	return math.Float64frombits(s.Struct.Uint64(392))
}

func (s CropModuleState) SetGrossPhotosynthesis(v float64) {
	s.Struct.SetUint64(392, math.Float64bits(v))
}

func (s CropModuleState) GrossPhotosynthesisMol() float64 {
	return math.Float64frombits(s.Struct.Uint64(400))
}

func (s CropModuleState) SetGrossPhotosynthesisMol(v float64) {
	s.Struct.SetUint64(400, math.Float64bits(v))
}

func (s CropModuleState) GrossPhotosynthesisReferenceMol() float64 {
	return math.Float64frombits(s.Struct.Uint64(408))
}

func (s CropModuleState) SetGrossPhotosynthesisReferenceMol(v float64) {
	s.Struct.SetUint64(408, math.Float64bits(v))
}

func (s CropModuleState) GrossPrimaryProduction() float64 {
	return math.Float64frombits(s.Struct.Uint64(416))
}

func (s CropModuleState) SetGrossPrimaryProduction(v float64) {
	s.Struct.SetUint64(416, math.Float64bits(v))
}

func (s CropModuleState) GrowthCycleEnded() bool {
	return s.Struct.Bit(5)
}

func (s CropModuleState) SetGrowthCycleEnded(v bool) {
	s.Struct.SetBit(5, v)
}

func (s CropModuleState) GrowthRespirationAS() float64 {
	return math.Float64frombits(s.Struct.Uint64(424))
}

func (s CropModuleState) SetGrowthRespirationAS(v float64) {
	s.Struct.SetUint64(424, math.Float64bits(v))
}

func (s CropModuleState) PcHeatSumIrrigationStart() float64 {
	return math.Float64frombits(s.Struct.Uint64(432))
}

func (s CropModuleState) SetPcHeatSumIrrigationStart(v float64) {
	s.Struct.SetUint64(432, math.Float64bits(v))
}

func (s CropModuleState) PcHeatSumIrrigationEnd() float64 {
	return math.Float64frombits(s.Struct.Uint64(440))
}

func (s CropModuleState) SetPcHeatSumIrrigationEnd(v float64) {
	s.Struct.SetUint64(440, math.Float64bits(v))
}

func (s CropModuleState) VsHeightNN() float64 {
	return math.Float64frombits(s.Struct.Uint64(448))
}

func (s CropModuleState) SetVsHeightNN(v float64) {
	s.Struct.SetUint64(448, math.Float64bits(v))
}

func (s CropModuleState) PcInitialKcFactor() float64 {
	return math.Float64frombits(s.Struct.Uint64(456))
}

func (s CropModuleState) SetPcInitialKcFactor(v float64) {
	s.Struct.SetUint64(456, math.Float64bits(v))
}

func (s CropModuleState) PcInitialOrganBiomass() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(11)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcInitialOrganBiomass() bool {
	return s.Struct.HasPtr(11)
}

func (s CropModuleState) SetPcInitialOrganBiomass(v capnp.Float64List) error {
	return s.Struct.SetPtr(11, v.List.ToPtr())
}

// NewPcInitialOrganBiomass sets the pcInitialOrganBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcInitialOrganBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(11, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcInitialRootingDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(464))
}

func (s CropModuleState) SetPcInitialRootingDepth(v float64) {
	s.Struct.SetUint64(464, math.Float64bits(v))
}

func (s CropModuleState) InterceptionStorage() float64 {
	return math.Float64frombits(s.Struct.Uint64(472))
}

func (s CropModuleState) SetInterceptionStorage(v float64) {
	s.Struct.SetUint64(472, math.Float64bits(v))
}

func (s CropModuleState) KcFactor() float64 {
	return math.Float64frombits(s.Struct.Uint64(480) ^ 0x3fe3333333333333)
}

func (s CropModuleState) SetKcFactor(v float64) {
	s.Struct.SetUint64(480, math.Float64bits(v)^0x3fe3333333333333)
}

func (s CropModuleState) LeafAreaIndex() float64 {
	return math.Float64frombits(s.Struct.Uint64(488))
}

func (s CropModuleState) SetLeafAreaIndex(v float64) {
	s.Struct.SetUint64(488, math.Float64bits(v))
}

func (s CropModuleState) SunlitLeafAreaIndex() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(12)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasSunlitLeafAreaIndex() bool {
	return s.Struct.HasPtr(12)
}

func (s CropModuleState) SetSunlitLeafAreaIndex(v capnp.Float64List) error {
	return s.Struct.SetPtr(12, v.List.ToPtr())
}

// NewSunlitLeafAreaIndex sets the sunlitLeafAreaIndex field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewSunlitLeafAreaIndex(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(12, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) ShadedLeafAreaIndex() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(13)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasShadedLeafAreaIndex() bool {
	return s.Struct.HasPtr(13)
}

func (s CropModuleState) SetShadedLeafAreaIndex(v capnp.Float64List) error {
	return s.Struct.SetPtr(13, v.List.ToPtr())
}

// NewShadedLeafAreaIndex sets the shadedLeafAreaIndex field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewShadedLeafAreaIndex(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(13, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcLowTemperatureExposure() float64 {
	return math.Float64frombits(s.Struct.Uint64(496))
}

func (s CropModuleState) SetPcLowTemperatureExposure(v float64) {
	s.Struct.SetUint64(496, math.Float64bits(v))
}

func (s CropModuleState) PcLimitingTemperatureHeatStress() float64 {
	return math.Float64frombits(s.Struct.Uint64(504))
}

func (s CropModuleState) SetPcLimitingTemperatureHeatStress(v float64) {
	s.Struct.SetUint64(504, math.Float64bits(v))
}

func (s CropModuleState) Lt50() float64 {
	return math.Float64frombits(s.Struct.Uint64(512) ^ 0xc008000000000000)
}

func (s CropModuleState) SetLt50(v float64) {
	s.Struct.SetUint64(512, math.Float64bits(v)^0xc008000000000000)
}

func (s CropModuleState) Lt50m() float64 {
	return math.Float64frombits(s.Struct.Uint64(1240) ^ 0xc008000000000000)
}

func (s CropModuleState) SetLt50m(v float64) {
	s.Struct.SetUint64(1240, math.Float64bits(v)^0xc008000000000000)
}

func (s CropModuleState) PcLt50cultivar() float64 {
	return math.Float64frombits(s.Struct.Uint64(520))
}

func (s CropModuleState) SetPcLt50cultivar(v float64) {
	s.Struct.SetUint64(520, math.Float64bits(v))
}

func (s CropModuleState) PcLuxuryNCoeff() float64 {
	return math.Float64frombits(s.Struct.Uint64(528))
}

func (s CropModuleState) SetPcLuxuryNCoeff(v float64) {
	s.Struct.SetUint64(528, math.Float64bits(v))
}

func (s CropModuleState) MaintenanceRespirationAS() float64 {
	return math.Float64frombits(s.Struct.Uint64(536))
}

func (s CropModuleState) SetMaintenanceRespirationAS(v float64) {
	s.Struct.SetUint64(536, math.Float64bits(v))
}

func (s CropModuleState) PcMaxAssimilationRate() float64 {
	return math.Float64frombits(s.Struct.Uint64(544))
}

func (s CropModuleState) SetPcMaxAssimilationRate(v float64) {
	s.Struct.SetUint64(544, math.Float64bits(v))
}

func (s CropModuleState) PcMaxCropDiameter() float64 {
	return math.Float64frombits(s.Struct.Uint64(552))
}

func (s CropModuleState) SetPcMaxCropDiameter(v float64) {
	s.Struct.SetUint64(552, math.Float64bits(v))
}

func (s CropModuleState) PcMaxCropHeight() float64 {
	return math.Float64frombits(s.Struct.Uint64(560))
}

func (s CropModuleState) SetPcMaxCropHeight(v float64) {
	s.Struct.SetUint64(560, math.Float64bits(v))
}

func (s CropModuleState) MaxNUptake() float64 {
	return math.Float64frombits(s.Struct.Uint64(568))
}

func (s CropModuleState) SetMaxNUptake(v float64) {
	s.Struct.SetUint64(568, math.Float64bits(v))
}

func (s CropModuleState) PcMaxNUptakeParam() float64 {
	return math.Float64frombits(s.Struct.Uint64(576))
}

func (s CropModuleState) SetPcMaxNUptakeParam(v float64) {
	s.Struct.SetUint64(576, math.Float64bits(v))
}

func (s CropModuleState) PcMaxRootingDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(584))
}

func (s CropModuleState) SetPcMaxRootingDepth(v float64) {
	s.Struct.SetUint64(584, math.Float64bits(v))
}

func (s CropModuleState) PcMinimumNConcentration() float64 {
	return math.Float64frombits(s.Struct.Uint64(592))
}

func (s CropModuleState) SetPcMinimumNConcentration(v float64) {
	s.Struct.SetUint64(592, math.Float64bits(v))
}

func (s CropModuleState) PcMinimumTemperatureForAssimilation() float64 {
	return math.Float64frombits(s.Struct.Uint64(600))
}

func (s CropModuleState) SetPcMinimumTemperatureForAssimilation(v float64) {
	s.Struct.SetUint64(600, math.Float64bits(v))
}

func (s CropModuleState) PcOptimumTemperatureForAssimilation() float64 {
	return math.Float64frombits(s.Struct.Uint64(608))
}

func (s CropModuleState) SetPcOptimumTemperatureForAssimilation(v float64) {
	s.Struct.SetUint64(608, math.Float64bits(v))
}

func (s CropModuleState) PcMaximumTemperatureForAssimilation() float64 {
	return math.Float64frombits(s.Struct.Uint64(616))
}

func (s CropModuleState) SetPcMaximumTemperatureForAssimilation(v float64) {
	s.Struct.SetUint64(616, math.Float64bits(v))
}

func (s CropModuleState) PcMinimumTemperatureRootGrowth() float64 {
	return math.Float64frombits(s.Struct.Uint64(624))
}

func (s CropModuleState) SetPcMinimumTemperatureRootGrowth(v float64) {
	s.Struct.SetUint64(624, math.Float64bits(v))
}

func (s CropModuleState) NetMaintenanceRespiration() float64 {
	return math.Float64frombits(s.Struct.Uint64(632))
}

func (s CropModuleState) SetNetMaintenanceRespiration(v float64) {
	s.Struct.SetUint64(632, math.Float64bits(v))
}

func (s CropModuleState) NetPhotosynthesis() float64 {
	return math.Float64frombits(s.Struct.Uint64(640))
}

func (s CropModuleState) SetNetPhotosynthesis(v float64) {
	s.Struct.SetUint64(640, math.Float64bits(v))
}

func (s CropModuleState) NetPrecipitation() float64 {
	return math.Float64frombits(s.Struct.Uint64(648))
}

func (s CropModuleState) SetNetPrecipitation(v float64) {
	s.Struct.SetUint64(648, math.Float64bits(v))
}

func (s CropModuleState) NetPrimaryProduction() float64 {
	return math.Float64frombits(s.Struct.Uint64(656))
}

func (s CropModuleState) SetNetPrimaryProduction(v float64) {
	s.Struct.SetUint64(656, math.Float64bits(v))
}

func (s CropModuleState) PcNConcentrationAbovegroundBiomass() float64 {
	return math.Float64frombits(s.Struct.Uint64(664))
}

func (s CropModuleState) SetPcNConcentrationAbovegroundBiomass(v float64) {
	s.Struct.SetUint64(664, math.Float64bits(v))
}

func (s CropModuleState) NConcentrationAbovegroundBiomass() float64 {
	return math.Float64frombits(s.Struct.Uint64(672))
}

func (s CropModuleState) SetNConcentrationAbovegroundBiomass(v float64) {
	s.Struct.SetUint64(672, math.Float64bits(v))
}

func (s CropModuleState) NConcentrationAbovegroundBiomassOld() float64 {
	return math.Float64frombits(s.Struct.Uint64(680))
}

func (s CropModuleState) SetNConcentrationAbovegroundBiomassOld(v float64) {
	s.Struct.SetUint64(680, math.Float64bits(v))
}

func (s CropModuleState) PcNConcentrationB0() float64 {
	return math.Float64frombits(s.Struct.Uint64(688))
}

func (s CropModuleState) SetPcNConcentrationB0(v float64) {
	s.Struct.SetUint64(688, math.Float64bits(v))
}

func (s CropModuleState) NContentDeficit() float64 {
	return math.Float64frombits(s.Struct.Uint64(696))
}

func (s CropModuleState) SetNContentDeficit(v float64) {
	s.Struct.SetUint64(696, math.Float64bits(v))
}

func (s CropModuleState) PcNConcentrationPN() float64 {
	return math.Float64frombits(s.Struct.Uint64(704))
}

func (s CropModuleState) SetPcNConcentrationPN(v float64) {
	s.Struct.SetUint64(704, math.Float64bits(v))
}

func (s CropModuleState) PcNConcentrationRoot() float64 {
	return math.Float64frombits(s.Struct.Uint64(712))
}

func (s CropModuleState) SetPcNConcentrationRoot(v float64) {
	s.Struct.SetUint64(712, math.Float64bits(v))
}

func (s CropModuleState) NConcentrationRoot() float64 {
	return math.Float64frombits(s.Struct.Uint64(720))
}

func (s CropModuleState) SetNConcentrationRoot(v float64) {
	s.Struct.SetUint64(720, math.Float64bits(v))
}

func (s CropModuleState) NConcentrationRootOld() float64 {
	return math.Float64frombits(s.Struct.Uint64(728))
}

func (s CropModuleState) SetNConcentrationRootOld(v float64) {
	s.Struct.SetUint64(728, math.Float64bits(v))
}

func (s CropModuleState) PcNitrogenResponseOn() bool {
	return s.Struct.Bit(6)
}

func (s CropModuleState) SetPcNitrogenResponseOn(v bool) {
	s.Struct.SetBit(6, v)
}

func (s CropModuleState) PcNumberOfDevelopmentalStages() float64 {
	return math.Float64frombits(s.Struct.Uint64(736))
}

func (s CropModuleState) SetPcNumberOfDevelopmentalStages(v float64) {
	s.Struct.SetUint64(736, math.Float64bits(v))
}

func (s CropModuleState) PcNumberOfOrgans() float64 {
	return math.Float64frombits(s.Struct.Uint64(744))
}

func (s CropModuleState) SetPcNumberOfOrgans(v float64) {
	s.Struct.SetUint64(744, math.Float64bits(v))
}

func (s CropModuleState) NUptakeFromLayer() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(14)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasNUptakeFromLayer() bool {
	return s.Struct.HasPtr(14)
}

func (s CropModuleState) SetNUptakeFromLayer(v capnp.Float64List) error {
	return s.Struct.SetPtr(14, v.List.ToPtr())
}

// NewNUptakeFromLayer sets the nUptakeFromLayer field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewNUptakeFromLayer(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(14, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcOptimumTemperature() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(15)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcOptimumTemperature() bool {
	return s.Struct.HasPtr(15)
}

func (s CropModuleState) SetPcOptimumTemperature(v capnp.Float64List) error {
	return s.Struct.SetPtr(15, v.List.ToPtr())
}

// NewPcOptimumTemperature sets the pcOptimumTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcOptimumTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(15, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) OrganBiomass() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(16)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasOrganBiomass() bool {
	return s.Struct.HasPtr(16)
}

func (s CropModuleState) SetOrganBiomass(v capnp.Float64List) error {
	return s.Struct.SetPtr(16, v.List.ToPtr())
}

// NewOrganBiomass sets the organBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(16, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) OrganDeadBiomass() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(17)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasOrganDeadBiomass() bool {
	return s.Struct.HasPtr(17)
}

func (s CropModuleState) SetOrganDeadBiomass(v capnp.Float64List) error {
	return s.Struct.SetPtr(17, v.List.ToPtr())
}

// NewOrganDeadBiomass sets the organDeadBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganDeadBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(17, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) OrganGreenBiomass() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(18)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasOrganGreenBiomass() bool {
	return s.Struct.HasPtr(18)
}

func (s CropModuleState) SetOrganGreenBiomass(v capnp.Float64List) error {
	return s.Struct.SetPtr(18, v.List.ToPtr())
}

// NewOrganGreenBiomass sets the organGreenBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganGreenBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(18, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) OrganGrowthIncrement() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(19)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasOrganGrowthIncrement() bool {
	return s.Struct.HasPtr(19)
}

func (s CropModuleState) SetOrganGrowthIncrement(v capnp.Float64List) error {
	return s.Struct.SetPtr(19, v.List.ToPtr())
}

// NewOrganGrowthIncrement sets the organGrowthIncrement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganGrowthIncrement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(19, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcOrganGrowthRespiration() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(20)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcOrganGrowthRespiration() bool {
	return s.Struct.HasPtr(20)
}

func (s CropModuleState) SetPcOrganGrowthRespiration(v capnp.Float64List) error {
	return s.Struct.SetPtr(20, v.List.ToPtr())
}

// NewPcOrganGrowthRespiration sets the pcOrganGrowthRespiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganGrowthRespiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(20, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcOrganIdsForPrimaryYield() (YieldComponent_List, error) {
	p, err := s.Struct.Ptr(21)
	return YieldComponent_List{List: p.List()}, err
}

func (s CropModuleState) HasPcOrganIdsForPrimaryYield() bool {
	return s.Struct.HasPtr(21)
}

func (s CropModuleState) SetPcOrganIdsForPrimaryYield(v YieldComponent_List) error {
	return s.Struct.SetPtr(21, v.List.ToPtr())
}

// NewPcOrganIdsForPrimaryYield sets the pcOrganIdsForPrimaryYield field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganIdsForPrimaryYield(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(s.Struct.Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = s.Struct.SetPtr(21, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcOrganIdsForSecondaryYield() (YieldComponent_List, error) {
	p, err := s.Struct.Ptr(22)
	return YieldComponent_List{List: p.List()}, err
}

func (s CropModuleState) HasPcOrganIdsForSecondaryYield() bool {
	return s.Struct.HasPtr(22)
}

func (s CropModuleState) SetPcOrganIdsForSecondaryYield(v YieldComponent_List) error {
	return s.Struct.SetPtr(22, v.List.ToPtr())
}

// NewPcOrganIdsForSecondaryYield sets the pcOrganIdsForSecondaryYield field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganIdsForSecondaryYield(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(s.Struct.Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = s.Struct.SetPtr(22, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcOrganIdsForCutting() (YieldComponent_List, error) {
	p, err := s.Struct.Ptr(23)
	return YieldComponent_List{List: p.List()}, err
}

func (s CropModuleState) HasPcOrganIdsForCutting() bool {
	return s.Struct.HasPtr(23)
}

func (s CropModuleState) SetPcOrganIdsForCutting(v YieldComponent_List) error {
	return s.Struct.SetPtr(23, v.List.ToPtr())
}

// NewPcOrganIdsForCutting sets the pcOrganIdsForCutting field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganIdsForCutting(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(s.Struct.Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = s.Struct.SetPtr(23, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcOrganMaintenanceRespiration() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(24)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcOrganMaintenanceRespiration() bool {
	return s.Struct.HasPtr(24)
}

func (s CropModuleState) SetPcOrganMaintenanceRespiration(v capnp.Float64List) error {
	return s.Struct.SetPtr(24, v.List.ToPtr())
}

// NewPcOrganMaintenanceRespiration sets the pcOrganMaintenanceRespiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganMaintenanceRespiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(24, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) OrganSenescenceIncrement() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(25)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasOrganSenescenceIncrement() bool {
	return s.Struct.HasPtr(25)
}

func (s CropModuleState) SetOrganSenescenceIncrement(v capnp.Float64List) error {
	return s.Struct.SetPtr(25, v.List.ToPtr())
}

// NewOrganSenescenceIncrement sets the organSenescenceIncrement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganSenescenceIncrement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(25, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcOrganSenescenceRate() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(26)
	return capnp.PointerList{List: p.List()}, err
}

func (s CropModuleState) HasPcOrganSenescenceRate() bool {
	return s.Struct.HasPtr(26)
}

func (s CropModuleState) SetPcOrganSenescenceRate(v capnp.PointerList) error {
	return s.Struct.SetPtr(26, v.List.ToPtr())
}

// NewPcOrganSenescenceRate sets the pcOrganSenescenceRate field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganSenescenceRate(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(26, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) OvercastDayRadiation() float64 {
	return math.Float64frombits(s.Struct.Uint64(752))
}

func (s CropModuleState) SetOvercastDayRadiation(v float64) {
	s.Struct.SetUint64(752, math.Float64bits(v))
}

func (s CropModuleState) OxygenDeficit() float64 {
	return math.Float64frombits(s.Struct.Uint64(760))
}

func (s CropModuleState) SetOxygenDeficit(v float64) {
	s.Struct.SetUint64(760, math.Float64bits(v))
}

func (s CropModuleState) PcPartBiologicalNFixation() float64 {
	return math.Float64frombits(s.Struct.Uint64(768))
}

func (s CropModuleState) SetPcPartBiologicalNFixation(v float64) {
	s.Struct.SetUint64(768, math.Float64bits(v))
}

func (s CropModuleState) PcPerennial() bool {
	return s.Struct.Bit(7)
}

func (s CropModuleState) SetPcPerennial(v bool) {
	s.Struct.SetBit(7, v)
}

func (s CropModuleState) PhotoperiodicDaylength() float64 {
	return math.Float64frombits(s.Struct.Uint64(776))
}

func (s CropModuleState) SetPhotoperiodicDaylength(v float64) {
	s.Struct.SetUint64(776, math.Float64bits(v))
}

func (s CropModuleState) PhotActRadiationMean() float64 {
	return math.Float64frombits(s.Struct.Uint64(784))
}

func (s CropModuleState) SetPhotActRadiationMean(v float64) {
	s.Struct.SetUint64(784, math.Float64bits(v))
}

func (s CropModuleState) PcPlantDensity() float64 {
	return math.Float64frombits(s.Struct.Uint64(792))
}

func (s CropModuleState) SetPcPlantDensity(v float64) {
	s.Struct.SetUint64(792, math.Float64bits(v))
}

func (s CropModuleState) PotentialTranspiration() float64 {
	return math.Float64frombits(s.Struct.Uint64(800))
}

func (s CropModuleState) SetPotentialTranspiration(v float64) {
	s.Struct.SetUint64(800, math.Float64bits(v))
}

func (s CropModuleState) ReferenceEvapotranspiration() float64 {
	return math.Float64frombits(s.Struct.Uint64(808))
}

func (s CropModuleState) SetReferenceEvapotranspiration(v float64) {
	s.Struct.SetUint64(808, math.Float64bits(v))
}

func (s CropModuleState) RelativeTotalDevelopment() float64 {
	return math.Float64frombits(s.Struct.Uint64(816))
}

func (s CropModuleState) SetRelativeTotalDevelopment(v float64) {
	s.Struct.SetUint64(816, math.Float64bits(v))
}

func (s CropModuleState) RemainingEvapotranspiration() float64 {
	return math.Float64frombits(s.Struct.Uint64(824))
}

func (s CropModuleState) SetRemainingEvapotranspiration(v float64) {
	s.Struct.SetUint64(824, math.Float64bits(v))
}

func (s CropModuleState) ReserveAssimilatePool() float64 {
	return math.Float64frombits(s.Struct.Uint64(832))
}

func (s CropModuleState) SetReserveAssimilatePool(v float64) {
	s.Struct.SetUint64(832, math.Float64bits(v))
}

func (s CropModuleState) PcResidueNRatio() float64 {
	return math.Float64frombits(s.Struct.Uint64(840))
}

func (s CropModuleState) SetPcResidueNRatio(v float64) {
	s.Struct.SetUint64(840, math.Float64bits(v))
}

func (s CropModuleState) PcRespiratoryStress() float64 {
	return math.Float64frombits(s.Struct.Uint64(848))
}

func (s CropModuleState) SetPcRespiratoryStress(v float64) {
	s.Struct.SetUint64(848, math.Float64bits(v))
}

func (s CropModuleState) RootBiomass() float64 {
	return math.Float64frombits(s.Struct.Uint64(856))
}

func (s CropModuleState) SetRootBiomass(v float64) {
	s.Struct.SetUint64(856, math.Float64bits(v))
}

func (s CropModuleState) RootBiomassOld() float64 {
	return math.Float64frombits(s.Struct.Uint64(864))
}

func (s CropModuleState) SetRootBiomassOld(v float64) {
	s.Struct.SetUint64(864, math.Float64bits(v))
}

func (s CropModuleState) RootDensity() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(27)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasRootDensity() bool {
	return s.Struct.HasPtr(27)
}

func (s CropModuleState) SetRootDensity(v capnp.Float64List) error {
	return s.Struct.SetPtr(27, v.List.ToPtr())
}

// NewRootDensity sets the rootDensity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRootDensity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(27, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) RootDiameter() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(28)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasRootDiameter() bool {
	return s.Struct.HasPtr(28)
}

func (s CropModuleState) SetRootDiameter(v capnp.Float64List) error {
	return s.Struct.SetPtr(28, v.List.ToPtr())
}

// NewRootDiameter sets the rootDiameter field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRootDiameter(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(28, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcRootDistributionParam() float64 {
	return math.Float64frombits(s.Struct.Uint64(872))
}

func (s CropModuleState) SetPcRootDistributionParam(v float64) {
	s.Struct.SetUint64(872, math.Float64bits(v))
}

func (s CropModuleState) RootEffectivity() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(29)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasRootEffectivity() bool {
	return s.Struct.HasPtr(29)
}

func (s CropModuleState) SetRootEffectivity(v capnp.Float64List) error {
	return s.Struct.SetPtr(29, v.List.ToPtr())
}

// NewRootEffectivity sets the rootEffectivity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRootEffectivity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(29, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcRootFormFactor() float64 {
	return math.Float64frombits(s.Struct.Uint64(880))
}

func (s CropModuleState) SetPcRootFormFactor(v float64) {
	s.Struct.SetUint64(880, math.Float64bits(v))
}

func (s CropModuleState) PcRootGrowthLag() float64 {
	return math.Float64frombits(s.Struct.Uint64(888))
}

func (s CropModuleState) SetPcRootGrowthLag(v float64) {
	s.Struct.SetUint64(888, math.Float64bits(v))
}

func (s CropModuleState) RootingDepth() uint16 {
	return s.Struct.Uint16(286)
}

func (s CropModuleState) SetRootingDepth(v uint16) {
	s.Struct.SetUint16(286, v)
}

func (s CropModuleState) RootingDepthM() float64 {
	return math.Float64frombits(s.Struct.Uint64(896))
}

func (s CropModuleState) SetRootingDepthM(v float64) {
	s.Struct.SetUint64(896, math.Float64bits(v))
}

func (s CropModuleState) RootingZone() uint16 {
	return s.Struct.Uint16(904)
}

func (s CropModuleState) SetRootingZone(v uint16) {
	s.Struct.SetUint16(904, v)
}

func (s CropModuleState) PcRootPenetrationRate() float64 {
	return math.Float64frombits(s.Struct.Uint64(912))
}

func (s CropModuleState) SetPcRootPenetrationRate(v float64) {
	s.Struct.SetUint64(912, math.Float64bits(v))
}

func (s CropModuleState) VmSaturationDeficit() float64 {
	return math.Float64frombits(s.Struct.Uint64(920))
}

func (s CropModuleState) SetVmSaturationDeficit(v float64) {
	s.Struct.SetUint64(920, math.Float64bits(v))
}

func (s CropModuleState) SoilCoverage() float64 {
	return math.Float64frombits(s.Struct.Uint64(928))
}

func (s CropModuleState) SetSoilCoverage(v float64) {
	s.Struct.SetUint64(928, math.Float64bits(v))
}

func (s CropModuleState) VsSoilMineralNContent() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(30)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasVsSoilMineralNContent() bool {
	return s.Struct.HasPtr(30)
}

func (s CropModuleState) SetVsSoilMineralNContent(v capnp.Float64List) error {
	return s.Struct.SetPtr(30, v.List.ToPtr())
}

// NewVsSoilMineralNContent sets the vsSoilMineralNContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewVsSoilMineralNContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(30, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) SoilSpecificMaxRootingDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(936))
}

func (s CropModuleState) SetSoilSpecificMaxRootingDepth(v float64) {
	s.Struct.SetUint64(936, math.Float64bits(v))
}

func (s CropModuleState) VsSoilSpecificMaxRootingDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(944))
}

func (s CropModuleState) SetVsSoilSpecificMaxRootingDepth(v float64) {
	s.Struct.SetUint64(944, math.Float64bits(v))
}

func (s CropModuleState) PcSpecificLeafArea() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(31)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcSpecificLeafArea() bool {
	return s.Struct.HasPtr(31)
}

func (s CropModuleState) SetPcSpecificLeafArea(v capnp.Float64List) error {
	return s.Struct.SetPtr(31, v.List.ToPtr())
}

// NewPcSpecificLeafArea sets the pcSpecificLeafArea field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcSpecificLeafArea(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(31, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcSpecificRootLength() float64 {
	return math.Float64frombits(s.Struct.Uint64(952))
}

func (s CropModuleState) SetPcSpecificRootLength(v float64) {
	s.Struct.SetUint64(952, math.Float64bits(v))
}

func (s CropModuleState) PcStageAfterCut() uint16 {
	return s.Struct.Uint16(906)
}

func (s CropModuleState) SetPcStageAfterCut(v uint16) {
	s.Struct.SetUint16(906, v)
}

func (s CropModuleState) PcStageAtMaxDiameter() float64 {
	return math.Float64frombits(s.Struct.Uint64(960))
}

func (s CropModuleState) SetPcStageAtMaxDiameter(v float64) {
	s.Struct.SetUint64(960, math.Float64bits(v))
}

func (s CropModuleState) PcStageAtMaxHeight() float64 {
	return math.Float64frombits(s.Struct.Uint64(968))
}

func (s CropModuleState) SetPcStageAtMaxHeight(v float64) {
	s.Struct.SetUint64(968, math.Float64bits(v))
}

func (s CropModuleState) PcStageMaxRootNConcentration() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(32)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcStageMaxRootNConcentration() bool {
	return s.Struct.HasPtr(32)
}

func (s CropModuleState) SetPcStageMaxRootNConcentration(v capnp.Float64List) error {
	return s.Struct.SetPtr(32, v.List.ToPtr())
}

// NewPcStageMaxRootNConcentration sets the pcStageMaxRootNConcentration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcStageMaxRootNConcentration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(32, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcStageKcFactor() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(33)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcStageKcFactor() bool {
	return s.Struct.HasPtr(33)
}

func (s CropModuleState) SetPcStageKcFactor(v capnp.Float64List) error {
	return s.Struct.SetPtr(33, v.List.ToPtr())
}

// NewPcStageKcFactor sets the pcStageKcFactor field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcStageKcFactor(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(33, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcStageTemperatureSum() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(34)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcStageTemperatureSum() bool {
	return s.Struct.HasPtr(34)
}

func (s CropModuleState) SetPcStageTemperatureSum(v capnp.Float64List) error {
	return s.Struct.SetPtr(34, v.List.ToPtr())
}

// NewPcStageTemperatureSum sets the pcStageTemperatureSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcStageTemperatureSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(34, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) StomataResistance() float64 {
	return math.Float64frombits(s.Struct.Uint64(976))
}

func (s CropModuleState) SetStomataResistance(v float64) {
	s.Struct.SetUint64(976, math.Float64bits(v))
}

func (s CropModuleState) PcStorageOrgan() (capnp.BitList, error) {
	p, err := s.Struct.Ptr(35)
	return capnp.BitList{List: p.List()}, err
}

func (s CropModuleState) HasPcStorageOrgan() bool {
	return s.Struct.HasPtr(35)
}

func (s CropModuleState) SetPcStorageOrgan(v capnp.BitList) error {
	return s.Struct.SetPtr(35, v.List.ToPtr())
}

// NewPcStorageOrgan sets the pcStorageOrgan field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s CropModuleState) NewPcStorageOrgan(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = s.Struct.SetPtr(35, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) StorageOrgan() uint16 {
	return s.Struct.Uint16(908) ^ 4
}

func (s CropModuleState) SetStorageOrgan(v uint16) {
	s.Struct.SetUint16(908, v^4)
}

func (s CropModuleState) TargetNConcentration() float64 {
	return math.Float64frombits(s.Struct.Uint64(984))
}

func (s CropModuleState) SetTargetNConcentration(v float64) {
	s.Struct.SetUint64(984, math.Float64bits(v))
}

func (s CropModuleState) TimeStep() float64 {
	return math.Float64frombits(s.Struct.Uint64(992) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetTimeStep(v float64) {
	s.Struct.SetUint64(992, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) TimeUnderAnoxia() uint64 {
	return s.Struct.Uint64(1000)
}

func (s CropModuleState) SetTimeUnderAnoxia(v uint64) {
	s.Struct.SetUint64(1000, v)
}

func (s CropModuleState) VsTortuosity() float64 {
	return math.Float64frombits(s.Struct.Uint64(1008))
}

func (s CropModuleState) SetVsTortuosity(v float64) {
	s.Struct.SetUint64(1008, math.Float64bits(v))
}

func (s CropModuleState) TotalBiomass() float64 {
	return math.Float64frombits(s.Struct.Uint64(1016))
}

func (s CropModuleState) SetTotalBiomass(v float64) {
	s.Struct.SetUint64(1016, math.Float64bits(v))
}

func (s CropModuleState) TotalBiomassNContent() float64 {
	return math.Float64frombits(s.Struct.Uint64(1024))
}

func (s CropModuleState) SetTotalBiomassNContent(v float64) {
	s.Struct.SetUint64(1024, math.Float64bits(v))
}

func (s CropModuleState) TotalCropHeatImpact() float64 {
	return math.Float64frombits(s.Struct.Uint64(1032))
}

func (s CropModuleState) SetTotalCropHeatImpact(v float64) {
	s.Struct.SetUint64(1032, math.Float64bits(v))
}

func (s CropModuleState) TotalNInput() float64 {
	return math.Float64frombits(s.Struct.Uint64(1040))
}

func (s CropModuleState) SetTotalNInput(v float64) {
	s.Struct.SetUint64(1040, math.Float64bits(v))
}

func (s CropModuleState) TotalNUptake() float64 {
	return math.Float64frombits(s.Struct.Uint64(1048))
}

func (s CropModuleState) SetTotalNUptake(v float64) {
	s.Struct.SetUint64(1048, math.Float64bits(v))
}

func (s CropModuleState) TotalRespired() float64 {
	return math.Float64frombits(s.Struct.Uint64(1056))
}

func (s CropModuleState) SetTotalRespired(v float64) {
	s.Struct.SetUint64(1056, math.Float64bits(v))
}

func (s CropModuleState) Respiration() float64 {
	return math.Float64frombits(s.Struct.Uint64(1064))
}

func (s CropModuleState) SetRespiration(v float64) {
	s.Struct.SetUint64(1064, math.Float64bits(v))
}

func (s CropModuleState) SumTotalNUptake() float64 {
	return math.Float64frombits(s.Struct.Uint64(1072))
}

func (s CropModuleState) SetSumTotalNUptake(v float64) {
	s.Struct.SetUint64(1072, math.Float64bits(v))
}

func (s CropModuleState) TotalRootLength() float64 {
	return math.Float64frombits(s.Struct.Uint64(1080))
}

func (s CropModuleState) SetTotalRootLength(v float64) {
	s.Struct.SetUint64(1080, math.Float64bits(v))
}

func (s CropModuleState) TotalTemperatureSum() float64 {
	return math.Float64frombits(s.Struct.Uint64(1088))
}

func (s CropModuleState) SetTotalTemperatureSum(v float64) {
	s.Struct.SetUint64(1088, math.Float64bits(v))
}

func (s CropModuleState) TemperatureSumToFlowering() float64 {
	return math.Float64frombits(s.Struct.Uint64(1096))
}

func (s CropModuleState) SetTemperatureSumToFlowering(v float64) {
	s.Struct.SetUint64(1096, math.Float64bits(v))
}

func (s CropModuleState) Transpiration() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(36)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasTranspiration() bool {
	return s.Struct.HasPtr(36)
}

func (s CropModuleState) SetTranspiration(v capnp.Float64List) error {
	return s.Struct.SetPtr(36, v.List.ToPtr())
}

// NewTranspiration sets the transpiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewTranspiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(36, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) TranspirationRedux() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(37)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasTranspirationRedux() bool {
	return s.Struct.HasPtr(37)
}

func (s CropModuleState) SetTranspirationRedux(v capnp.Float64List) error {
	return s.Struct.SetPtr(37, v.List.ToPtr())
}

// NewTranspirationRedux sets the transpirationRedux field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewTranspirationRedux(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(37, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) TranspirationDeficit() float64 {
	return math.Float64frombits(s.Struct.Uint64(1104) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetTranspirationDeficit(v float64) {
	s.Struct.SetUint64(1104, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) VernalisationDays() float64 {
	return math.Float64frombits(s.Struct.Uint64(1112))
}

func (s CropModuleState) SetVernalisationDays(v float64) {
	s.Struct.SetUint64(1112, math.Float64bits(v))
}

func (s CropModuleState) VernalisationFactor() float64 {
	return math.Float64frombits(s.Struct.Uint64(1120))
}

func (s CropModuleState) SetVernalisationFactor(v float64) {
	s.Struct.SetUint64(1120, math.Float64bits(v))
}

func (s CropModuleState) PcVernalisationRequirement() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(38)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcVernalisationRequirement() bool {
	return s.Struct.HasPtr(38)
}

func (s CropModuleState) SetPcVernalisationRequirement(v capnp.Float64List) error {
	return s.Struct.SetPtr(38, v.List.ToPtr())
}

// NewPcVernalisationRequirement sets the pcVernalisationRequirement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcVernalisationRequirement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(38, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcWaterDeficitResponseOn() bool {
	return s.Struct.Bit(7280)
}

func (s CropModuleState) SetPcWaterDeficitResponseOn(v bool) {
	s.Struct.SetBit(7280, v)
}

func (s CropModuleState) DyingOut() bool {
	return s.Struct.Bit(7281)
}

func (s CropModuleState) SetDyingOut(v bool) {
	s.Struct.SetBit(7281, v)
}

func (s CropModuleState) AccumulatedETa() float64 {
	return math.Float64frombits(s.Struct.Uint64(1152))
}

func (s CropModuleState) SetAccumulatedETa(v float64) {
	s.Struct.SetUint64(1152, math.Float64bits(v))
}

func (s CropModuleState) AccumulatedTranspiration() float64 {
	return math.Float64frombits(s.Struct.Uint64(1160))
}

func (s CropModuleState) SetAccumulatedTranspiration(v float64) {
	s.Struct.SetUint64(1160, math.Float64bits(v))
}

func (s CropModuleState) AccumulatedPrimaryCropYield() float64 {
	return math.Float64frombits(s.Struct.Uint64(1168))
}

func (s CropModuleState) SetAccumulatedPrimaryCropYield(v float64) {
	s.Struct.SetUint64(1168, math.Float64bits(v))
}

func (s CropModuleState) SumExportedCutBiomass() float64 {
	return math.Float64frombits(s.Struct.Uint64(1176))
}

func (s CropModuleState) SetSumExportedCutBiomass(v float64) {
	s.Struct.SetUint64(1176, math.Float64bits(v))
}

func (s CropModuleState) ExportedCutBiomass() float64 {
	return math.Float64frombits(s.Struct.Uint64(1184))
}

func (s CropModuleState) SetExportedCutBiomass(v float64) {
	s.Struct.SetUint64(1184, math.Float64bits(v))
}

func (s CropModuleState) SumResidueCutBiomass() float64 {
	return math.Float64frombits(s.Struct.Uint64(1192))
}

func (s CropModuleState) SetSumResidueCutBiomass(v float64) {
	s.Struct.SetUint64(1192, math.Float64bits(v))
}

func (s CropModuleState) ResidueCutBiomass() float64 {
	return math.Float64frombits(s.Struct.Uint64(1200))
}

func (s CropModuleState) SetResidueCutBiomass(v float64) {
	s.Struct.SetUint64(1200, math.Float64bits(v))
}

func (s CropModuleState) CuttingDelayDays() uint16 {
	return s.Struct.Uint16(1208)
}

func (s CropModuleState) SetCuttingDelayDays(v uint16) {
	s.Struct.SetUint16(1208, v)
}

func (s CropModuleState) VsMaxEffectiveRootingDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(1216))
}

func (s CropModuleState) SetVsMaxEffectiveRootingDepth(v float64) {
	s.Struct.SetUint64(1216, math.Float64bits(v))
}

func (s CropModuleState) VsImpenetrableLayerDept() float64 {
	return math.Float64frombits(s.Struct.Uint64(1224))
}

func (s CropModuleState) SetVsImpenetrableLayerDept(v float64) {
	s.Struct.SetUint64(1224, math.Float64bits(v))
}

func (s CropModuleState) AnthesisDay() int16 {
	return int16(s.Struct.Uint16(1210) ^ 65535)
}

func (s CropModuleState) SetAnthesisDay(v int16) {
	s.Struct.SetUint16(1210, uint16(v)^65535)
}

func (s CropModuleState) MaturityDay() int16 {
	return int16(s.Struct.Uint16(1212) ^ 65535)
}

func (s CropModuleState) SetMaturityDay(v int16) {
	s.Struct.SetUint16(1212, uint16(v)^65535)
}

func (s CropModuleState) MaturityReached() bool {
	return s.Struct.Bit(7282)
}

func (s CropModuleState) SetMaturityReached(v bool) {
	s.Struct.SetBit(7282, v)
}

func (s CropModuleState) StepSize24() uint16 {
	return s.Struct.Uint16(1214) ^ 24
}

func (s CropModuleState) SetStepSize24(v uint16) {
	s.Struct.SetUint16(1214, v^24)
}

func (s CropModuleState) StepSize240() uint16 {
	return s.Struct.Uint16(1232) ^ 240
}

func (s CropModuleState) SetStepSize240(v uint16) {
	s.Struct.SetUint16(1232, v^240)
}

func (s CropModuleState) Rad24() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(39)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasRad24() bool {
	return s.Struct.HasPtr(39)
}

func (s CropModuleState) SetRad24(v capnp.Float64List) error {
	return s.Struct.SetPtr(39, v.List.ToPtr())
}

// NewRad24 sets the rad24 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRad24(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(39, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) Rad240() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(40)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasRad240() bool {
	return s.Struct.HasPtr(40)
}

func (s CropModuleState) SetRad240(v capnp.Float64List) error {
	return s.Struct.SetPtr(40, v.List.ToPtr())
}

// NewRad240 sets the rad240 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRad240(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(40, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) Tfol24() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(41)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasTfol24() bool {
	return s.Struct.HasPtr(41)
}

func (s CropModuleState) SetTfol24(v capnp.Float64List) error {
	return s.Struct.SetPtr(41, v.List.ToPtr())
}

// NewTfol24 sets the tfol24 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewTfol24(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(41, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) Tfol240() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(42)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasTfol240() bool {
	return s.Struct.HasPtr(42)
}

func (s CropModuleState) SetTfol240(v capnp.Float64List) error {
	return s.Struct.SetPtr(42, v.List.ToPtr())
}

// NewTfol240 sets the tfol240 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewTfol240(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(42, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) Index24() uint16 {
	return s.Struct.Uint16(1234)
}

func (s CropModuleState) SetIndex24(v uint16) {
	s.Struct.SetUint16(1234, v)
}

func (s CropModuleState) Index240() uint16 {
	return s.Struct.Uint16(1236)
}

func (s CropModuleState) SetIndex240(v uint16) {
	s.Struct.SetUint16(1236, v)
}

func (s CropModuleState) Full24() bool {
	return s.Struct.Bit(7283)
}

func (s CropModuleState) SetFull24(v bool) {
	s.Struct.SetBit(7283, v)
}

func (s CropModuleState) Full240() bool {
	return s.Struct.Bit(7284)
}

func (s CropModuleState) SetFull240(v bool) {
	s.Struct.SetBit(7284, v)
}

func (s CropModuleState) GuentherEmissions() (Voc_Emissions, error) {
	p, err := s.Struct.Ptr(43)
	return Voc_Emissions{Struct: p.Struct()}, err
}

func (s CropModuleState) HasGuentherEmissions() bool {
	return s.Struct.HasPtr(43)
}

func (s CropModuleState) SetGuentherEmissions(v Voc_Emissions) error {
	return s.Struct.SetPtr(43, v.Struct.ToPtr())
}

// NewGuentherEmissions sets the guentherEmissions field to a newly
// allocated Voc_Emissions struct, preferring placement in s's segment.
func (s CropModuleState) NewGuentherEmissions() (Voc_Emissions, error) {
	ss, err := NewVoc_Emissions(s.Struct.Segment())
	if err != nil {
		return Voc_Emissions{}, err
	}
	err = s.Struct.SetPtr(43, ss.Struct.ToPtr())
	return ss, err
}

func (s CropModuleState) JjvEmissions() (Voc_Emissions, error) {
	p, err := s.Struct.Ptr(44)
	return Voc_Emissions{Struct: p.Struct()}, err
}

func (s CropModuleState) HasJjvEmissions() bool {
	return s.Struct.HasPtr(44)
}

func (s CropModuleState) SetJjvEmissions(v Voc_Emissions) error {
	return s.Struct.SetPtr(44, v.Struct.ToPtr())
}

// NewJjvEmissions sets the jjvEmissions field to a newly
// allocated Voc_Emissions struct, preferring placement in s's segment.
func (s CropModuleState) NewJjvEmissions() (Voc_Emissions, error) {
	ss, err := NewVoc_Emissions(s.Struct.Segment())
	if err != nil {
		return Voc_Emissions{}, err
	}
	err = s.Struct.SetPtr(44, ss.Struct.ToPtr())
	return ss, err
}

func (s CropModuleState) VocSpecies() (Voc_SpeciesData, error) {
	p, err := s.Struct.Ptr(45)
	return Voc_SpeciesData{Struct: p.Struct()}, err
}

func (s CropModuleState) HasVocSpecies() bool {
	return s.Struct.HasPtr(45)
}

func (s CropModuleState) SetVocSpecies(v Voc_SpeciesData) error {
	return s.Struct.SetPtr(45, v.Struct.ToPtr())
}

// NewVocSpecies sets the vocSpecies field to a newly
// allocated Voc_SpeciesData struct, preferring placement in s's segment.
func (s CropModuleState) NewVocSpecies() (Voc_SpeciesData, error) {
	ss, err := NewVoc_SpeciesData(s.Struct.Segment())
	if err != nil {
		return Voc_SpeciesData{}, err
	}
	err = s.Struct.SetPtr(45, ss.Struct.ToPtr())
	return ss, err
}

func (s CropModuleState) CropPhotosynthesisResults() (Voc_CPData, error) {
	p, err := s.Struct.Ptr(46)
	return Voc_CPData{Struct: p.Struct()}, err
}

func (s CropModuleState) HasCropPhotosynthesisResults() bool {
	return s.Struct.HasPtr(46)
}

func (s CropModuleState) SetCropPhotosynthesisResults(v Voc_CPData) error {
	return s.Struct.SetPtr(46, v.Struct.ToPtr())
}

// NewCropPhotosynthesisResults sets the cropPhotosynthesisResults field to a newly
// allocated Voc_CPData struct, preferring placement in s's segment.
func (s CropModuleState) NewCropPhotosynthesisResults() (Voc_CPData, error) {
	ss, err := NewVoc_CPData(s.Struct.Segment())
	if err != nil {
		return Voc_CPData{}, err
	}
	err = s.Struct.SetPtr(46, ss.Struct.ToPtr())
	return ss, err
}

func (s CropModuleState) O3ShortTermDamage() float64 {
	return math.Float64frombits(s.Struct.Uint64(1144) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetO3ShortTermDamage(v float64) {
	s.Struct.SetUint64(1144, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) O3LongTermDamage() float64 {
	return math.Float64frombits(s.Struct.Uint64(1136) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetO3LongTermDamage(v float64) {
	s.Struct.SetUint64(1136, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) O3Senescence() float64 {
	return math.Float64frombits(s.Struct.Uint64(1128) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetO3Senescence(v float64) {
	s.Struct.SetUint64(1128, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) O3SumUptake() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s CropModuleState) SetO3SumUptake(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s CropModuleState) O3WStomatalClosure() float64 {
	return math.Float64frombits(s.Struct.Uint64(24) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetO3WStomatalClosure(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) AssimilatePartCoeffsReduced() bool {
	return s.Struct.Bit(1)
}

func (s CropModuleState) SetAssimilatePartCoeffsReduced(v bool) {
	s.Struct.SetBit(1, v)
}

func (s CropModuleState) Ktkc() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s CropModuleState) SetKtkc(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s CropModuleState) Ktko() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s CropModuleState) SetKtko(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s CropModuleState) StemElongationEventFired() bool {
	return s.Struct.Bit(7286)
}

func (s CropModuleState) SetStemElongationEventFired(v bool) {
	s.Struct.SetBit(7286, v)
}

// CropModuleState_List is a list of CropModuleState.
type CropModuleState_List struct{ capnp.List }

// NewCropModuleState creates a new list of CropModuleState.
func NewCropModuleState_List(s *capnp.Segment, sz int32) (CropModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 1248, PointerCount: 50}, sz)
	return CropModuleState_List{l}, err
}

func (s CropModuleState_List) At(i int) CropModuleState { return CropModuleState{s.List.Struct(i)} }

func (s CropModuleState_List) Set(i int, v CropModuleState) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CropModuleState_List) String() string {
	str, _ := text.MarshalList(0x811d54ac7debc21e, s.List)
	return str
}

// CropModuleState_Future is a wrapper for a CropModuleState promised by a client call.
type CropModuleState_Future struct{ *capnp.Future }

func (p CropModuleState_Future) Struct() (CropModuleState, error) {
	s, err := p.Future.Struct()
	return CropModuleState{s}, err
}

func (p CropModuleState_Future) SpeciesParams() SpeciesParameters_Future {
	return SpeciesParameters_Future{Future: p.Future.Field(47, nil)}
}

func (p CropModuleState_Future) CultivarParams() CultivarParameters_Future {
	return CultivarParameters_Future{Future: p.Future.Field(48, nil)}
}

func (p CropModuleState_Future) ResidueParams() CropResidueParameters_Future {
	return CropResidueParameters_Future{Future: p.Future.Field(49, nil)}
}

func (p CropModuleState_Future) GuentherEmissions() Voc_Emissions_Future {
	return Voc_Emissions_Future{Future: p.Future.Field(43, nil)}
}

func (p CropModuleState_Future) JjvEmissions() Voc_Emissions_Future {
	return Voc_Emissions_Future{Future: p.Future.Field(44, nil)}
}

func (p CropModuleState_Future) VocSpecies() Voc_SpeciesData_Future {
	return Voc_SpeciesData_Future{Future: p.Future.Field(45, nil)}
}

func (p CropModuleState_Future) CropPhotosynthesisResults() Voc_CPData_Future {
	return Voc_CPData_Future{Future: p.Future.Field(46, nil)}
}

type SnowModuleState struct{ capnp.Struct }

// SnowModuleState_TypeID is the unique identifier for the type SnowModuleState.
const SnowModuleState_TypeID = 0xa4da01d10b3b6acd

func NewSnowModuleState(s *capnp.Segment) (SnowModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 160, PointerCount: 0})
	return SnowModuleState{st}, err
}

func NewRootSnowModuleState(s *capnp.Segment) (SnowModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 160, PointerCount: 0})
	return SnowModuleState{st}, err
}

func ReadRootSnowModuleState(msg *capnp.Message) (SnowModuleState, error) {
	root, err := msg.Root()
	return SnowModuleState{root.Struct()}, err
}

func (s SnowModuleState) String() string {
	str, _ := text.Marshal(0xa4da01d10b3b6acd, s.Struct)
	return str
}

func (s SnowModuleState) SnowDensity() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s SnowModuleState) SetSnowDensity(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s SnowModuleState) SnowDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s SnowModuleState) SetSnowDepth(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s SnowModuleState) FrozenWaterInSnow() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s SnowModuleState) SetFrozenWaterInSnow(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s SnowModuleState) LiquidWaterInSnow() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s SnowModuleState) SetLiquidWaterInSnow(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s SnowModuleState) WaterToInfiltrate() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s SnowModuleState) SetWaterToInfiltrate(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s SnowModuleState) MaxSnowDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s SnowModuleState) SetMaxSnowDepth(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s SnowModuleState) AccumulatedSnowDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s SnowModuleState) SetAccumulatedSnowDepth(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s SnowModuleState) SnowmeltTemperature() float64 {
	return math.Float64frombits(s.Struct.Uint64(64))
}

func (s SnowModuleState) SetSnowmeltTemperature(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v))
}

func (s SnowModuleState) SnowAccumulationThresholdTemperature() float64 {
	return math.Float64frombits(s.Struct.Uint64(72))
}

func (s SnowModuleState) SetSnowAccumulationThresholdTemperature(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v))
}

func (s SnowModuleState) TemperatureLimitForLiquidWater() float64 {
	return math.Float64frombits(s.Struct.Uint64(80))
}

func (s SnowModuleState) SetTemperatureLimitForLiquidWater(v float64) {
	s.Struct.SetUint64(80, math.Float64bits(v))
}

func (s SnowModuleState) CorrectionRain() float64 {
	return math.Float64frombits(s.Struct.Uint64(88))
}

func (s SnowModuleState) SetCorrectionRain(v float64) {
	s.Struct.SetUint64(88, math.Float64bits(v))
}

func (s SnowModuleState) CorrectionSnow() float64 {
	return math.Float64frombits(s.Struct.Uint64(96))
}

func (s SnowModuleState) SetCorrectionSnow(v float64) {
	s.Struct.SetUint64(96, math.Float64bits(v))
}

func (s SnowModuleState) RefreezeTemperature() float64 {
	return math.Float64frombits(s.Struct.Uint64(104))
}

func (s SnowModuleState) SetRefreezeTemperature(v float64) {
	s.Struct.SetUint64(104, math.Float64bits(v))
}

func (s SnowModuleState) RefreezeP1() float64 {
	return math.Float64frombits(s.Struct.Uint64(112))
}

func (s SnowModuleState) SetRefreezeP1(v float64) {
	s.Struct.SetUint64(112, math.Float64bits(v))
}

func (s SnowModuleState) RefreezeP2() float64 {
	return math.Float64frombits(s.Struct.Uint64(120))
}

func (s SnowModuleState) SetRefreezeP2(v float64) {
	s.Struct.SetUint64(120, math.Float64bits(v))
}

func (s SnowModuleState) NewSnowDensityMin() float64 {
	return math.Float64frombits(s.Struct.Uint64(128))
}

func (s SnowModuleState) SetNewSnowDensityMin(v float64) {
	s.Struct.SetUint64(128, math.Float64bits(v))
}

func (s SnowModuleState) SnowMaxAdditionalDensity() float64 {
	return math.Float64frombits(s.Struct.Uint64(136))
}

func (s SnowModuleState) SetSnowMaxAdditionalDensity(v float64) {
	s.Struct.SetUint64(136, math.Float64bits(v))
}

func (s SnowModuleState) SnowPacking() float64 {
	return math.Float64frombits(s.Struct.Uint64(144))
}

func (s SnowModuleState) SetSnowPacking(v float64) {
	s.Struct.SetUint64(144, math.Float64bits(v))
}

func (s SnowModuleState) SnowRetentionCapacityMin() float64 {
	return math.Float64frombits(s.Struct.Uint64(152))
}

func (s SnowModuleState) SetSnowRetentionCapacityMin(v float64) {
	s.Struct.SetUint64(152, math.Float64bits(v))
}

func (s SnowModuleState) SnowRetentionCapacityMax() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s SnowModuleState) SetSnowRetentionCapacityMax(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

// SnowModuleState_List is a list of SnowModuleState.
type SnowModuleState_List struct{ capnp.List }

// NewSnowModuleState creates a new list of SnowModuleState.
func NewSnowModuleState_List(s *capnp.Segment, sz int32) (SnowModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 160, PointerCount: 0}, sz)
	return SnowModuleState_List{l}, err
}

func (s SnowModuleState_List) At(i int) SnowModuleState { return SnowModuleState{s.List.Struct(i)} }

func (s SnowModuleState_List) Set(i int, v SnowModuleState) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SnowModuleState_List) String() string {
	str, _ := text.MarshalList(0xa4da01d10b3b6acd, s.List)
	return str
}

// SnowModuleState_Future is a wrapper for a SnowModuleState promised by a client call.
type SnowModuleState_Future struct{ *capnp.Future }

func (p SnowModuleState_Future) Struct() (SnowModuleState, error) {
	s, err := p.Future.Struct()
	return SnowModuleState{s}, err
}

type FrostModuleState struct{ capnp.Struct }

// FrostModuleState_TypeID is the unique identifier for the type FrostModuleState.
const FrostModuleState_TypeID = 0xb4f16ea3144d85a6

func NewFrostModuleState(s *capnp.Segment) (FrostModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1})
	return FrostModuleState{st}, err
}

func NewRootFrostModuleState(s *capnp.Segment) (FrostModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1})
	return FrostModuleState{st}, err
}

func ReadRootFrostModuleState(msg *capnp.Message) (FrostModuleState, error) {
	root, err := msg.Root()
	return FrostModuleState{root.Struct()}, err
}

func (s FrostModuleState) String() string {
	str, _ := text.Marshal(0xb4f16ea3144d85a6, s.Struct)
	return str
}

func (s FrostModuleState) FrostDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s FrostModuleState) SetFrostDepth(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s FrostModuleState) AccumulatedFrostDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s FrostModuleState) SetAccumulatedFrostDepth(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s FrostModuleState) NegativeDegreeDays() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s FrostModuleState) SetNegativeDegreeDays(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s FrostModuleState) ThawDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s FrostModuleState) SetThawDepth(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s FrostModuleState) FrostDays() uint16 {
	return s.Struct.Uint16(40)
}

func (s FrostModuleState) SetFrostDays(v uint16) {
	s.Struct.SetUint16(40, v)
}

func (s FrostModuleState) LambdaRedux() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Float64List{List: p.List()}, err
}

func (s FrostModuleState) HasLambdaRedux() bool {
	return s.Struct.HasPtr(0)
}

func (s FrostModuleState) SetLambdaRedux(v capnp.Float64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewLambdaRedux sets the lambdaRedux field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s FrostModuleState) NewLambdaRedux(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s FrostModuleState) TemperatureUnderSnow() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s FrostModuleState) SetTemperatureUnderSnow(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s FrostModuleState) HydraulicConductivityRedux() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s FrostModuleState) SetHydraulicConductivityRedux(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s FrostModuleState) PtTimeStep() float64 {
	return math.Float64frombits(s.Struct.Uint64(64))
}

func (s FrostModuleState) SetPtTimeStep(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v))
}

func (s FrostModuleState) PmHydraulicConductivityRedux() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s FrostModuleState) SetPmHydraulicConductivityRedux(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

// FrostModuleState_List is a list of FrostModuleState.
type FrostModuleState_List struct{ capnp.List }

// NewFrostModuleState creates a new list of FrostModuleState.
func NewFrostModuleState_List(s *capnp.Segment, sz int32) (FrostModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1}, sz)
	return FrostModuleState_List{l}, err
}

func (s FrostModuleState_List) At(i int) FrostModuleState { return FrostModuleState{s.List.Struct(i)} }

func (s FrostModuleState_List) Set(i int, v FrostModuleState) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FrostModuleState_List) String() string {
	str, _ := text.MarshalList(0xb4f16ea3144d85a6, s.List)
	return str
}

// FrostModuleState_Future is a wrapper for a FrostModuleState promised by a client call.
type FrostModuleState_Future struct{ *capnp.Future }

func (p FrostModuleState_Future) Struct() (FrostModuleState, error) {
	s, err := p.Future.Struct()
	return FrostModuleState{s}, err
}

type SoilMoistureModuleState struct{ capnp.Struct }

// SoilMoistureModuleState_TypeID is the unique identifier for the type SoilMoistureModuleState.
const SoilMoistureModuleState_TypeID = 0xcd05962719bf7ec8

func NewSoilMoistureModuleState(s *capnp.Segment) (SoilMoistureModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 320, PointerCount: 22})
	return SoilMoistureModuleState{st}, err
}

func NewRootSoilMoistureModuleState(s *capnp.Segment) (SoilMoistureModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 320, PointerCount: 22})
	return SoilMoistureModuleState{st}, err
}

func ReadRootSoilMoistureModuleState(msg *capnp.Message) (SoilMoistureModuleState, error) {
	root, err := msg.Root()
	return SoilMoistureModuleState{root.Struct()}, err
}

func (s SoilMoistureModuleState) String() string {
	str, _ := text.Marshal(0xcd05962719bf7ec8, s.Struct)
	return str
}

func (s SoilMoistureModuleState) ModuleParams() (SoilMoistureModuleParameters, error) {
	p, err := s.Struct.Ptr(2)
	return SoilMoistureModuleParameters{Struct: p.Struct()}, err
}

func (s SoilMoistureModuleState) HasModuleParams() bool {
	return s.Struct.HasPtr(2)
}

func (s SoilMoistureModuleState) SetModuleParams(v SoilMoistureModuleParameters) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewModuleParams sets the moduleParams field to a newly
// allocated SoilMoistureModuleParameters struct, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewModuleParams() (SoilMoistureModuleParameters, error) {
	ss, err := NewSoilMoistureModuleParameters(s.Struct.Segment())
	if err != nil {
		return SoilMoistureModuleParameters{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s SoilMoistureModuleState) NumberOfLayers() uint16 {
	return s.Struct.Uint16(24)
}

func (s SoilMoistureModuleState) SetNumberOfLayers(v uint16) {
	s.Struct.SetUint16(24, v)
}

func (s SoilMoistureModuleState) VsNumberOfLayers() uint16 {
	return s.Struct.Uint16(26)
}

func (s SoilMoistureModuleState) SetVsNumberOfLayers(v uint16) {
	s.Struct.SetUint16(26, v)
}

func (s SoilMoistureModuleState) ActualEvaporation() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s SoilMoistureModuleState) SetActualEvaporation(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s SoilMoistureModuleState) ActualEvapotranspiration() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s SoilMoistureModuleState) SetActualEvapotranspiration(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s SoilMoistureModuleState) ActualTranspiration() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s SoilMoistureModuleState) SetActualTranspiration(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s SoilMoistureModuleState) AvailableWater() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasAvailableWater() bool {
	return s.Struct.HasPtr(3)
}

func (s SoilMoistureModuleState) SetAvailableWater(v capnp.Float64List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewAvailableWater sets the availableWater field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewAvailableWater(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) CapillaryRise() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s SoilMoistureModuleState) SetCapillaryRise(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s SoilMoistureModuleState) CapillaryRiseRate() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(4)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasCapillaryRiseRate() bool {
	return s.Struct.HasPtr(4)
}

func (s SoilMoistureModuleState) SetCapillaryRiseRate(v capnp.Float64List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewCapillaryRiseRate sets the capillaryRiseRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewCapillaryRiseRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) CapillaryWater() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(5)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasCapillaryWater() bool {
	return s.Struct.HasPtr(5)
}

func (s SoilMoistureModuleState) SetCapillaryWater(v capnp.Float64List) error {
	return s.Struct.SetPtr(5, v.List.ToPtr())
}

// NewCapillaryWater sets the capillaryWater field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewCapillaryWater(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(5, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) CapillaryWater70() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(6)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasCapillaryWater70() bool {
	return s.Struct.HasPtr(6)
}

func (s SoilMoistureModuleState) SetCapillaryWater70(v capnp.Float64List) error {
	return s.Struct.SetPtr(6, v.List.ToPtr())
}

// NewCapillaryWater70 sets the capillaryWater70 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewCapillaryWater70(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(6, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) Evaporation() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(7)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasEvaporation() bool {
	return s.Struct.HasPtr(7)
}

func (s SoilMoistureModuleState) SetEvaporation(v capnp.Float64List) error {
	return s.Struct.SetPtr(7, v.List.ToPtr())
}

// NewEvaporation sets the evaporation field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewEvaporation(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(7, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) Evapotranspiration() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(8)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasEvapotranspiration() bool {
	return s.Struct.HasPtr(8)
}

func (s SoilMoistureModuleState) SetEvapotranspiration(v capnp.Float64List) error {
	return s.Struct.SetPtr(8, v.List.ToPtr())
}

// NewEvapotranspiration sets the evapotranspiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewEvapotranspiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(8, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) FieldCapacity() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(9)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasFieldCapacity() bool {
	return s.Struct.HasPtr(9)
}

func (s SoilMoistureModuleState) SetFieldCapacity(v capnp.Float64List) error {
	return s.Struct.SetPtr(9, v.List.ToPtr())
}

// NewFieldCapacity sets the fieldCapacity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewFieldCapacity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(9, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) FluxAtLowerBoundary() float64 {
	return math.Float64frombits(s.Struct.Uint64(64))
}

func (s SoilMoistureModuleState) SetFluxAtLowerBoundary(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v))
}

func (s SoilMoistureModuleState) GravitationalWater() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(10)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasGravitationalWater() bool {
	return s.Struct.HasPtr(10)
}

func (s SoilMoistureModuleState) SetGravitationalWater(v capnp.Float64List) error {
	return s.Struct.SetPtr(10, v.List.ToPtr())
}

// NewGravitationalWater sets the gravitationalWater field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewGravitationalWater(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(10, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) GrossPrecipitation() float64 {
	return math.Float64frombits(s.Struct.Uint64(72))
}

func (s SoilMoistureModuleState) SetGrossPrecipitation(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v))
}

func (s SoilMoistureModuleState) GroundwaterAdded() float64 {
	return math.Float64frombits(s.Struct.Uint64(80))
}

func (s SoilMoistureModuleState) SetGroundwaterAdded(v float64) {
	s.Struct.SetUint64(80, math.Float64bits(v))
}

func (s SoilMoistureModuleState) GroundwaterDischarge() float64 {
	return math.Float64frombits(s.Struct.Uint64(88))
}

func (s SoilMoistureModuleState) SetGroundwaterDischarge(v float64) {
	s.Struct.SetUint64(88, math.Float64bits(v))
}

func (s SoilMoistureModuleState) GroundwaterTable() uint16 {
	return s.Struct.Uint16(28)
}

func (s SoilMoistureModuleState) SetGroundwaterTable(v uint16) {
	s.Struct.SetUint16(28, v)
}

func (s SoilMoistureModuleState) HeatConductivity() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(11)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasHeatConductivity() bool {
	return s.Struct.HasPtr(11)
}

func (s SoilMoistureModuleState) SetHeatConductivity(v capnp.Float64List) error {
	return s.Struct.SetPtr(11, v.List.ToPtr())
}

// NewHeatConductivity sets the heatConductivity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewHeatConductivity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(11, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) HydraulicConductivityRedux() float64 {
	return math.Float64frombits(s.Struct.Uint64(96))
}

func (s SoilMoistureModuleState) SetHydraulicConductivityRedux(v float64) {
	s.Struct.SetUint64(96, math.Float64bits(v))
}

func (s SoilMoistureModuleState) Infiltration() float64 {
	return math.Float64frombits(s.Struct.Uint64(104))
}

func (s SoilMoistureModuleState) SetInfiltration(v float64) {
	s.Struct.SetUint64(104, math.Float64bits(v))
}

func (s SoilMoistureModuleState) Interception() float64 {
	return math.Float64frombits(s.Struct.Uint64(112))
}

func (s SoilMoistureModuleState) SetInterception(v float64) {
	s.Struct.SetUint64(112, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VcKcFactor() float64 {
	return math.Float64frombits(s.Struct.Uint64(120) ^ 0x3fe3333333333333)
}

func (s SoilMoistureModuleState) SetVcKcFactor(v float64) {
	s.Struct.SetUint64(120, math.Float64bits(v)^0x3fe3333333333333)
}

func (s SoilMoistureModuleState) Lambda() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(12)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasLambda() bool {
	return s.Struct.HasPtr(12)
}

func (s SoilMoistureModuleState) SetLambda(v capnp.Float64List) error {
	return s.Struct.SetPtr(12, v.List.ToPtr())
}

// NewLambda sets the lambda field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewLambda(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(12, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) LambdaReduced() float64 {
	return math.Float64frombits(s.Struct.Uint64(128))
}

func (s SoilMoistureModuleState) SetLambdaReduced(v float64) {
	s.Struct.SetUint64(128, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VsLatitude() float64 {
	return math.Float64frombits(s.Struct.Uint64(136))
}

func (s SoilMoistureModuleState) SetVsLatitude(v float64) {
	s.Struct.SetUint64(136, math.Float64bits(v))
}

func (s SoilMoistureModuleState) LayerThickness() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(13)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasLayerThickness() bool {
	return s.Struct.HasPtr(13)
}

func (s SoilMoistureModuleState) SetLayerThickness(v capnp.Float64List) error {
	return s.Struct.SetPtr(13, v.List.ToPtr())
}

// NewLayerThickness sets the layerThickness field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewLayerThickness(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(13, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) PmLayerThickness() float64 {
	return math.Float64frombits(s.Struct.Uint64(144))
}

func (s SoilMoistureModuleState) SetPmLayerThickness(v float64) {
	s.Struct.SetUint64(144, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PmLeachingDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(152))
}

func (s SoilMoistureModuleState) SetPmLeachingDepth(v float64) {
	s.Struct.SetUint64(152, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PmLeachingDepthLayer() uint16 {
	return s.Struct.Uint16(30)
}

func (s SoilMoistureModuleState) SetPmLeachingDepthLayer(v uint16) {
	s.Struct.SetUint16(30, v)
}

func (s SoilMoistureModuleState) VwMaxAirTemperature() float64 {
	return math.Float64frombits(s.Struct.Uint64(160))
}

func (s SoilMoistureModuleState) SetVwMaxAirTemperature(v float64) {
	s.Struct.SetUint64(160, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PmMaxPercolationRate() float64 {
	return math.Float64frombits(s.Struct.Uint64(168))
}

func (s SoilMoistureModuleState) SetPmMaxPercolationRate(v float64) {
	s.Struct.SetUint64(168, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VwMeanAirTemperature() float64 {
	return math.Float64frombits(s.Struct.Uint64(176))
}

func (s SoilMoistureModuleState) SetVwMeanAirTemperature(v float64) {
	s.Struct.SetUint64(176, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VwMinAirTemperature() float64 {
	return math.Float64frombits(s.Struct.Uint64(184))
}

func (s SoilMoistureModuleState) SetVwMinAirTemperature(v float64) {
	s.Struct.SetUint64(184, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VcNetPrecipitation() float64 {
	return math.Float64frombits(s.Struct.Uint64(192))
}

func (s SoilMoistureModuleState) SetVcNetPrecipitation(v float64) {
	s.Struct.SetUint64(192, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VwNetRadiation() float64 {
	return math.Float64frombits(s.Struct.Uint64(200))
}

func (s SoilMoistureModuleState) SetVwNetRadiation(v float64) {
	s.Struct.SetUint64(200, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PermanentWiltingPoint() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(14)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasPermanentWiltingPoint() bool {
	return s.Struct.HasPtr(14)
}

func (s SoilMoistureModuleState) SetPermanentWiltingPoint(v capnp.Float64List) error {
	return s.Struct.SetPtr(14, v.List.ToPtr())
}

// NewPermanentWiltingPoint sets the permanentWiltingPoint field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewPermanentWiltingPoint(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(14, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) VcPercentageSoilCoverage() float64 {
	return math.Float64frombits(s.Struct.Uint64(208))
}

func (s SoilMoistureModuleState) SetVcPercentageSoilCoverage(v float64) {
	s.Struct.SetUint64(208, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PercolationRate() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(15)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasPercolationRate() bool {
	return s.Struct.HasPtr(15)
}

func (s SoilMoistureModuleState) SetPercolationRate(v capnp.Float64List) error {
	return s.Struct.SetPtr(15, v.List.ToPtr())
}

// NewPercolationRate sets the percolationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewPercolationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(15, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) VwPrecipitation() float64 {
	return math.Float64frombits(s.Struct.Uint64(216))
}

func (s SoilMoistureModuleState) SetVwPrecipitation(v float64) {
	s.Struct.SetUint64(216, math.Float64bits(v))
}

func (s SoilMoistureModuleState) ReferenceEvapotranspiration() float64 {
	return math.Float64frombits(s.Struct.Uint64(224) ^ 0x4018000000000000)
}

func (s SoilMoistureModuleState) SetReferenceEvapotranspiration(v float64) {
	s.Struct.SetUint64(224, math.Float64bits(v)^0x4018000000000000)
}

func (s SoilMoistureModuleState) RelativeHumidity() float64 {
	return math.Float64frombits(s.Struct.Uint64(232))
}

func (s SoilMoistureModuleState) SetRelativeHumidity(v float64) {
	s.Struct.SetUint64(232, math.Float64bits(v))
}

func (s SoilMoistureModuleState) ResidualEvapotranspiration() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(16)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasResidualEvapotranspiration() bool {
	return s.Struct.HasPtr(16)
}

func (s SoilMoistureModuleState) SetResidualEvapotranspiration(v capnp.Float64List) error {
	return s.Struct.SetPtr(16, v.List.ToPtr())
}

// NewResidualEvapotranspiration sets the residualEvapotranspiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewResidualEvapotranspiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(16, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) SaturatedHydraulicConductivity() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(17)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasSaturatedHydraulicConductivity() bool {
	return s.Struct.HasPtr(17)
}

func (s SoilMoistureModuleState) SetSaturatedHydraulicConductivity(v capnp.Float64List) error {
	return s.Struct.SetPtr(17, v.List.ToPtr())
}

// NewSaturatedHydraulicConductivity sets the saturatedHydraulicConductivity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewSaturatedHydraulicConductivity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(17, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) SoilMoisture() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(18)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasSoilMoisture() bool {
	return s.Struct.HasPtr(18)
}

func (s SoilMoistureModuleState) SetSoilMoisture(v capnp.Float64List) error {
	return s.Struct.SetPtr(18, v.List.ToPtr())
}

// NewSoilMoisture sets the soilMoisture field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewSoilMoisture(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(18, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) SoilMoisturecrit() float64 {
	return math.Float64frombits(s.Struct.Uint64(240))
}

func (s SoilMoistureModuleState) SetSoilMoisturecrit(v float64) {
	s.Struct.SetUint64(240, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SoilMoistureDeficit() float64 {
	return math.Float64frombits(s.Struct.Uint64(248))
}

func (s SoilMoistureModuleState) SetSoilMoistureDeficit(v float64) {
	s.Struct.SetUint64(248, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SoilPoreVolume() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(19)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasSoilPoreVolume() bool {
	return s.Struct.HasPtr(19)
}

func (s SoilMoistureModuleState) SetSoilPoreVolume(v capnp.Float64List) error {
	return s.Struct.SetPtr(19, v.List.ToPtr())
}

// NewSoilPoreVolume sets the soilPoreVolume field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewSoilPoreVolume(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(19, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) VcStomataResistance() float64 {
	return math.Float64frombits(s.Struct.Uint64(256))
}

func (s SoilMoistureModuleState) SetVcStomataResistance(v float64) {
	s.Struct.SetUint64(256, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SurfaceRoughness() float64 {
	return math.Float64frombits(s.Struct.Uint64(264))
}

func (s SoilMoistureModuleState) SetSurfaceRoughness(v float64) {
	s.Struct.SetUint64(264, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SurfaceRunOff() float64 {
	return math.Float64frombits(s.Struct.Uint64(272))
}

func (s SoilMoistureModuleState) SetSurfaceRunOff(v float64) {
	s.Struct.SetUint64(272, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SumSurfaceRunOff() float64 {
	return math.Float64frombits(s.Struct.Uint64(280))
}

func (s SoilMoistureModuleState) SetSumSurfaceRunOff(v float64) {
	s.Struct.SetUint64(280, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SurfaceWaterStorage() float64 {
	return math.Float64frombits(s.Struct.Uint64(288))
}

func (s SoilMoistureModuleState) SetSurfaceWaterStorage(v float64) {
	s.Struct.SetUint64(288, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PtTimeStep() float64 {
	return math.Float64frombits(s.Struct.Uint64(296))
}

func (s SoilMoistureModuleState) SetPtTimeStep(v float64) {
	s.Struct.SetUint64(296, math.Float64bits(v))
}

func (s SoilMoistureModuleState) TotalWaterRemoval() float64 {
	return math.Float64frombits(s.Struct.Uint64(304))
}

func (s SoilMoistureModuleState) SetTotalWaterRemoval(v float64) {
	s.Struct.SetUint64(304, math.Float64bits(v))
}

func (s SoilMoistureModuleState) Transpiration() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(20)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasTranspiration() bool {
	return s.Struct.HasPtr(20)
}

func (s SoilMoistureModuleState) SetTranspiration(v capnp.Float64List) error {
	return s.Struct.SetPtr(20, v.List.ToPtr())
}

// NewTranspiration sets the transpiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewTranspiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(20, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) TranspirationDeficit() float64 {
	return math.Float64frombits(s.Struct.Uint64(312))
}

func (s SoilMoistureModuleState) SetTranspirationDeficit(v float64) {
	s.Struct.SetUint64(312, math.Float64bits(v))
}

func (s SoilMoistureModuleState) WaterFlux() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(21)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasWaterFlux() bool {
	return s.Struct.HasPtr(21)
}

func (s SoilMoistureModuleState) SetWaterFlux(v capnp.Float64List) error {
	return s.Struct.SetPtr(21, v.List.ToPtr())
}

// NewWaterFlux sets the waterFlux field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewWaterFlux(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(21, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) VwWindSpeed() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s SoilMoistureModuleState) SetVwWindSpeed(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VwWindSpeedHeight() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s SoilMoistureModuleState) SetVwWindSpeedHeight(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s SoilMoistureModuleState) XSACriticalSoilMoisture() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s SoilMoistureModuleState) SetXSACriticalSoilMoisture(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SnowComponent() (SnowModuleState, error) {
	p, err := s.Struct.Ptr(1)
	return SnowModuleState{Struct: p.Struct()}, err
}

func (s SoilMoistureModuleState) HasSnowComponent() bool {
	return s.Struct.HasPtr(1)
}

func (s SoilMoistureModuleState) SetSnowComponent(v SnowModuleState) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSnowComponent sets the snowComponent field to a newly
// allocated SnowModuleState struct, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewSnowComponent() (SnowModuleState, error) {
	ss, err := NewSnowModuleState(s.Struct.Segment())
	if err != nil {
		return SnowModuleState{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s SoilMoistureModuleState) FrostComponent() (FrostModuleState, error) {
	p, err := s.Struct.Ptr(0)
	return FrostModuleState{Struct: p.Struct()}, err
}

func (s SoilMoistureModuleState) HasFrostComponent() bool {
	return s.Struct.HasPtr(0)
}

func (s SoilMoistureModuleState) SetFrostComponent(v FrostModuleState) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewFrostComponent sets the frostComponent field to a newly
// allocated FrostModuleState struct, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewFrostComponent() (FrostModuleState, error) {
	ss, err := NewFrostModuleState(s.Struct.Segment())
	if err != nil {
		return FrostModuleState{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// SoilMoistureModuleState_List is a list of SoilMoistureModuleState.
type SoilMoistureModuleState_List struct{ capnp.List }

// NewSoilMoistureModuleState creates a new list of SoilMoistureModuleState.
func NewSoilMoistureModuleState_List(s *capnp.Segment, sz int32) (SoilMoistureModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 320, PointerCount: 22}, sz)
	return SoilMoistureModuleState_List{l}, err
}

func (s SoilMoistureModuleState_List) At(i int) SoilMoistureModuleState {
	return SoilMoistureModuleState{s.List.Struct(i)}
}

func (s SoilMoistureModuleState_List) Set(i int, v SoilMoistureModuleState) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SoilMoistureModuleState_List) String() string {
	str, _ := text.MarshalList(0xcd05962719bf7ec8, s.List)
	return str
}

// SoilMoistureModuleState_Future is a wrapper for a SoilMoistureModuleState promised by a client call.
type SoilMoistureModuleState_Future struct{ *capnp.Future }

func (p SoilMoistureModuleState_Future) Struct() (SoilMoistureModuleState, error) {
	s, err := p.Future.Struct()
	return SoilMoistureModuleState{s}, err
}

func (p SoilMoistureModuleState_Future) ModuleParams() SoilMoistureModuleParameters_Future {
	return SoilMoistureModuleParameters_Future{Future: p.Future.Field(2, nil)}
}

func (p SoilMoistureModuleState_Future) SnowComponent() SnowModuleState_Future {
	return SnowModuleState_Future{Future: p.Future.Field(1, nil)}
}

func (p SoilMoistureModuleState_Future) FrostComponent() FrostModuleState_Future {
	return FrostModuleState_Future{Future: p.Future.Field(0, nil)}
}

type SoilOrganicModuleState struct{ capnp.Struct }

// SoilOrganicModuleState_TypeID is the unique identifier for the type SoilOrganicModuleState.
const SoilOrganicModuleState_TypeID = 0xd594e64f6b5f461d

func NewSoilOrganicModuleState(s *capnp.Segment) (SoilOrganicModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 22})
	return SoilOrganicModuleState{st}, err
}

func NewRootSoilOrganicModuleState(s *capnp.Segment) (SoilOrganicModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 22})
	return SoilOrganicModuleState{st}, err
}

func ReadRootSoilOrganicModuleState(msg *capnp.Message) (SoilOrganicModuleState, error) {
	root, err := msg.Root()
	return SoilOrganicModuleState{root.Struct()}, err
}

func (s SoilOrganicModuleState) String() string {
	str, _ := text.Marshal(0xd594e64f6b5f461d, s.Struct)
	return str
}

func (s SoilOrganicModuleState) ModuleParams() (SoilOrganicModuleParameters, error) {
	p, err := s.Struct.Ptr(0)
	return SoilOrganicModuleParameters{Struct: p.Struct()}, err
}

func (s SoilOrganicModuleState) HasModuleParams() bool {
	return s.Struct.HasPtr(0)
}

func (s SoilOrganicModuleState) SetModuleParams(v SoilOrganicModuleParameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewModuleParams sets the moduleParams field to a newly
// allocated SoilOrganicModuleParameters struct, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewModuleParams() (SoilOrganicModuleParameters, error) {
	ss, err := NewSoilOrganicModuleParameters(s.Struct.Segment())
	if err != nil {
		return SoilOrganicModuleParameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SoilOrganicModuleState) VsNumberOfLayers() uint16 {
	return s.Struct.Uint16(2)
}

func (s SoilOrganicModuleState) SetVsNumberOfLayers(v uint16) {
	s.Struct.SetUint16(2, v)
}

func (s SoilOrganicModuleState) VsNumberOfOrganicLayers() uint16 {
	return s.Struct.Uint16(4)
}

func (s SoilOrganicModuleState) SetVsNumberOfOrganicLayers(v uint16) {
	s.Struct.SetUint16(4, v)
}

func (s SoilOrganicModuleState) AddedOrganicMatter() bool {
	return s.Struct.Bit(1)
}

func (s SoilOrganicModuleState) SetAddedOrganicMatter(v bool) {
	s.Struct.SetBit(1, v)
}

func (s SoilOrganicModuleState) IrrigationAmount() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s SoilOrganicModuleState) SetIrrigationAmount(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s SoilOrganicModuleState) ActAmmoniaOxidationRate() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasActAmmoniaOxidationRate() bool {
	return s.Struct.HasPtr(1)
}

func (s SoilOrganicModuleState) SetActAmmoniaOxidationRate(v capnp.Float64List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewActAmmoniaOxidationRate sets the actAmmoniaOxidationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewActAmmoniaOxidationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) ActNitrificationRate() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasActNitrificationRate() bool {
	return s.Struct.HasPtr(2)
}

func (s SoilOrganicModuleState) SetActNitrificationRate(v capnp.Float64List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewActNitrificationRate sets the actNitrificationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewActNitrificationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) ActDenitrificationRate() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasActDenitrificationRate() bool {
	return s.Struct.HasPtr(3)
}

func (s SoilOrganicModuleState) SetActDenitrificationRate(v capnp.Float64List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewActDenitrificationRate sets the actDenitrificationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewActDenitrificationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) AomFastDeltaSum() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(4)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasAomFastDeltaSum() bool {
	return s.Struct.HasPtr(4)
}

func (s SoilOrganicModuleState) SetAomFastDeltaSum(v capnp.Float64List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewAomFastDeltaSum sets the aomFastDeltaSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomFastDeltaSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) AomFastInput() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(5)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasAomFastInput() bool {
	return s.Struct.HasPtr(5)
}

func (s SoilOrganicModuleState) SetAomFastInput(v capnp.Float64List) error {
	return s.Struct.SetPtr(5, v.List.ToPtr())
}

// NewAomFastInput sets the aomFastInput field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomFastInput(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(5, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) AomFastSum() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(6)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasAomFastSum() bool {
	return s.Struct.HasPtr(6)
}

func (s SoilOrganicModuleState) SetAomFastSum(v capnp.Float64List) error {
	return s.Struct.SetPtr(6, v.List.ToPtr())
}

// NewAomFastSum sets the aomFastSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomFastSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(6, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) AomSlowDeltaSum() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(7)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasAomSlowDeltaSum() bool {
	return s.Struct.HasPtr(7)
}

func (s SoilOrganicModuleState) SetAomSlowDeltaSum(v capnp.Float64List) error {
	return s.Struct.SetPtr(7, v.List.ToPtr())
}

// NewAomSlowDeltaSum sets the aomSlowDeltaSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomSlowDeltaSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(7, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) AomSlowInput() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(8)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasAomSlowInput() bool {
	return s.Struct.HasPtr(8)
}

func (s SoilOrganicModuleState) SetAomSlowInput(v capnp.Float64List) error {
	return s.Struct.SetPtr(8, v.List.ToPtr())
}

// NewAomSlowInput sets the aomSlowInput field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomSlowInput(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(8, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) AomSlowSum() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(9)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasAomSlowSum() bool {
	return s.Struct.HasPtr(9)
}

func (s SoilOrganicModuleState) SetAomSlowSum(v capnp.Float64List) error {
	return s.Struct.SetPtr(9, v.List.ToPtr())
}

// NewAomSlowSum sets the aomSlowSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomSlowSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(9, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) CBalance() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(10)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasCBalance() bool {
	return s.Struct.HasPtr(10)
}

func (s SoilOrganicModuleState) SetCBalance(v capnp.Float64List) error {
	return s.Struct.SetPtr(10, v.List.ToPtr())
}

// NewCBalance sets the cBalance field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewCBalance(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(10, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) DecomposerRespiration() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s SoilOrganicModuleState) SetDecomposerRespiration(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s SoilOrganicModuleState) ErrorMessage() (string, error) {
	p, err := s.Struct.Ptr(11)
	return p.Text(), err
}

func (s SoilOrganicModuleState) HasErrorMessage() bool {
	return s.Struct.HasPtr(11)
}

func (s SoilOrganicModuleState) ErrorMessageBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(11)
	return p.TextBytes(), err
}

func (s SoilOrganicModuleState) SetErrorMessage(v string) error {
	return s.Struct.SetText(11, v)
}

func (s SoilOrganicModuleState) InertSoilOrganicC() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(12)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasInertSoilOrganicC() bool {
	return s.Struct.HasPtr(12)
}

func (s SoilOrganicModuleState) SetInertSoilOrganicC(v capnp.Float64List) error {
	return s.Struct.SetPtr(12, v.List.ToPtr())
}

// NewInertSoilOrganicC sets the inertSoilOrganicC field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewInertSoilOrganicC(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(12, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) N2oProduced() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s SoilOrganicModuleState) SetN2oProduced(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s SoilOrganicModuleState) N2oProducedNit() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s SoilOrganicModuleState) SetN2oProducedNit(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s SoilOrganicModuleState) N2oProducedDenit() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s SoilOrganicModuleState) SetN2oProducedDenit(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s SoilOrganicModuleState) NetEcosystemExchange() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s SoilOrganicModuleState) SetNetEcosystemExchange(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s SoilOrganicModuleState) NetEcosystemProduction() float64 {
	return math.Float64frombits(s.Struct.Uint64(64))
}

func (s SoilOrganicModuleState) SetNetEcosystemProduction(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v))
}

func (s SoilOrganicModuleState) NetNMineralisation() float64 {
	return math.Float64frombits(s.Struct.Uint64(72))
}

func (s SoilOrganicModuleState) SetNetNMineralisation(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v))
}

func (s SoilOrganicModuleState) NetNMineralisationRate() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(13)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasNetNMineralisationRate() bool {
	return s.Struct.HasPtr(13)
}

func (s SoilOrganicModuleState) SetNetNMineralisationRate(v capnp.Float64List) error {
	return s.Struct.SetPtr(13, v.List.ToPtr())
}

// NewNetNMineralisationRate sets the netNMineralisationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewNetNMineralisationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(13, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) TotalNH3Volatilised() float64 {
	return math.Float64frombits(s.Struct.Uint64(80))
}

func (s SoilOrganicModuleState) SetTotalNH3Volatilised(v float64) {
	s.Struct.SetUint64(80, math.Float64bits(v))
}

func (s SoilOrganicModuleState) Nh3Volatilised() float64 {
	return math.Float64frombits(s.Struct.Uint64(88))
}

func (s SoilOrganicModuleState) SetNh3Volatilised(v float64) {
	s.Struct.SetUint64(88, math.Float64bits(v))
}

func (s SoilOrganicModuleState) SmbCO2EvolutionRate() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(14)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasSmbCO2EvolutionRate() bool {
	return s.Struct.HasPtr(14)
}

func (s SoilOrganicModuleState) SetSmbCO2EvolutionRate(v capnp.Float64List) error {
	return s.Struct.SetPtr(14, v.List.ToPtr())
}

// NewSmbCO2EvolutionRate sets the smbCO2EvolutionRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSmbCO2EvolutionRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(14, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) SmbFastDelta() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(15)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasSmbFastDelta() bool {
	return s.Struct.HasPtr(15)
}

func (s SoilOrganicModuleState) SetSmbFastDelta(v capnp.Float64List) error {
	return s.Struct.SetPtr(15, v.List.ToPtr())
}

// NewSmbFastDelta sets the smbFastDelta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSmbFastDelta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(15, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) SmbSlowDelta() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(16)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasSmbSlowDelta() bool {
	return s.Struct.HasPtr(16)
}

func (s SoilOrganicModuleState) SetSmbSlowDelta(v capnp.Float64List) error {
	return s.Struct.SetPtr(16, v.List.ToPtr())
}

// NewSmbSlowDelta sets the smbSlowDelta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSmbSlowDelta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(16, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) VsSoilMineralNContent() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(17)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasVsSoilMineralNContent() bool {
	return s.Struct.HasPtr(17)
}

func (s SoilOrganicModuleState) SetVsSoilMineralNContent(v capnp.Float64List) error {
	return s.Struct.SetPtr(17, v.List.ToPtr())
}

// NewVsSoilMineralNContent sets the vsSoilMineralNContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewVsSoilMineralNContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(17, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) SoilOrganicC() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(18)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasSoilOrganicC() bool {
	return s.Struct.HasPtr(18)
}

func (s SoilOrganicModuleState) SetSoilOrganicC(v capnp.Float64List) error {
	return s.Struct.SetPtr(18, v.List.ToPtr())
}

// NewSoilOrganicC sets the soilOrganicC field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSoilOrganicC(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(18, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) SomFastDelta() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(19)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasSomFastDelta() bool {
	return s.Struct.HasPtr(19)
}

func (s SoilOrganicModuleState) SetSomFastDelta(v capnp.Float64List) error {
	return s.Struct.SetPtr(19, v.List.ToPtr())
}

// NewSomFastDelta sets the somFastDelta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSomFastDelta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(19, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) SomFastInput() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(20)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasSomFastInput() bool {
	return s.Struct.HasPtr(20)
}

func (s SoilOrganicModuleState) SetSomFastInput(v capnp.Float64List) error {
	return s.Struct.SetPtr(20, v.List.ToPtr())
}

// NewSomFastInput sets the somFastInput field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSomFastInput(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(20, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) SomSlowDelta() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(21)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasSomSlowDelta() bool {
	return s.Struct.HasPtr(21)
}

func (s SoilOrganicModuleState) SetSomSlowDelta(v capnp.Float64List) error {
	return s.Struct.SetPtr(21, v.List.ToPtr())
}

// NewSomSlowDelta sets the somSlowDelta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSomSlowDelta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(21, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) SumDenitrification() float64 {
	return math.Float64frombits(s.Struct.Uint64(96))
}

func (s SoilOrganicModuleState) SetSumDenitrification(v float64) {
	s.Struct.SetUint64(96, math.Float64bits(v))
}

func (s SoilOrganicModuleState) SumNetNMineralisation() float64 {
	return math.Float64frombits(s.Struct.Uint64(104))
}

func (s SoilOrganicModuleState) SetSumNetNMineralisation(v float64) {
	s.Struct.SetUint64(104, math.Float64bits(v))
}

func (s SoilOrganicModuleState) SumN2OProduced() float64 {
	return math.Float64frombits(s.Struct.Uint64(112))
}

func (s SoilOrganicModuleState) SetSumN2OProduced(v float64) {
	s.Struct.SetUint64(112, math.Float64bits(v))
}

func (s SoilOrganicModuleState) SumNH3Volatilised() float64 {
	return math.Float64frombits(s.Struct.Uint64(120))
}

func (s SoilOrganicModuleState) SetSumNH3Volatilised(v float64) {
	s.Struct.SetUint64(120, math.Float64bits(v))
}

func (s SoilOrganicModuleState) TotalDenitrification() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s SoilOrganicModuleState) SetTotalDenitrification(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s SoilOrganicModuleState) Incorporation() bool {
	return s.Struct.Bit(0)
}

func (s SoilOrganicModuleState) SetIncorporation(v bool) {
	s.Struct.SetBit(0, v)
}

// SoilOrganicModuleState_List is a list of SoilOrganicModuleState.
type SoilOrganicModuleState_List struct{ capnp.List }

// NewSoilOrganicModuleState creates a new list of SoilOrganicModuleState.
func NewSoilOrganicModuleState_List(s *capnp.Segment, sz int32) (SoilOrganicModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 128, PointerCount: 22}, sz)
	return SoilOrganicModuleState_List{l}, err
}

func (s SoilOrganicModuleState_List) At(i int) SoilOrganicModuleState {
	return SoilOrganicModuleState{s.List.Struct(i)}
}

func (s SoilOrganicModuleState_List) Set(i int, v SoilOrganicModuleState) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SoilOrganicModuleState_List) String() string {
	str, _ := text.MarshalList(0xd594e64f6b5f461d, s.List)
	return str
}

// SoilOrganicModuleState_Future is a wrapper for a SoilOrganicModuleState promised by a client call.
type SoilOrganicModuleState_Future struct{ *capnp.Future }

func (p SoilOrganicModuleState_Future) Struct() (SoilOrganicModuleState, error) {
	s, err := p.Future.Struct()
	return SoilOrganicModuleState{s}, err
}

func (p SoilOrganicModuleState_Future) ModuleParams() SoilOrganicModuleParameters_Future {
	return SoilOrganicModuleParameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilTemperatureModuleState struct{ capnp.Struct }

// SoilTemperatureModuleState_TypeID is the unique identifier for the type SoilTemperatureModuleState.
const SoilTemperatureModuleState_TypeID = 0xbd3e199eb9b03758

func NewSoilTemperatureModuleState(s *capnp.Segment) (SoilTemperatureModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 14})
	return SoilTemperatureModuleState{st}, err
}

func NewRootSoilTemperatureModuleState(s *capnp.Segment) (SoilTemperatureModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 14})
	return SoilTemperatureModuleState{st}, err
}

func ReadRootSoilTemperatureModuleState(msg *capnp.Message) (SoilTemperatureModuleState, error) {
	root, err := msg.Root()
	return SoilTemperatureModuleState{root.Struct()}, err
}

func (s SoilTemperatureModuleState) String() string {
	str, _ := text.Marshal(0xbd3e199eb9b03758, s.Struct)
	return str
}

func (s SoilTemperatureModuleState) SoilSurfaceTemperature() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s SoilTemperatureModuleState) SetSoilSurfaceTemperature(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s SoilTemperatureModuleState) SoilColumnVtGroundLayer() (SoilLayerState, error) {
	p, err := s.Struct.Ptr(1)
	return SoilLayerState{Struct: p.Struct()}, err
}

func (s SoilTemperatureModuleState) HasSoilColumnVtGroundLayer() bool {
	return s.Struct.HasPtr(1)
}

func (s SoilTemperatureModuleState) SetSoilColumnVtGroundLayer(v SoilLayerState) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSoilColumnVtGroundLayer sets the soilColumnVtGroundLayer field to a newly
// allocated SoilLayerState struct, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewSoilColumnVtGroundLayer() (SoilLayerState, error) {
	ss, err := NewSoilLayerState(s.Struct.Segment())
	if err != nil {
		return SoilLayerState{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s SoilTemperatureModuleState) SoilColumnVtBottomLayer() (SoilLayerState, error) {
	p, err := s.Struct.Ptr(2)
	return SoilLayerState{Struct: p.Struct()}, err
}

func (s SoilTemperatureModuleState) HasSoilColumnVtBottomLayer() bool {
	return s.Struct.HasPtr(2)
}

func (s SoilTemperatureModuleState) SetSoilColumnVtBottomLayer(v SoilLayerState) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewSoilColumnVtBottomLayer sets the soilColumnVtBottomLayer field to a newly
// allocated SoilLayerState struct, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewSoilColumnVtBottomLayer() (SoilLayerState, error) {
	ss, err := NewSoilLayerState(s.Struct.Segment())
	if err != nil {
		return SoilLayerState{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s SoilTemperatureModuleState) ModuleParams() (SoilTemperatureModuleParameters, error) {
	p, err := s.Struct.Ptr(0)
	return SoilTemperatureModuleParameters{Struct: p.Struct()}, err
}

func (s SoilTemperatureModuleState) HasModuleParams() bool {
	return s.Struct.HasPtr(0)
}

func (s SoilTemperatureModuleState) SetModuleParams(v SoilTemperatureModuleParameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewModuleParams sets the moduleParams field to a newly
// allocated SoilTemperatureModuleParameters struct, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewModuleParams() (SoilTemperatureModuleParameters, error) {
	ss, err := NewSoilTemperatureModuleParameters(s.Struct.Segment())
	if err != nil {
		return SoilTemperatureModuleParameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SoilTemperatureModuleState) NumberOfLayers() uint16 {
	return s.Struct.Uint16(16)
}

func (s SoilTemperatureModuleState) SetNumberOfLayers(v uint16) {
	s.Struct.SetUint16(16, v)
}

func (s SoilTemperatureModuleState) VsNumberOfLayers() uint16 {
	return s.Struct.Uint16(18)
}

func (s SoilTemperatureModuleState) SetVsNumberOfLayers(v uint16) {
	s.Struct.SetUint16(18, v)
}

func (s SoilTemperatureModuleState) VsSoilMoistureConst() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTemperatureModuleState) HasVsSoilMoistureConst() bool {
	return s.Struct.HasPtr(3)
}

func (s SoilTemperatureModuleState) SetVsSoilMoistureConst(v capnp.Float64List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewVsSoilMoistureConst sets the vsSoilMoistureConst field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewVsSoilMoistureConst(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s SoilTemperatureModuleState) SoilTemperature() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(4)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTemperatureModuleState) HasSoilTemperature() bool {
	return s.Struct.HasPtr(4)
}

func (s SoilTemperatureModuleState) SetSoilTemperature(v capnp.Float64List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewSoilTemperature sets the soilTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewSoilTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s SoilTemperatureModuleState) V() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(5)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTemperatureModuleState) HasV() bool {
	return s.Struct.HasPtr(5)
}

func (s SoilTemperatureModuleState) SetV(v capnp.Float64List) error {
	return s.Struct.SetPtr(5, v.List.ToPtr())
}

// NewV sets the v field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewV(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(5, l.List.ToPtr())
	return l, err
}

func (s SoilTemperatureModuleState) VolumeMatrix() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(6)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTemperatureModuleState) HasVolumeMatrix() bool {
	return s.Struct.HasPtr(6)
}

func (s SoilTemperatureModuleState) SetVolumeMatrix(v capnp.Float64List) error {
	return s.Struct.SetPtr(6, v.List.ToPtr())
}

// NewVolumeMatrix sets the volumeMatrix field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewVolumeMatrix(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(6, l.List.ToPtr())
	return l, err
}

func (s SoilTemperatureModuleState) VolumeMatrixOld() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(7)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTemperatureModuleState) HasVolumeMatrixOld() bool {
	return s.Struct.HasPtr(7)
}

func (s SoilTemperatureModuleState) SetVolumeMatrixOld(v capnp.Float64List) error {
	return s.Struct.SetPtr(7, v.List.ToPtr())
}

// NewVolumeMatrixOld sets the volumeMatrixOld field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewVolumeMatrixOld(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(7, l.List.ToPtr())
	return l, err
}

func (s SoilTemperatureModuleState) B() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(8)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTemperatureModuleState) HasB() bool {
	return s.Struct.HasPtr(8)
}

func (s SoilTemperatureModuleState) SetB(v capnp.Float64List) error {
	return s.Struct.SetPtr(8, v.List.ToPtr())
}

// NewB sets the b field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewB(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(8, l.List.ToPtr())
	return l, err
}

func (s SoilTemperatureModuleState) MatrixPrimaryDiagonal() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(9)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTemperatureModuleState) HasMatrixPrimaryDiagonal() bool {
	return s.Struct.HasPtr(9)
}

func (s SoilTemperatureModuleState) SetMatrixPrimaryDiagonal(v capnp.Float64List) error {
	return s.Struct.SetPtr(9, v.List.ToPtr())
}

// NewMatrixPrimaryDiagonal sets the matrixPrimaryDiagonal field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewMatrixPrimaryDiagonal(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(9, l.List.ToPtr())
	return l, err
}

func (s SoilTemperatureModuleState) MatrixSecundaryDiagonal() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(10)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTemperatureModuleState) HasMatrixSecundaryDiagonal() bool {
	return s.Struct.HasPtr(10)
}

func (s SoilTemperatureModuleState) SetMatrixSecundaryDiagonal(v capnp.Float64List) error {
	return s.Struct.SetPtr(10, v.List.ToPtr())
}

// NewMatrixSecundaryDiagonal sets the matrixSecundaryDiagonal field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewMatrixSecundaryDiagonal(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(10, l.List.ToPtr())
	return l, err
}

func (s SoilTemperatureModuleState) HeatFlow() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s SoilTemperatureModuleState) SetHeatFlow(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s SoilTemperatureModuleState) HeatConductivity() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(11)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTemperatureModuleState) HasHeatConductivity() bool {
	return s.Struct.HasPtr(11)
}

func (s SoilTemperatureModuleState) SetHeatConductivity(v capnp.Float64List) error {
	return s.Struct.SetPtr(11, v.List.ToPtr())
}

// NewHeatConductivity sets the heatConductivity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewHeatConductivity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(11, l.List.ToPtr())
	return l, err
}

func (s SoilTemperatureModuleState) HeatConductivityMean() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(12)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTemperatureModuleState) HasHeatConductivityMean() bool {
	return s.Struct.HasPtr(12)
}

func (s SoilTemperatureModuleState) SetHeatConductivityMean(v capnp.Float64List) error {
	return s.Struct.SetPtr(12, v.List.ToPtr())
}

// NewHeatConductivityMean sets the heatConductivityMean field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewHeatConductivityMean(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(12, l.List.ToPtr())
	return l, err
}

func (s SoilTemperatureModuleState) HeatCapacity() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(13)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTemperatureModuleState) HasHeatCapacity() bool {
	return s.Struct.HasPtr(13)
}

func (s SoilTemperatureModuleState) SetHeatCapacity(v capnp.Float64List) error {
	return s.Struct.SetPtr(13, v.List.ToPtr())
}

// NewHeatCapacity sets the heatCapacity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewHeatCapacity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(13, l.List.ToPtr())
	return l, err
}

func (s SoilTemperatureModuleState) DampingFactor() float64 {
	return math.Float64frombits(s.Struct.Uint64(8) ^ 0x3fe999999999999a)
}

func (s SoilTemperatureModuleState) SetDampingFactor(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v)^0x3fe999999999999a)
}

// SoilTemperatureModuleState_List is a list of SoilTemperatureModuleState.
type SoilTemperatureModuleState_List struct{ capnp.List }

// NewSoilTemperatureModuleState creates a new list of SoilTemperatureModuleState.
func NewSoilTemperatureModuleState_List(s *capnp.Segment, sz int32) (SoilTemperatureModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 14}, sz)
	return SoilTemperatureModuleState_List{l}, err
}

func (s SoilTemperatureModuleState_List) At(i int) SoilTemperatureModuleState {
	return SoilTemperatureModuleState{s.List.Struct(i)}
}

func (s SoilTemperatureModuleState_List) Set(i int, v SoilTemperatureModuleState) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SoilTemperatureModuleState_List) String() string {
	str, _ := text.MarshalList(0xbd3e199eb9b03758, s.List)
	return str
}

// SoilTemperatureModuleState_Future is a wrapper for a SoilTemperatureModuleState promised by a client call.
type SoilTemperatureModuleState_Future struct{ *capnp.Future }

func (p SoilTemperatureModuleState_Future) Struct() (SoilTemperatureModuleState, error) {
	s, err := p.Future.Struct()
	return SoilTemperatureModuleState{s}, err
}

func (p SoilTemperatureModuleState_Future) SoilColumnVtGroundLayer() SoilLayerState_Future {
	return SoilLayerState_Future{Future: p.Future.Field(1, nil)}
}

func (p SoilTemperatureModuleState_Future) SoilColumnVtBottomLayer() SoilLayerState_Future {
	return SoilLayerState_Future{Future: p.Future.Field(2, nil)}
}

func (p SoilTemperatureModuleState_Future) ModuleParams() SoilTemperatureModuleParameters_Future {
	return SoilTemperatureModuleParameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilTransportModuleState struct{ capnp.Struct }

// SoilTransportModuleState_TypeID is the unique identifier for the type SoilTransportModuleState.
const SoilTransportModuleState_TypeID = 0xb1760f65e652e737

func NewSoilTransportModuleState(s *capnp.Segment) (SoilTransportModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 12})
	return SoilTransportModuleState{st}, err
}

func NewRootSoilTransportModuleState(s *capnp.Segment) (SoilTransportModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 12})
	return SoilTransportModuleState{st}, err
}

func ReadRootSoilTransportModuleState(msg *capnp.Message) (SoilTransportModuleState, error) {
	root, err := msg.Root()
	return SoilTransportModuleState{root.Struct()}, err
}

func (s SoilTransportModuleState) String() string {
	str, _ := text.Marshal(0xb1760f65e652e737, s.Struct)
	return str
}

func (s SoilTransportModuleState) ModuleParams() (SoilTransportModuleParameters, error) {
	p, err := s.Struct.Ptr(0)
	return SoilTransportModuleParameters{Struct: p.Struct()}, err
}

func (s SoilTransportModuleState) HasModuleParams() bool {
	return s.Struct.HasPtr(0)
}

func (s SoilTransportModuleState) SetModuleParams(v SoilTransportModuleParameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewModuleParams sets the moduleParams field to a newly
// allocated SoilTransportModuleParameters struct, preferring placement in s's segment.
func (s SoilTransportModuleState) NewModuleParams() (SoilTransportModuleParameters, error) {
	ss, err := NewSoilTransportModuleParameters(s.Struct.Segment())
	if err != nil {
		return SoilTransportModuleParameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SoilTransportModuleState) Convection() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTransportModuleState) HasConvection() bool {
	return s.Struct.HasPtr(1)
}

func (s SoilTransportModuleState) SetConvection(v capnp.Float64List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewConvection sets the convection field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewConvection(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s SoilTransportModuleState) CropNUptake() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s SoilTransportModuleState) SetCropNUptake(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s SoilTransportModuleState) DiffusionCoeff() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTransportModuleState) HasDiffusionCoeff() bool {
	return s.Struct.HasPtr(2)
}

func (s SoilTransportModuleState) SetDiffusionCoeff(v capnp.Float64List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewDiffusionCoeff sets the diffusionCoeff field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewDiffusionCoeff(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s SoilTransportModuleState) Dispersion() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTransportModuleState) HasDispersion() bool {
	return s.Struct.HasPtr(3)
}

func (s SoilTransportModuleState) SetDispersion(v capnp.Float64List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewDispersion sets the dispersion field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewDispersion(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s SoilTransportModuleState) DispersionCoeff() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(4)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTransportModuleState) HasDispersionCoeff() bool {
	return s.Struct.HasPtr(4)
}

func (s SoilTransportModuleState) SetDispersionCoeff(v capnp.Float64List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewDispersionCoeff sets the dispersionCoeff field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewDispersionCoeff(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s SoilTransportModuleState) VsLeachingDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s SoilTransportModuleState) SetVsLeachingDepth(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s SoilTransportModuleState) LeachingAtBoundary() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s SoilTransportModuleState) SetLeachingAtBoundary(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s SoilTransportModuleState) VsNDeposition() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s SoilTransportModuleState) SetVsNDeposition(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s SoilTransportModuleState) VcNUptakeFromLayer() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(5)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTransportModuleState) HasVcNUptakeFromLayer() bool {
	return s.Struct.HasPtr(5)
}

func (s SoilTransportModuleState) SetVcNUptakeFromLayer(v capnp.Float64List) error {
	return s.Struct.SetPtr(5, v.List.ToPtr())
}

// NewVcNUptakeFromLayer sets the vcNUptakeFromLayer field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewVcNUptakeFromLayer(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(5, l.List.ToPtr())
	return l, err
}

func (s SoilTransportModuleState) PoreWaterVelocity() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(6)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTransportModuleState) HasPoreWaterVelocity() bool {
	return s.Struct.HasPtr(6)
}

func (s SoilTransportModuleState) SetPoreWaterVelocity(v capnp.Float64List) error {
	return s.Struct.SetPtr(6, v.List.ToPtr())
}

// NewPoreWaterVelocity sets the poreWaterVelocity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewPoreWaterVelocity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(6, l.List.ToPtr())
	return l, err
}

func (s SoilTransportModuleState) VsSoilMineralNContent() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(7)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTransportModuleState) HasVsSoilMineralNContent() bool {
	return s.Struct.HasPtr(7)
}

func (s SoilTransportModuleState) SetVsSoilMineralNContent(v capnp.Float64List) error {
	return s.Struct.SetPtr(7, v.List.ToPtr())
}

// NewVsSoilMineralNContent sets the vsSoilMineralNContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewVsSoilMineralNContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(7, l.List.ToPtr())
	return l, err
}

func (s SoilTransportModuleState) SoilNO3() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(8)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTransportModuleState) HasSoilNO3() bool {
	return s.Struct.HasPtr(8)
}

func (s SoilTransportModuleState) SetSoilNO3(v capnp.Float64List) error {
	return s.Struct.SetPtr(8, v.List.ToPtr())
}

// NewSoilNO3 sets the soilNO3 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewSoilNO3(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(8, l.List.ToPtr())
	return l, err
}

func (s SoilTransportModuleState) SoilNO3aq() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(9)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTransportModuleState) HasSoilNO3aq() bool {
	return s.Struct.HasPtr(9)
}

func (s SoilTransportModuleState) SetSoilNO3aq(v capnp.Float64List) error {
	return s.Struct.SetPtr(9, v.List.ToPtr())
}

// NewSoilNO3aq sets the soilNO3aq field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewSoilNO3aq(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(9, l.List.ToPtr())
	return l, err
}

func (s SoilTransportModuleState) TimeStep() float64 {
	return math.Float64frombits(s.Struct.Uint64(40) ^ 0x3ff0000000000000)
}

func (s SoilTransportModuleState) SetTimeStep(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SoilTransportModuleState) TotalDispersion() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(10)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTransportModuleState) HasTotalDispersion() bool {
	return s.Struct.HasPtr(10)
}

func (s SoilTransportModuleState) SetTotalDispersion(v capnp.Float64List) error {
	return s.Struct.SetPtr(10, v.List.ToPtr())
}

// NewTotalDispersion sets the totalDispersion field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewTotalDispersion(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(10, l.List.ToPtr())
	return l, err
}

func (s SoilTransportModuleState) PercolationRate() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(11)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTransportModuleState) HasPercolationRate() bool {
	return s.Struct.HasPtr(11)
}

func (s SoilTransportModuleState) SetPercolationRate(v capnp.Float64List) error {
	return s.Struct.SetPtr(11, v.List.ToPtr())
}

// NewPercolationRate sets the percolationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewPercolationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(11, l.List.ToPtr())
	return l, err
}

func (s SoilTransportModuleState) PcMinimumAvailableN() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s SoilTransportModuleState) SetPcMinimumAvailableN(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

// SoilTransportModuleState_List is a list of SoilTransportModuleState.
type SoilTransportModuleState_List struct{ capnp.List }

// NewSoilTransportModuleState creates a new list of SoilTransportModuleState.
func NewSoilTransportModuleState_List(s *capnp.Segment, sz int32) (SoilTransportModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 12}, sz)
	return SoilTransportModuleState_List{l}, err
}

func (s SoilTransportModuleState_List) At(i int) SoilTransportModuleState {
	return SoilTransportModuleState{s.List.Struct(i)}
}

func (s SoilTransportModuleState_List) Set(i int, v SoilTransportModuleState) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SoilTransportModuleState_List) String() string {
	str, _ := text.MarshalList(0xb1760f65e652e737, s.List)
	return str
}

// SoilTransportModuleState_Future is a wrapper for a SoilTransportModuleState promised by a client call.
type SoilTransportModuleState_Future struct{ *capnp.Future }

func (p SoilTransportModuleState_Future) Struct() (SoilTransportModuleState, error) {
	s, err := p.Future.Struct()
	return SoilTransportModuleState{s}, err
}

func (p SoilTransportModuleState_Future) ModuleParams() SoilTransportModuleParameters_Future {
	return SoilTransportModuleParameters_Future{Future: p.Future.Field(0, nil)}
}

const schema_86ea47c297746539 = "x\xda\x9c\xbd\x7f\x9c\x14\xd5\x95\xf7\x7fOU\x0f=3" +
	"\x0c\xcc\x8cuQ~\xcc\xd0\x0c\xcc &\xa8\xc0`D" +
	"\x83\x0e\xc34\x08:\xbf{\x14uqC\xd1}g\xa6" +
	"\xb4\xba\xaa\xad\xaa\x1ef\\\x8c\x98\xe0\x06\x09I\xd4`" +
	"\x16\x13\xdc\xd5,\xd9\xd5,\xd9`V\x9f\xc5,n\xd0" +
	"\x077\xe8\xe2\x134\x90@\x96l\xd4`\xa2y\xf4\xf5" +
	"\xd5}\x99]\xb2/\xb3\xf3}}nUwW\xf7\xf4" +
	"`\xf2\xf8\x8f\xf0>\xa7o\xdd\xba?\xce=\xe7\xdes" +
	"\x8b%/.\\\xa5,\xad\xf8\xee\x0c\xc6\xfa>\xaa\x98" +
	"2>\xf7\x85\xff{\xf7\xfe\x81\xc6{Y_\x13\xed\x1d" +
	"\xbfJx\x7f\xf1\xc2u\xbf\xf9sV\xb1,\xcaX\xeb" +
	"s\xd5;I;Y\x8d?\xbeZ}e+\xa3\x1f\xdc" +
	"\xbd\xb5\xed\xa5\xa1\xfb\xbe\xd8\xd7DJHy*4>" +
	"\xb8\xfeV\xd2*n\xc0\x1f\xe9\x86_(\x8c\xc6\xc5\x8f" +
	"?o\xffP}s\x0f\xeb[F\xca\xf8?|\xf5\xb5" +
	"\x87v\x7f\xed\xa6\xbfc\x11\xa8\xac\xe9\xfe\x0dizw" +
	"\x941\xed\xb6\xee-\x8c\xc6_\xb9\xfd\xd3S_\xa5\x9f" +
	"\xedCEx\xa1l\xa9\xfcl\xf7N\xd2^\x85r\xeb" +
	"+\xddC\x11F\x85\xc2\xfa\x9a\xe8\x82PMj\xa1\xf3" +
	"\xbb\xc4C\xa4\xd5\x0f\\\xc4Xk\xe3\xc0w\xa3\x8c\xc6" +
	"\xaf\xfcu\xff\xafD\xed\xc8SP\x9f\x12R\xaf\x81z" +
	"\xd7m\xaf\x91f\xdc\x86?\x8a\xdb\xfeKe4\xfe7" +
	"\xf7u\xf1\xbf\xb6>x\x1a\xeaU!u\x82\xce\xfd\x9b" +
	"\x1f\"\xed\xf1\xcd\xf8\xe3\xa3\x9b\xaf\xc4{\xde|\xe5\x81" +
	"g\xffr\xd6\xb5\xcfA=\x12R\x9f\x0e\x9dK\xc5\x9b" +
	"\xa4\xad\x17\xf2\x9d\xc5\xe5\xa8\xfb\xd1\xcf\xfe`\xd6\xc5_" +
	"\xabx\x05\xea\x8bB\xea\x17B\xe7\x99\xdb_&\xed\xd5" +
	"\xdb\xe5\xab\xde\xde6\x9d\xd1\xf8\x8a\xff|\xef\xc3\x81\x1f" +
	"\xbd\xf7*\xeb[JS\xc6\xbfv\xe3/\x7f\xbc\xa7\xfd" +
	"\xda\xff/\xa8\xcc+[\x1dE\xfb`+\xfe\xf8\xde\xd6" +
	"\xaf\x10\xa3\xf1\xc6\xb5\x9f\xb9\xa3\xe7W\xbbO\xa2\xf4\xba" +
	"\xd2\xd2\x1f\xff\xec\x0b\xa4=\xfbY\xf9\xa0\xcf\x8eW2" +
	"\x1a\x9f\xbd\xa1\xe2H\xfa\xf8#'Y}\x13\x95\xbei" +
	"z\xa7C\xda\xbd;\xd1Gw\xeflc4~\xe7\xe1" +
	"o|\xbe\xee\xa1\xef\x9eB\xd9T\xd2G\x8f\xef\xbc\x95" +
	"\xb4g\xa4\xf2SR\xb9~\xf5\x99\xdd[k\xe6\xfe\x1c" +
	"\xca\xd3BE+r8\xed\xfc\x1cioA\xbb\xf5\x8d" +
	"\x9d=h\xf3\x99\x0d\x0f\xfcb\xf3e}\xbf\x84\xbaV" +
	"Rv\xf6\xcbw\x91v\xff\x97\xf1\xc7\xfb\xbe\xfcWh" +
	"\xc3|3\xf45\xd1\xd4P\xe1R\xfd\x95\xaf\xee$\xed" +
	"\xad\xaf\xa2\xff\x7f\xf7\xd5/\xa8l\x9c\x8d\xb3)\xe3i" +
	";%L\xf7\xf2t\x85m\x19I\xfd\xf2\xb4\xfc\xdfg" +
	"\\O\xf7\xc4eI=ce\xae\xeep\xecL\x97\x9d" +
	"\xca\x9a\"\x01\xcaX/Q\xe2\x09U\x8d0\x16!\xc6" +
	"\xb4\xfbgmf,\xb1c\x96J\x89\xdd\xb3\x14\xaa\x7f" +
	"\x9b8\x81?8\xeb\x13\x8c%v\x81\xef\x01\xff\xb5\xc2" +
	"IaL{X\xf2\x07\xc0\xf7\x82\xff\x8a8\xa9\x8ci" +
	"\x8f\xccz\x93\xb1\xc4c\xe0\xfb\xc1\xdfR9E\x88\xb4" +
	"'g}\x9d\xb1\xc4~\xf0\x83\xe0g#\x9c*\x18\xd3" +
	"\x9e\x91\xcf}\x1a\xfc0xE\x05\xa7)\x8ci\xcf\xcd" +
	"\xba\x95\xb1\xc4!\xf0\xa3\xe0S\xa6p\xf4\x9b\xf6\xa2," +
	"\xe7(\xf8\x09\xf0h\x94S%c\xda\xab\xb3\xbe\xc7X" +
	"\xe2\x04\xf8\xeb\xb3\x14\xa2JNU\x8ci?\x97\xea\xaf" +
	"\x03\x7f\x04\xf5\xaaJN\xd5\x8ci\xbf\x9b\xf5M\xc6\x12" +
	"\x1f\x81W\xceV\xa8\xbe\x9a8MeL\xab\x98\xfd\x1f" +
	"\x8c%jf\xab\x94X\x01>\xb5\x8aS\x0dc\xda\x15" +
	"\xb3_f,\xb1\x12|\x1dxM5\xa7i\x8cik" +
	"f\xa3\xfaq\xf0^\xf0iS9MgL\xeb\x9a\xbd" +
	"\x93\xb1D/\xf8F\xf0\xe95\x9cj\x19\xd3n\x99\x8d" +
	"\xe7n\x04\x1f\x06\xafU8\xd51\xa6\x89\xd9\x9fc," +
	"\x91\x02\xdf\x06^\xa7r\xaa\xc7\xd8\x9c\xfd\x10c\x89m" +
	"\xe0{\xc1\xeb\xa7q\xba\x80\xb1\xd6Gf+\x84v\x86" +
	"`?\x04\x17L\xe7\xa41\xa6=9[\xb63\xf8A" +
	"p\xad\x96\x13G;\xcfF\xfb\x1c\x04?\x02\xce\xeb8" +
	"\xcd`L{~\xf6\xf7\x19K\x1c\x01?\x0e>\xa3\x9e" +
	"\xd3\x85\x8ci\xaf\xc8\x07\x1f\x07?\x03~!q\xba\x88" +
	"H;-_\xf8\x14\xf8Y\xf0\x8b.\xe04\x931\xed" +
	"\x0dY\xceY\xf0\xf7\xc1gF8\xcdbL{o\xf6" +
	"\x0b\x8c%\xde\x07\xaf\x99\xa3P\xfd,\x8d\xd3l\xc6Z" +
	"\xab\xe6\xc8\x17\xa8\x9b\xa3R\xa2\x01\x82\xd9\x9c\xd3\x1c\xc6" +
	"\xb4Ysng,1\x13\xbc\x19|\xce\x0cN\x0dD" +
	"Z\xd3\x9c\xbb\x18K\xcc\x03_\x0c\xdep!\xa7F\"" +
	"\xed\x929\x0ec\x89E\xe0\xcb\xc1\x1b/\xe24\x971" +
	"m\xe9\x1c\x0c\xa0%\xe0+\xc1\xe7\xce\xe4\x14cL\xbb" +
	"J\x96\xb3\x02<\x0e\x1e\x9b\xc5i\x1ecZ\xbb\xe4\xab" +
	"\xc0;\xc1\xe7UpjbL[/\xcbY\x07>\x00" +
	"\xde4\x9b\xd3|\xc6\xb4\xbe9h\x88^\xf0\x8d\xe0\xf3" +
	"\xe7pZ@\xa4\xdd\"\xf5o\x06O\x81/h\xe0\xd4" +
	"\xcc\x98\xa6\xcf\xc1\xc8\x1a\x06\xf7\xc0\x9b\xa7pjaL" +
	"\xbbs\x0ez>\x03\xbe\x0b\xbc%\xcai!&\xe4\x1c" +
	"t\xd8.\xf0'\xc0\x176r\xba\x981\xed[s~" +
	"\x86\x0e\x06?\x08~\xf1\\N\x8b\xd0\xc1s\xfe\x1b\x13" +
	"\x06\xfc(\xf8\"\xe2t\x09&\xcc\x1c9a\xc0O\x80" +
	"_\x12\xe3\xf4\x09L\x18\xf9\xdc\xe3\xe0g\xc0?Q\xc9" +
	"\xe9\x93\x8ci\xa7\xe7\xa0#\xcf\x80\x9f\x03\xff\xa4\xc2i" +
	"1c\xdao\xe7\xa0#\xcf\x81G\x1a\x14\xaa_<\x8f" +
	"\xd3\xa5\x8ci\xd4\xb0\x99\xb1\xfe\x06\xf4/\xf0\xa5M\x9c" +
	".C\xff6\xf8\xfd\x0bA\x03\x04\x97\xa9\x9c.G\xff" +
	"6\xa0\x9c\x06\xf0E\xe0\x97\xcf\xe7\xb4\x84\xb1\xd6\x96\x86" +
	"~\xfc`9\x04\xab X\xb2\x8b\xd3R\xc6\xb4k\x1a" +
	"\xf0\x02\xab\xc0;\xc1\x97~\x89\xd32tL\x03:~" +
	"\x1d\xf8\x00\xf8\xb2fN\xadDZ_\x03\xa6\xea\xcd\xe0" +
	")\xf0\xd6\x16N\xcb\x19k\xd5\x1b\xaa\xf1\x00\x13\x82Q" +
	"\x08\x96Wq\xba\x821-+\x7f\xb0\x15|\x0f\xf8\x15" +
	"\x0a\xa7O\x11i\x0f7\xfc\x86\xb1\xc4^\xf0'\xc0?" +
	"\xa5r\xba\x92H\xfb\x96\xe4\xfb\xc1\x0f\x82_\xb9\x90\xd3" +
	"\x0a\xf4@\x03z\xf8\x10\xf8Q\xf0\x15\x17s\xba\x0a=" +
	" _\xe0(\xf8\x09\xf0\xab\"\x9c\xae&\xd2^E\xcb" +
	"%\x8e\x83\x9f\x01\xbf\xba\x9a\xd3\xa7\xd1\x03\x0d\x98\x01\xa7" +
	"\xc0\xcf\x82\x7fz\x11\xa7\x95\x98b\xb2\xe5\xce\x82\xbf\x0f" +
	"\xbe\xf2\x12N\xd7`\x8a5\xbc\xc6X\xe2\xc3\x06\x95\xfa" +
	"\x1b\x15\xaa\xbf\xe6\x13\x9c\xaeeL\xfb\xbd|\xadH\xa3" +
	"J\x89:\xf0k\xbf\xcc\xa9\x8d1mZ#\x8a\xa9\x03" +
	"o\x00o\xfb$\xa7U\xe8\x98\xc6\xab\x19Kp\xf0y" +
	"\xe0\xab\x16sjgLklD\xf5\xe7\x81/\x06o" +
	"\xbf\x94\xd3j\xc6\xb4K\x1aa\xe2\x16\x83\xaf\x00_}" +
	"\x19\xa7\x0e\x98\xcaF\x0c\xac\xe5\xe0\xab\xc0;.\xe7\x14" +
	"G?6b\x82\xad\x04_\x07\x1e_\xc2i\x0dL\xa8" +
	",g\x1d\xf8\x00\xf8\x9a\xa5\x9c\xd6b\x825\xc2T\x0e" +
	"\x80o\x02_\xbb\x8c\xd3up\xa9\x1a1@7\x81\x9b" +
	"\xe0\xd7\xb5rZ\xc7X\xab\xd1(G\\\x06\x82\xad\x10" +
	"\xac[\xcei=c\xda\x98\xfc\xc1V\xf0\x1d\xe0\xeb+" +
	"8]O\xa4\xdd'\x1f\xbc\x03|7\xf8\xf5Wp\xba" +
	"\x81H{P>x7\xf8c\xe07|\x8aS'c" +
	"\xda\xa3\x8dh\xd0}\xe0\x07\xc0;\xaf\xe4\xd4\xc5\x98\xf6" +
	"\x1dY\xfe\x01\xf0C\xe0]+8u3\xa6=\xdb\x08" +
	"Kp\x10\xfc\x08x\xf7U\x9cz`r\x1baZ\x8f" +
	"\x80\x1f\x07\xef\x99\xca\xa9\x17&\xb7\x113\xfe8\xf8\xbb" +
	"\xe0\xbdWs\xeacL{G\xf2w\xc1\xcf\x81\xf7}" +
	"\x9aS?f\xa4\xac\xe79\xf0\xc8\\\x85\xea\xfbWr" +
	"J\x10i4\xf7z\xc6\xfa\xe7bF\x02'\xae\xe14" +
	"\xc0\x98V5\x17\xf3\xa5\x12\x9c\x83\x0f\xd4p\xba\x911" +
	"\xad~.\x8a\xe1\xe0K\xc0o\x9c\xc6\xe9&\xc6\xb4K" +
	"%_\x02\xde\x09~\xd3\xb5\x9c6`\xde\xcdE3\xf4" +
	"\x82o\x04\xdf\xd0\xc6\xe9f\xc6Zo\x99+\xdb\x7f\x13" +
	"\x04&\x047\xaf\xe2t\x0b\x91f\xcc\x85\xab\x90\x02\xcf" +
	"\x80\xdf\xda\xce\xe9V\xc6\xb4\xf4\\\x0c\x08\x13|\x14\xfc" +
	"OVs\xfa\x13\xccG\xc9=\xf0m\xe0\x1b;8m" +
	"\xc4Z(\x1f\xbc\x1d\xfc\x01\xf0\xdb\xe2\x9cncL\xfb" +
	"\xd2\\\xb4\xcf\x03\xe0{\xc1\xfft\x0d\xa7?\x85+2" +
	"\x17\xed\xbc\x17\xfc\x09\xf0\xcf\xac\xe5\xf4\x19X\xd0\xb9\x18" +
	"\xa0\xfb\xc0\x0f\x80o\xba\x8e\xd3&\xf4\xe3\\\xf4\xd7~" +
	"\xf0\x83\xe0\xfa:N:\xe6\xb5,\xe7 \xf8\x11\xf0\xcd" +
	"\xeb9mF?J~\x04\xfc8x\xf2zNI\xf4" +
	"\xe3\\L\xb0\xe3\xe0g\xc0S7pJ1\xd6zz" +
	"\xee|4\xd0Y\x08\xde\x87@tr\x12\xf0n}\xc1" +
	"9\x08\"1\x85\xea\x07\xbb8\x0d\"\xd6\x88IAM" +
	"L\xa5\xc4L\x08\x86\xba9\x0d1\xa6\xcd\x88\xc1\xd87" +
	"\x80/\x02\x1f\xee\xe14\xcc\x98\xd6\x12\x83)X\x0c\xbe" +
	"\x02\xdc\xe8\xe5d`N\xc6P\xd5\x15\xe0q\xf0\xdb\xfb" +
	"8\xdd\x8eE/\x86)\x10\x07\xef\x05\xbf\xa3\x9f\xd3\x1d" +
	"p_b\xdfF\x1f\x83o\x047\x13\x9cL\xf4ql" +
	"6*\x94\x82 \x03Az\x80S\x1a\xeetL\x1a\xd7" +
	"Q\x08\xb6C`\xdd\xc8\xc9b\xac\xf5^\xff\x15vA" +
	"\xb0\x07\x02\xfb&N6\x1c\xc8\x18\xcc\xca\x1e\xf0}\xe0" +
	"\x99\x0d\x9c2\x8ci\x8f\xc7\xd0;\x8f\x81\xef\x07\xbf\xf3" +
	"fNw\xc2\xb1\x91\xfa\xfb\xc1\x0f\x82;\xb7pr\xd0" +
	";\xb2\xaa\x07\xc1\x8f\x80\xbb\xb7rr\xd1;R\xff\x08" +
	"\xf8qp\xefO8y\xe8\x9d\x98\x9ce\xe0g\xc0\xb3" +
	"S8eaue9g\xc0\xdf\x06\x1f\xd9\xc8i\x84" +
	"1\xed\xad\x18\xac\xfa\xbb\xe0\xe7\xc0\xb7\xdc\xc6i\x0bf" +
	"\x9fl\xbas\xe0\x91y\x0a\xd5\x8fN\xe74\x8a\xf5p" +
	"\x1exd\x1e\xcc(\xf8X-\xa71\x98\xd1y(\x7f" +
	"\x1e\xf8J\xf0\xbb\xea8\xdd\x05\x7fd\x1e\xac\xfd\x0a\xf0" +
	"\x01\xf0?\xab\xe7\xf4g0\x7f\xb2\x9c\x01\xf0\x0c\xf8\xd6" +
	"\x0b8m\xc5\xac\x99\x87\xae\xcc\x80\xef\x02\xbf[\xe3t" +
	"7\xfc\x05Y\xfe.\xf0'\xc0?\xcb9}\x16\xa3}" +
	"\x1ef\xcd~\xf0\xa3\xe0\xf7\xcc\xe0t\x0fV\xa5y\x18" +
	"*\xc7\xc0\xdf\x06\xdfv!\xa7mx\xdfyp\xe0\xdf" +
	"\x05\xaflR\xa8\xfe\xde\x8b8\xdd\x0b\xcf\xb8\x09\xe5W" +
	"6\xc1/\x03\xff\xdcLN\x9fcLkjB\xfb," +
	"\x02\x8f\x83\x7f~\x16\xa7\xcfch5\xe1\xb9\xeb\xc0S" +
	"\xe0\xdbgs\xda\x0e?\xa8\x09\xed\x9f\x02\x7f\x00\xfc\xbe" +
	"?\xe5t\x1ff\xb1,\xff\x01\xf0\xbd\xe0\x7f\xfe\x19N" +
	"\x7f\x8eY\xdc\x04\xb3\xb5\x07|\x1f\xf8\x176q\xfa\x02" +
	"\xc6I\x13\xea\xff\x04\xf8\xd3\xe0;\xa2\x9cv @k" +
	"\xc2\xaaz\x00\xfc\x10\xf8\xfd:\xa7\xfba\x8d\x9b`\xa5" +
	"\x0f\x81\x1f\x05\xdf\xb9\x99\xd3N\xb4\x83|\xeeQ\xf0\x13" +
	"\xe0_Lr\xfa\"\xfc\xa3&X\xa1\xe3\xe0g\xc0w" +
	"\xa58\xed\xc28\x91\xe5\x9c\x01\x7f\x1b\xfcK\x82\xd3\x97" +
	"\xd0nM\xb2\xdd\xc0\xcf\x81\x7fy\x90\xd3\x971Nd" +
	";|\x04^9_\xa1\xfa\xaf\x0cq\xfa\x0a\xdas>" +
	"\xf4k\xe6cj\x83?0\xcc\xe9\x01L\xed\xf9h\x9f" +
	"\x99\xe0\xcd\xe0\x0f\x1a\x9c\x1eD;\xcf\xc7\xbc\x98\x07\xbe" +
	"\x18\xfc\xa1\xdb9=\x84ex>\xcc\xf4b\xf0\x15\xe0" +
	"_\xbd\x83\xd3W1\xe5\xe7\xa3\x1d\x96\x83\xaf\x02\xdfm" +
	"r\xda\x8dex\xbe\\\x86\xc1\xd7\x81?<\x87\xd3\xc3" +
	"X\x86\xa5~\x1c|\x13\xf8\xd7\x1a8}\x0d\xcb\xed|" +
	"\x8c\xcf\x8d\xe0\xa3\xe0\x7f\x91\xe6\xf4\x17\xb0\xd2\xf3a\xe5" +
	"F\xc1\xb7\x83\xefi\xe4\xb4\x871\xed^Y\xcfm\xe0" +
	"{\xc1\x1f\xb18=\x82~\x9c\x8f\xf1\xbc\x17\xfc\x09\xf0" +
	"\xaf\xdb\x9c\xbe\x8e\xf1)\xf5\xf7\x81\x1f\x00\xff\xc6W8" +
	"}\x03\xd6X>w?\xf8A\xf0\xbd\x19N{1\xdf" +
	"\xe7c<<\x0d~x\xbeBK\x1f=B\x9c\x1eE" +
	"\xc4(_\xe0\x10\x04G\xf1\x83\xbft8\xfd%:X" +
	"6\xe8Q\xf0\x13\xe0\x7f\xe5r\xfa+t\xb0l\xb8\x13" +
	"\xe0\xaf\x83?\xe6qz\x0c!\xa3|\xf0\x19\xf0\xb7\xc1" +
	"\x1f\x9f\xcb\xe9qt\xb0,\xe7m\xf0\xc8\x02\x85\xea\xbf" +
	"\x99\xe5\xf4ML\xf8\x05\xe8\xc8\xca\x05XW\xc1\xffz" +
	"\x84\xd3_c]]\x80\x891\x13\xbc\x19|_\x8c\xd3" +
	">t\xe4\x02\x18\xa6f\xf0U\xe0\xdf\xda\xc2\xe9[\xe8" +
	"\x98\x05\x18\x88\xab\xc0;\x17(\xb4\xf4o^$N\x7f" +
	"\x83\x05w\x01Zh\x1d\x04\x03\xf8\xc1\xdf\x8er\xfa[" +
	"X\x08\xf9\x83\x01\xf0M\xe0O\x8cqz\x02=&\x1f" +
	"\xb0\x09\xdc\x04\x7fr\x1e\xa7'\x19\xd3\x8c\x05\xf0[3" +
	"\xe0\xbb\xc0\xbf\xdd\xc4\xe9\xdb\xb0\x1c\xb2\xfc\x1d\xe0\xfb\xc0" +
	"\xffn>\xa7\xbf\xc3\x0c[\x80\x17\xde\x07~\x18|\xff" +
	"]\x9c\xf6\xa3\xa1\x17\xc0\x02\x1d\x06?\x06\xfe\x9d\x05\x9c" +
	"\xbe\xc3\x98\xf6\xd2\x02\x8c\xac\xa3\xe0g\xf1\x02\x7f\xff/" +
	"\xc4\xe9\xef\x89\xb47\x16\xa0E_\x87\xe0]\xfc\xe0\xbb" +
	"\x7f\xc6\xe9\xbbpl\xe4\x0b\xbc\x0b~\x0e\xfc\xc0VN" +
	"\x07\x88\xb4\xdf.\xb8\x1e\x0e\xed\x02\x95\xfa\x9b\x15\xaa\x7f" +
	"\xeanNO\xc1\xa1\x95\xf5\xfc\x08\xea\x95\xe0\xdf\xfb," +
	"\xa7\xefa&5\xa3\xf8H3\x1c]\xf0\x7f\xb8\x87\xd3" +
	"?\xc0\xd1\x95\xbc\x06|&\xf8\xd3\xdb8=\x8d\x19\xd6" +
	"\x8c\xc7\xce\x04o\x06\x7f\xe6^N\xcf\xa0c\x9a1 " +
	"\x9a\xc1\x97\x80\xff\xaf\xcfq\xfa_p\x84\x9a1\xb0\x16" +
	"\x83\xaf\x00\xff\xc7\xcfs\xfaG\xcc0Y\xfer\xf0U" +
	"\xe0\x07\xb7s:\x88\x8el\xc6\x08]\x09\xbe\x0e\xfc\xd9" +
	"\xfb8=\x8b\x19&\xcb\x89\x83\xf7\x82\x7f\xff\xcf9}" +
	"\x1f\x8bm3\xde\xab\x13\xfcf\xf0\x7f\xfa\x02\xa7\x7fb" +
	"L\xbbQ\xf2\x01\xf0M\xe0\x87vp:\x84\xfe\x95\xf5" +
	"\xdc\x04n\x82?w?\xa7\xe7\xd0\xbf\xcd\xb0\x88\x19\xf0" +
	"\xad\xe0\xff\xdc\xcc\xe9\x9f\xe1\xff\xca\xfa\x8c\x82\xef\x06\xff" +
	"A\x0b\xa7\x1f0\xa6=\xd8\x8cq\xb2\x1b\xfc\x00\xf8\xe1" +
	"\x9d\x9c\x0e\x13i\xdf\x91\xeds\x00\xfc\x10\xf8\xf3_\xe4" +
	"\xf4<,h3\xfa\xfd\x10\xf8Q\xf0\x17vqz\x01" +
	"\x13L\xd6\xe7(\xf8\x09\xf0\xff\xbd\x90\xd3\xff\xc6\x04k" +
	"F\xa4z\x0a\xfc\xc3f\x85\x96\x1e\xc94p:\xc2\x98" +
	"\xf6A3L\xe29\x08\"-\x0a\xd5\xff\xf2K\x9c^" +
	"\x84\xe3\xdar;c\xfd-p\\\x81\xdf\xfc2\xa7\x7f" +
	"!\xd2\xaaZ`9j\xc0g\x82\xbf\xf1\x15N?$" +
	"\xd2f\xb4\xa0>3\xc1\x9b[\x14Z\xfa\xe2\x9d\x0d\x9c" +
	"\x8e\xa2#[0~\xe6A\xb0\x18?\xf8\x97\x078\xbd" +
	"\x04S\xd9\x82\x01\xba\x08|9\xf8\x0f\x1f\xe4\xf42c" +
	"\xda\xd2\x16\xd4g\x05x\x1c\xfc\xe8C\x9c\xfe\x15KX" +
	"\x0bf\xf6:\xf0\x01\xf0\x97\xbe\xca\xe9\x18&^\x0b&" +
	"\xc6\x00\xf8&\xf0\x97wsz\x05\x1d\xd3\"'\x1e\xb8" +
	"\x09\xfe\xaf\x0fs\xfa?\xe8\x98\x164\xa8\x09>\x0a~" +
	"\xeck\x9c~\x04\x13*_`\x14|;^\xe0\x95\x8d" +
	"\x0a\xa7\xe3\xb0\xa1\xf2\x8d\xb7C\xf0\x00~\xf0\x7f\xf6p" +
	"z\x15kd\x0bZt7\xf8c\xe0?z\x84\xd3k" +
	"\x88LZ`\x8b\x1f\x03\xdf\x8f\x82\x8e\xdf\xa6p\xfa1" +
	"\x91\xf6d\x0b\x86\xdc\x13\x10<\x0d\xc1\xab\x7f\xaap:" +
	"A\xa4=%\x05\x07 8\x04\xc1kN\x03\xa7\x93\xe8" +
	"\xe4\x16\x0c\xba\x83\x10\x1c\x81\xe0\xc7\x9fQ8\xfd\x84H" +
	"{\xbe\x05\xde\xf1a\x08\x8eApbX\xe1\xf4S\"" +
	"\xed%Y\xd4Q\x08N\xa0R'/\xe6t\x0a\xdd\xdf" +
	"\xb2\x0c\x0e\x06\xf8\xdb\xe0?Y\xc4\xe94\xech\x0b\xe2" +
	"\xcc\xd7\xc1?\x02\xff\xe9%\x9c~\xc6\x98\xf6;\xc9?" +
	"\x04\xaf[\xa8P\xfd\xa9Op\xfa7L\xe3\x85\xaba" +
	"_\x17\xa2\x9b\x17*\xb4\xf4\xb4\xa1p:\x83n\x96\x82" +
	"\x06\x08\x16A\xf0\xb3\xdb\x15N?\x87\x17\xbc\x10\xfd\xdf" +
	"\x0c\xc1\x12\x08\xfe\xcdm\xe0\xf4\xef\x98\xc9\x0b\xf1\x88E" +
	"\x10,\x87\xe0\x8c\xd7\xc0\xe9\x17\x18\x01\xb2\xa8\xc5\x10\xac" +
	"\xc0\xb3\x7f\xfeIN\xafc\x8a/\x94~3x\x1c\xfc" +
	"\xdf\x17sz\x03#c!\xa6\xfe*\xf0N\xf0_\\" +
	"\xca\xe9M\x98\xea\x85r\xb3\x08|\x00\xfc\xf5\xcb8\xfd" +
	"\x12#f!\xa6\xe6\xcd\xe0)p\xba\x9c\xd3Y8C" +
	"\x0b157\x81\x9b\xe0\xca\x12Noa\xc4,\xc4H" +
	"\x1d\x06\xf7\xc0\xd5\xa5\x9c~\xc5\x98v\xa7\xd4\xcf\x80o" +
	"\xc5\x0bD\xb2\x0d\x9c~\x8d9.+4\x0a\xc1v\x08" +
	"\xde\x19i\xe0\xf46\x86\xd2B\x8c\xed\x1d\x10\xecFI" +
	"\xb7|\x83\xd3;\x08r\x17\xa2wv\x81\xefY\xa8\xd0" +
	"\xf8\xa0c\xbb\xde\x0d\x86\xc9\xa2f\x8fE\xc4\x14\"F" +
	"\xb5wxw\xd84\x95)4\xd5\xffK2\xf7\x97q" +
	"\xddu\x8d\xb4a\xea\x8a'zu\xc7\xeb\xb0\xc5\xe0\xa0" +
	"\xdb/R\xd9hR\xa4r\xbf\x1f\xb7[7$<;" +
	"\xad\x93\xa7\x9b\x1d\xa6\xedfUG\xf8E\x1c~\xbf\x8d" +
	"\xb1q\xbb5\x91M\xdf\x98\xf1XT\xbfC\xe4\xcb\x1e" +
	"q;u\xcf\xf0\xb2LM\x15\xa0\xbe\xd9\x1e\x11C\x8e" +
	"MY+\xb5\xda\xb0\xd3\xba\xea\xba\x93\x0bc\xae\xdbc" +
	"\xa6\xf2\xf2L\xb2]j\x90cg\xadT\x8f3\xa4\xea" +
	"\x16Mg\xd4\xab\x92\xac\xebt\x94\x91\xf4\xb2\xba9\xe0" +
	"\x90n\xb9\x19\xc3\xd1\xbd\xa8a[\xe1\x12\xe4\x1b+\xa6" +
	"\xee\xbf\xb1\xe1\x19\xb6eXC1\xf9\xea\xb9\xc2\x82\xff" +
	"M\x0d\xca,\xfaU\xbf\xd0M\xd3N\xea\xf8!c\x13" +
	"Z\x92E=\xe1N\xa0\x04\xed~\xb9c\x1f\x92y\x8e" +
	"m\xd9i2\x92q}\xacSX\xd1\xa1a/T\xd3" +
	"\xd5\xba+\xe2:\x8d\x99\xc2\x1a\xf2\x86\xd9\xc4JAa" +
	"@P:#\x1c\xdd\xcb:$\xca\xa8\x88!\xc3J\xa8" +
	"\xc2r\x0d\xcf\x18\x11\xbd\xc3\xba+\xd6\x09\xddKx\x8e" +
	"p\xddB]6\x0b\xd3\xde2Y\xb7L\x10N\xe8\x96" +
	"\x0e\xdd\xd9l\x8f\xd2\x98)[\xa5\xb7M\xf7\x86\xb7\xe8" +
	"cT\xc1\x14\xaa`4\x9e4\x85\xee\xc4\xf51\xea\xd7" +
	"S\x06T(\xdc#\x1d\xf6\xb2.\xe1\xb1\xe8\xb0\x9d\xa2" +
	")L\xa9\x98\xa2\xe2'\x8e\xe1\x19I\xdd\xa4\xee\x0e\xdb" +
	"J\x0a\xcbksd\xd9\xe1\xdfI\x15E7{F\xc7" +
	"\x86\x84\xd5a[\x9e\xb0\xbc2\xed\xe4+\xaa\xba9 " +
	"rmU\xb6\x11\x92\x8e\x9d\x89\x1bz\x9a\xd5\x0aO8" +
	"Ex\xadc\xbb\xac\xcd\xc3\xcc\x18\x0d\x8f|\xc8P\x14" +
	"\x8bM\"2\x86\x98Z\xd4\xab\x1d\x12\xb36ch\xd8" +
	"\xeb]:\x99`Y\x89\xa0[gjZP\x0dS\xa8" +
	"&\xa8Rw\\\xa4YT\xb7RE\x15\xed\xee\x17)" +
	"\xa6\x16\xd7\xc4/\"\x91QD\xd2\x184\x92]\xfah" +
	"\xbfm{\x18\xf4q\x91\xf1\x86\x8b~\xbfA\xf7\x049" +
	"7f<\xfd\x0e1\xa1)\x93Y\xc7\x11\x967@\xb9" +
	"v\x8c9\"\x91MO\xa6\xa6\xd8^Q\x9b'\xd4l" +
	"\xba\xf0\xb0\xc9\x94\xda\xb2iT/\xdc\x00Y\xcf3," +
	"\x1a\x8a\x0bS\x1f\x8b\xeb\xea\x98KQ\xa6P\x94\xd1x" +
	"J\xf7\xa7\x07\x0d\xaf\xd5\x93\x9e\xed\xb0\xd0\xcf\xe2RF" +
	"C\xdep\xbf\xb83k\xb49\"-,\xaf\xb4\xb2)" +
	"}\xccm\x1f\xf4\x84\xe2\xc8\xb9\xb2\xd6\xb4\xb7\x08\xc7\xb0" +
	"\x86X\xe1\x19\"i\x1a\x96\xee\xb1\x12K\x12\x17\x83z" +
	"\xd6T\xbd\xdc\xa0\xb6nt\xc5\x9a\xc1A#i\x08+" +
	"9V\xa8\xc9HZ6\xf3u\x8a\xb4Z[tO8" +
	"\x03\xfafS\x14\x9e\x80\xb2F\x84iG2\xa8a{" +
	"2)L\xe1\x0f\xf7\xd5c\xdd\x86\xe7\xd8C\xc2\x92\x83" +
	"\x95\\\xaab\x0aU\xc9Z\xe1\x17\x994\x09\xcb\xd3\xcd" +
	"\x84\xa7\xabC\"_\xa0e\xf7\x0c\xa2\xcfY,\xe1\x89" +
	"L\xa8\xb9\x1c;;4\xec\xadW\xd2\x19=\xe9\xf5X" +
	"k\x85\xe3\x19\xa6\xe1\x8d\xe5\xccRn\xc0\xc4\xa5\xa2\xea" +
	"\xad/U\x0c\x9a\xb9\xa8\x9d\xa5\xae\x12L\xa7\x81aG" +
	"\xb8\xc3\xb6\x99bef\xe2\x9a\xb4p\x86\x84b%\xc5" +
	"Z\xd3\xb6S\x865\x84Y\xeb\xd4\xda\xa1\xd5\xaaH\xad" +
	"\xcb6\\\x8c\x8a\xf2jV*!,\xa5\xd4\xb4\xc5d" +
	"=\xf2\x15\x14\x83\x83\"\xe9\x19#$|+;\xa4\x86" +
	"\x86\xbcp\x1c\xdbIx\xb0\xdaY7_\xb4\xa4]\xc2" +
	"e\xb5\xae>T\x98ubD\xcf\xd8\x8e\xee)\"\xb5" +
	"\xd6\xb1\xd3\xeb-O8I\x91\xf1\x0a\x8d!F=\x07" +
	"\xfd\xab8\xc2\xf5\x1cC7\xcb\x1a\xbc\xb5\x860S\x1d" +
	"\x8am\xa5\xe4\xea\xd3e\xa7\x8cAC\x84\x1bu\xd0\xb0" +
	"t3.F\x14\xd9\xc5\xb9\x1e\x1e*\x0c\x99\xb6Ac" +
	"T\xa4\xba\xc3\x85b\xe5\x8f\x93\x18\xd6\x9d\x94\xb0\x0c\xd5" +
	"\x1a*\x15\xae#_d\x0d\x85\x9e4d\xda\x9bQM" +
	"\x0a\xc6pH\xe2\x08a\xb5;\x82\xb5\xe9\xeb\xad\x94\x18" +
	"\x0d\x09l\xd7mw]\x92+\x9b'\xdcpq\x90\xf5" +
	"\x0e\xdb\xe4\xd9\xee\x98\xe5\x0d\x8b\xa8k\xb8\x93K\xdb\\" +
	"\xc3\xed\xb2\xcd\x09\x0ajN\xc15\xdc~1(\x1c!" +
	"\xc7\x82Y\xfa \xc7\xa0\xb4\xee\x8c\xf5:v\xaa-\x9b" +
	",Z\x1f\x86\x1c{\x8b7\xdc1FIS\xac\xb1R" +
	"\x02\xe31\xd7\xbf\xbe\xac_\x90\xef!\x18v\xd4jO" +
	"\x84\x9aK\x0e\xa3\xac\x92^\xef8\xc6\x90l\x96\x84\xa7" +
	";^\xd1\xa8\xf7u(\xa7\xd3f\xd8\xd6\x9a\x90-\x1e" +
	"qa\xfb\x87=\xa6v\x87{i\xbdex\x86N\xe6" +
	"\x0dI9\x91\xc8)#\xebq\x86tk\xb5\x11\xb3\xd3" +
	"\xba\xebN\x9cC9\xb5\xf26\xdc\x08\x06%\xf9\xb5\xb6" +
	"\x9d(FpNzG27\x7f\x83W\x19o\x95\xff" +
	"\xfd\xb2\x8d16n\x0a}\xb0\xdd\x11:\x8b\x15w\xb8" +
	"\x9b\xb5L\xc3\xeb\x14\xe4\x8b\xd7[QHK*\xe6\x0e" +
	"\xeb)\x91\xfa\x18\xa5L\xb2\xd3\xde2 \xd2J\xce\xda" +
	"\xaf\x19\xcd\xd8n\xd6\x11EM\xdbi\xa4\x0d\x0f#\xf8" +
	"\xfc\xebu\xad\xe9]\xb1$0[\x95\x87\xa5\xd9\xea\xf4" +
	"\xaeX\x92\xcc\xb26\xd33F\xf4p\xdbvfG\xb3" +
	"\xce\x18k\xeb\xf6\xdd\xbc\x9c \xad\xa3\xbd,\x1d\xa6\xa6" +
	"_\xe4F\x83\xd5\x9e(\xaaO\x97>Z\x18\xee\x86\x1d" +
	"\x93\x8e\\\xb1\xbc\xc3\xb1I\xfa\x0e\x02\xcbg\x19Y0" +
	"\x1aBO\x1e\xed\xc6*\xcb\xd4;J\x8a\xea\xbe1C" +
	"X}{uG\xa7t\xb1\xac\xdf\xb6\x09\x9d\x8e>\xa7" +
	"\xe1\xb0\xcc\xb0\x8ctVI\xe7\xbc%\xa7d2\xe74" +
	"\xd4t\xa8M\xd7\xdaN{\xe0\x9f\x96z\xc9=\x19\xef" +
	"\x8f\xd0\xee\xd2G\xff\x18\xed\xa0\xae!m\x8c\xe5\xb6\xeb" +
	"\xe4\xac\xcc+Z\xc2\xebB\xf7(\xc2\xd2\x8b\xba'd" +
	"K-\xe1\xf5\x0e\xdb\x9eM9kAn\x91\xcc\x11I" +
	"\x832\x86W\xea\xacK\x99\x91\xd6\xc9\xb7\x1d\xd9dm" +
	"\x89o\xe9\xb7\xa3\x9ak\xc8\xf6 0)\xe7\x1d[A" +
	"\x93\xab\xe5U\xdd\xb0y\xfcX\xddh\xb1_\xedW\x83" +
	"r\xd5PW/)*\x0a\xfe.\xc5\x05\\\x0e\x8f\x9d" +
	"\xe7g\xbd\xdd\x93\x0bk\x8b\x9c\xad\\\x05\xc9\x17\xf6\xdb" +
	"\xea\xf9\x841\xdb+\xa9\xaftVHX\xe8-\xdb\xaa" +
	"uE\xd1\x82\xdd\x9dMo\x16\x8e\xd23\x18\x0f\x9c\x17" +
	"\x7fe\x8bais\xc3\xc5H=\xea\x19\x94\xa6\xb0\xa8" +
	"\x01}\xcft-9v\xbaS\x1f\x93\x8b\xe6\x04\x1b\xe3" +
	"\x0f^\xca\x0d\xb0Z\x8c\xb0R-\xdb7\xb26\xab-" +
	"ge\xa54.t\x0a\xf5a9\x95\xeb\x1cA\xc2\xf2" +
	"u\xc8\x9dD\xc5\xa6-\xde\xf0z+\xe9\x88\xdar\x0e" +
	"h&)\xdf\x12\xee\xa1\\\x94\xf2V\xa8\xec\xabAu" +
	"\xbd\x92r\xd7\xda\x8e\x1c\xc1\xce\xd8-\x860)\x95S" +
	"\xad\x1b\xef\xfe\x9f\x7f\x9f\xd6\xb0\xe4\x7f\xfe\x0d\xeb\xdd\xc4" +
	"\x1f%D\xd2\xb6R\xf2gQa\xfe\x01?#\xf9\xb3" +
	"\x8e\xacW\x0b\xc3\xf3\xb1\xfa]J`R\xf3S6\xe6" +
	"\xc7m\xe5\xda\x06\xde\x9bp\x93X\xdce\xfb\xa0y&" +
	"}\xeb\x04\x09\xcbW\x8e\x09i\x80\xcb\xc7\xea\xf6\x88p" +
	"\x92\xba\xebQ\\\x1f\x93\xdeW\xf1\xd4\xb6e\xac\x18\x17" +
	",&gMh\xd0\xf5\xea\x8e\xb7\xdaPl\xd3\x1eB" +
	"\xe0\xd9\xbd\xd6\x18\x9d\xe0\xb9\xf5\xc2\x13\xb1X\xd4\xd0\xcd" +
	"\xc2\xb0\x86\x01\xca\x08\x87\x0c;%#\xf96?`/" +
	"\xfcl\xd8\xf6\xda\x93^?\xe5\xe2\x84\xda.\xa1\x17\x95" +
	"j\xea\x96\x17gm2J\x1f+\x08l\xcco,\xf5" +
	"\x03\x8e\xdc\xcc(\x0d\x81\x9d\xc03R\xc4\x1ax\xa6\x9e" +
	"Sv\xcb\xc3\x11X\xb5F\x842\x80H+4\xf3B" +
	"\xd3\xca\x11X\x09\x0dK\x19:\x7fI\xaepFD;" +
	"\xe5\x0c{L\xf4\xda!\xef-\x93\xec\x17\xae\x91\xca\x92" +
	"\xe8\xeeGMY\xb1$c8\xa4{\xb63\x96\xf0\x9c" +
	"h\xd8Cwl\xdb\xc3\x1cbQ\xbd\x1cm\xd3\x8b\xb7" +
	"\x1b \x88\x0b\xcbeQ\xb4VI\xf7Ka!\x86\x9f" +
	"0\x94\xfa\xa5\\\x81w\xbe9+7+tGO\xb3" +
	"\xa2\xc2\xd7\x0c\x0e\x0aB\xc8\x80\xc0\xa8|\x11kmr" +
	"\xd2eb!\xc8\xaes\x083\xb9S\x1f*.\x16\xeb" +
	"6\xab\x95\xdeZ.\x1e\xcb\xe3\x18pW\xa9\xfa\xad," +
	"j[\"\x14&\xa2\xf8^A\x96\xf0\x8dw\x89'2" +
	"\x92N`5\xf57\x9b\xb0,D\xc3#\xdc\xb5\x0d\xb3" +
	"\xc3\x1e\x11\xac\xd6\x09\xbb\x84#n\xc26\xcc.\x83," +
	"\xe1\xe8fw\x87\x1d\xf3\x97\x95R\xf7\xce6\xccDF" +
	"$\x95\xe2\x1d\x84\xb8\x88\x86\xbdO\xbf\xb0\x8f\xdfi\xc8" +
	"$Q\x961HF\xb2S:\x9d\xaa\xd0'6t^" +
	"\x07\x85t\x8a\xda\xe2Y\x95\x94\x11Q;\x0dz\x02\xe6" +
	")\x1cM\x07\x12\xafK\x1f\xc5X(\xde\xce)\x12\xc3" +
	"-+\xde\x9f\x91\xc2.\xc5\xafy\xc1\x9d\xaa-g\xc4" +
	"\x02\xed\x1b(\xe7VO\xa2\xf0q\x1b&\xaeg\xa7u" +
	"O\xef'\xc4;\x9en%I\x14\xd5\xc8v\xf4!\xd6" +
	"&\xa4\x19,\xdd\xeft\xa5T\xf4\xb0Z)\x8d2\xa5" +
	"\"\x1aa4\xee\xe9\xce\x90\xf0\xba;\xa8\xf8\x0dr\xc5" +
	"zFZ$<\x91a\xc5\x91?\xf0\x8dVJ\x90\xd3" +
	"n\xd9\xa3\x86\xce\xf2\xfb\x0d#\xee\x80\xedxY\x9b\xd5" +
	"\x16\x19)\x0fF\xa5\xb0\x8e\x96b\x02E+\xd6\xcaA" +
	"U$\x0e\xfcb\xdd[\x9f\xceD\xf5d\x89\xb4{\xbd" +
	"\xc5\xa2\x99l)\xbd1\xc3j\xbd\xf0.\xb3\xc4\xfd\xc2" +
	"e\xb1\x8c\xe1\x88T\xd8XI\x0bV\xbck\xe3f\xd3" +
	"\xd2\x0cRwn\x8b\xab\xb8\x1c\xf8\xd7\x9d\xc1~k\x91" +
	"d@\xa4)\xe7\xadF\x13\xa1},/\xe8Z%+" +
	"\xbbv\xc0\xce\xed Q!\x00\xcf\xd9SV~-\xcc" +
	"\x89\xc9w\xabDJ\xcd\x8e\x9e_'.\x06k\x0b\xcb" +
	"\x97\xdfu#\xc2\xb1t\xd3p\x03\x0d},\xe4\x0b\x17" +
	"\xcb\xd6\xea\xc9\xa8g\x87g\xc4MR\xae\x18nP\x83" +
	";\xb3\x06Vc\xb5\x9c\xb7\xb2A\xf7\x84\x13W|\xaf" +
	"\xd3\xf7\xf3\xe0\xe6\x85\xc2k\xbb5!\x97jV\x8b\x95" +
	"\xbd\xf8\xa0\xa0\xd3FXGN:\xae\xa7\xf5!Q<" +
	"\xfa\xec\xd6\xc4\xb0\xedx\x03$\x029\x15\xfd:5f" +
	"XC=Y\x8f\x85\x9e\xa5'\x93\xd9t\xd6\xd4Y\x9b" +
	"'Rk\x06\xf4\xc2\xeez P<\x91\x1a\xc8\xafg" +
	"%{\xf6!\x9d\xc0\x9b\xeap\xecL\xe0\x1a\x85\xc6\x0c" +
	"\xc2T\x87<\x91\xea\xc8z\xf9\xc8\xbc\xb0\xe9\x93\xb1\x1d" +
	"O\xa4H\x0aK\xa2\x037\x9b\x96\x8b\"e\x85/." +
	"\x9e'\x8e\\0E\x07\x05?uC\x9d\x96\x94\xdb\x9e" +
	"Cq\xf2\xb7=\xc7\xe0\x84\xe6l\xdc\x88\xdb\xa5\x8f\xae" +
	"\x19\x1cT\xe4\xd6\x96\xc8[\xe3\x8cZd\x8d\xd7\xa73" +
	"\xc2\x12\x8a\xe7\xe8\x9bM!\xfd\xe5x\xd1~\x95\x1e\xec" +
	"\xb1\xb0(\xc6\x8b\xca\x94i\xea\xf8\xb8\x8cN\xbd\xac\x83" +
	"\xd5o\x12N\xfdBO\x0e\x8bT\xa1\x1f\\Od\x12" +
	"\xc6]\x82\xa9\xcb\x96\xfbFhf\x98F\x97-_\xe2" +
	"\xe3\xf7\x19\xc5\x1c=\xb5ly\xc9\xc8j\x93pI)" +
	"\xf5\x06ms\x82\xee=>-U\xbe\xc7\xb0Rb\xd4" +
	"\x7f\xbel\xa5\xe0\xefK\x18\x0bm\x9ceM\x14\x18\xd4" +
	"\xfb\x1e\xff\xafK\x0a[CY\x816qhM\xdap" +
	"]LV\x97\xea\xc6\xaf\x1d\xee\xca6,~\xef4\x06" +
	"^\x1d\xa3\xf1\xdbo\x1f\x91rVk\xd8V9\x85\x11" +
	"\xdb_\xbd\x98* \xfe\xc2e\xfcs\xff\xf8\xb7'\xb7" +
	"\xe5\xc4I\xc7\xce pU\xc2\xdb\\n\xd6\xf4\xe4\xd3" +
	"\xbe\xf9W?\xf9\xe2\xc6\xd5\xb5?\xcai\xbb(I\xb8" +
	"\xbd,\x06_\x05\x1a_\xb4f~\xed\x87_8\xf9Z" +
	"\xbe\xbc\xac\xbf\xe3\xc1\xdazs*\xdf\xb8\xe7\xef\xae\xba" +
	"\xec\x83)\xff\x91S\x09FZ\xa8\x90W?\xd8}\xf9" +
	"\xe23\x0fn\xcfi\x18\xee\x06\xb9{\xc4j1\x09\xc2" +
	"=\x9b^c\xda\x96\xe2\xef\x84\xad\x19\x11\x96\xb7\x16\xa6" +
	"\xb60\x0bc\xa6w\xc5\x92tx+&w\x93%r" +
	"\xde\x9b,\x09OW=\xd1K\xd4\xb7\\\x8dP\x8d\xbc" +
	"\xc1r\x1b\xc9\xbc`R)a\x92Bu\xc1\x05\x16\x83" +
	"63\x96\x18\x06\xf6H\xa1z\x0a.\xb0\xdcI\xb73" +
	"\x96\xc8\x80o\x05WT\xff\x02\xcb\x18]\xcfXb\x14" +
	"|;\xb8\x1a\xe1\x14aL\xbbW\x96\xb3\x0d|\x17x" +
	"\xa4\xc2\xbf\xc0r\xbf,g\x07\xf8n\xf0\x8a)\xfe\x05" +
	"\x96\x07\xe9s\x8c%\x1e\x00\xdf\x0b>%\xea_`y" +
	"D\xea\xef\x01\x7f\x1a<Z\xe9_`y\x8ane," +
	"q\x00\xfc\x10xe\x95\x7f\x83\xe5Y\xfa&c\x89C" +
	"\xe0G\xc1\xab\xaa\xfd\x1b,/\x92\xc3X\xe2\x08\xf8q" +
	"R\x88\xaa9M%\xd2^!\x99|\x0a|\x06\xeaS" +
	"W\xf9\x17XN\xd3N\xc6\x12g\xc0\xdf&\x85\xc6\xf5" +
	"\xact\x1d\x0cJ\xae\xd3\x9d\x11\xe1z\xf9\x01\xf0_\x8b" +
	"\xfe\xf3\x85\xe7\x9a\xff\xeb\xc5\xe21\xd4\xcd\xa2z\xf8\x1c" +
	")7nj\xbb\xc3\xd8\x15\"\x15\x97\x87\x95\x8c\xea\xc6" +
	"\xbfT?_\xdd\xff?\xbf\xfa\x8b\xdc8\x19\xf6\x9f\x14" +
	"gQ8\x9f\x13\xe5%\xe3\xa8\xaep'+\xaf\xe0\xc7" +
	"QdH' \xc3\xca\xe8\xe4\x8c\x1f\xab\xd5=\xe1\x16" +
	"\xc2\xce\xf0\xc3\xa6\xe7f\x92\xee\xe8L\x95cz\xf8\xf9" +
	"\x1d\xb3\xbe\xf7\xa3\x17w\xe6\x8a\xc9\xc8\x07!\x86\xea\xf0" +
	"\x15\xa3zY\xbd\x8f\x9f\x1dI\xc7v\xdd\x0e\xc7V2" +
	"\xed)=\x13,\xa3\x85\x13'\x7f\x85\x9a\xd0\x1d\xa1\x95" +
	"*7%\xa6L:%\xba$\xea\x82\x9e\xbc\xdduY" +
	"{G|\xc0\xbe\xa9V7\xb3r\x92T\xe6\xaey\xd5" +
	"_2\x9f\xb1\xbef\x95\xfa\x96`*\xf8S\xa4\xfe\xd2" +
	"e\x8c\xf5-R\xa9o\xb9BQ=\x99\xca\x99\xbc\xd8" +
	"\x08\x0a(\xec<~\xec%\xb3\x84eo)\xbdd\xd6" +
	"\xd7\xabFH\x933\xb4Iy\x99\xb1\xc4\"E\xa5\xc4" +
	"r\xa50C\x97*\x98YK\x80W*\xa1\x19z\x95" +
	"\xd2\xcfXb\x05x\\\x09\xcd\xd0v\xe5!\xc6\x12q" +
	"\xf0^%4C\xbb$\xef\x05\xdf\xa8\x84f\xe8-\x92" +
	"o\x04\x1fVB3T(\x98\x89)\xf0\x8c\x12\x9a\xa1" +
	"i\xe5\xdb\xb0\x0c\xe0[\x95\xd0\x0c\x1dS0\x13\xb7\x82" +
	"\xefP\x0a3\xb4\xf5>\xe5\x13\x84\xa9\x0e\xc1^%4" +
	"E\x1fQ\xfe\x9b\xb1\xc4c\xe0\xfb\xc1\xab\xa7\xfa\x97\xcc" +
	"\x9eT\xeeb,\xf1\x04\xf8\xd3\xe0Sk\xfc9\xfa\x94" +
	"\xe4\x07\xc0\x0f\x81\xd7L\xf3/\x99=+\x1f|\x08\xfc" +
	"(\xf8\xb4\xe9\xfe%\xb3\x17\x15\x98\x8c#\xe0\xc7\xc1\xa7" +
	"\xd7\xfa\x97\xcc^\x91\xfc\x18\xf8)\xf0\xda:\xff\x92\xd9" +
	"I\xd9\x10\xa7\xc0\xcf\x82\xd7\xd5\xfb\x97\xcc\xde\x90\xfd\xf2" +
	"6\xf8\x87\xe0\xf5\x17\xc8Kf\xda\x07\xb2c\xde\x07\xff" +
	"\x08\xfc\x02\xcd\xbfc\xf6;\xe8\xf7\xab*%jT\x85" +
	"\xc6]\xcb\xde\xd2/<\xa1X\x18\xdc\x1dzFO\x1a" +
	"\xdeX\x97>\x1ar\x98\xa0S\x08\xbd\x8b)\xfc\x8a\x82" +
	"\xef1\xe8\xd8w\x09k\x83N\x9ep\xd6[\x09\xcb\xa6" +
	"-y\x99i\xdc\x995R\xe5e\xfe\xf1\xa8\xbd\x9e\xac" +
	"A\xc3D\x94\x1b\x0a\x85\xd2\xfa(\x86f.\x88.\xf5" +
	"\xe2\xe0\x9fIy\xb1\x18\xb5K\x0b\xd3\xa3\xdc~s4" +
	"\xeb\x88\"i{2\x99UQ\x02^<\x7f~Y\xb4" +
	"{X\xce\xdb\x97\xc7\x14km\xa7\x13\xaf\xd3\x96\x92~" +
	"q\xc1y\xb3\x1d\x07\xbe\x19k\xb3\xad~\xdd\xb0\xca\x0a" +
	"P\xdb\xf0n\x8e#\xc4]\xa2|=sR\xa6\x86\x92" +
	"\x06BpYho{\x8bl\x05\xf2\xb7\x93\x10\xd9\x17" +
	"\xbdm\x97>\xda\xae\xa4\xfc\xa3G\xdd\x8c\xfbZ%}" +
	"\xdc\xab'\xef`Q#t\x868\xc9\xe80\xc2\xee\xf4" +
	"\xc7[\x96\x12\x0bG\xa2/B\xa1K\xd8\xf5t\xeb\xb8" +
	"o\xf3t\x93\xa9Y\xd1\xb7+\x7f\xb1\xf5E\xf5j\xc6" +
	"\x12\x871Z\x8f\xa9\x0a\xd1|\xdf\xe8\xbc\xa4\xc2[8" +
	"\x06|J\x0dl!\x8c\xceIu\x19\xd6O\xf03\xe0" +
	"\x8a\xe2\x1b\x9d\xd3\xb2\x98\x13\xe0\xaf\x837\x91ot~" +
	"\xae\xca\x0b\xa6\xe0\xef\x82\xcfS|\xa3\xf3\x8e\xfa\x1b\xcc" +
	"\x1d\xf0\x8f\xc0c\xaaot~\xa7\xfe\x07c\xfd\x11\xcc" +
	"\x9d\x08l\x97\xea\xdb\x9c\xaa\x08\x1e\x1b\x01\xaf\x03\x8fD" +
	"|\x9b3-\x82j\xd6\x817D\x82\xeb\xb1\xf0\x0af" +
	"E0\xc5g\x827G\x82\xeb\xb109M\x11\x99%" +
	"\x0e\xbe8\x12\\\x8f\x85\xc9\xb9$\x02[\xb7\x08|9" +
	"xe\xa5or\x96F\xa4\xed\x05_\x09^U\xe5\x9b" +
	"\x9c\xab\"\xf0.V\x80\xc7\xc1\xe7F|\x93\xd3\x1e\x91" +
	"\x17F\xc0{\xc1\xab\xab}\x93\xd3\x15\x91\xb6\x17|#" +
	"\xf8\xd4\x0a\xdf\xe4\xdc\"\xcb\xb9\x19<\x05^3\xc57" +
	"9\xba,'\x05\x9e\x01\x9f\x16\xf5MN:\x82\xe6\xcc" +
	"\x80o\x05\x9f^\xe9\x9b\x9c\xb1\xc8\xf7`{\xc1w\x80" +
	"\xd7V\xf9\xd7Z\xef\x8b\xbc\xc9Xb\x17\xf8\x1e\xf0\xba" +
	"j\xffZ\xeb\xc3\xb2\xdd\xf6\x80\xef\x03\xaf\x9f\xea_k" +
	"}\\\x96\xb3\x0f\xfc\x00\xf8\x055\x9c.bL\xfbN" +
	"\x04n\xd3\x01\xf0C\xe0\xda4\xffZ\xeb\xb3\x91\xd70" +
	"z\xc0\x8f\x81\xf3\xe9\xfe\xb5\xd6\x97$?\x0e~\x06|" +
	"\xc6Ty\xadU;-\xdb\xff\x14\xf8Y\xf0\x0bk\xfc" +
	"[\xado\xc8v~]\xf6{\x85B\xf5\x17M\xe3\xd4" +
	"\x80~\xaf\x90\x97\xb2*\xd0\x8f\xe03\xa7sjD?" +
	"V\xc8$q\xf0U\xe0\xb3\xea\xfc[\xad\xd7T\xc8$" +
	"q\xf0N\xf0\xd9\x8a\x7f\xabu}\x05\xfaw\x1d\xf8\x00" +
	"\xf8\x9cZ\xffVk_\x85\xbc\xa5\x0a\xbe\x11\xbc\xa1\xce" +
	"\xbf\xd5zK\x05\xeay3x\x0a\xbc\xb1\xde\xbf\xd5\xaa" +
	"W`\x09\xda\x04nV(\xd4\xe6\x1a\x9e\xe8\x85W\xb3" +
	"\xf73k?x\xed\x9f\x1ey\xa6$p\xf0\xc8\xb0\xad" +
	".\xe1\x0d\xdbm\xa9\x0e;kyy\xdfAX#\xf2" +
	"\x87\xd5\xff\xbco\xeb\xc5\xd7\x8f\x1f\x0e~\xd8&\xfd." +
	"\x08~\x96\x98\xf1\xf7\xa7\x8f\xff\xe4l>\xf2q\xaf\x93" +
	"\x07Z$-yiD\xba\xa5\xddK\xdbnF\x19\x16" +
	"\x8e\x91\xeci\xed(\xbf9U\xac\xd6\xd1\xb3,\xa7\x17" +
	"+\xda\x00\x8f\xb9FZ\xd6\xe1\xb6\xdbg\xfc\xf0[\xb5" +
	"\xfb\xc7su\x18\x0a2m\xfc\x05f\xd0v\xda\xd2\xfe" +
	"\x0f\xeb\xc6/\x99^\xdfi^Z\xf5|>\xb6\x92\xbb" +
	"\xa2f\x96\xa9i\x88\xf3\x97\xf6Cb\xd8c\x0a\xb6~" +
	"\xe0\xaa\xe6\xbf\xa5\x10\xd2\xe9\xb2\x0d\x97\xf9KE]\xe1" +
	"\xeb\x09!\x85\x1egHgQ\xcbHR]\xe1\xfb\x07" +
	"\xe1\x878\xba\xc5bn\xc6v<\xaa+|\x0c\"\xd0" +
	"\xc0\x12\xd73:6DA\x1eP\xf8H,H\xa4\xea" +
	"\xa0\xdc\xa7\x01\x08u\xc8\x7f4#\xf7\x8clZ\xe6\xf0" +
	"\xb0\x98i\xb8\xa1u\xca\xcd\xa6{\x9c\xa1\xb5\x82d~" +
	"\x8f[\x94\x85\x92\xd2\x0ds,\x91MS\x90\xfd\xe3\xaa" +
	"\xa1\x1f\xe6\x85\xf2\xe7\x8eg\x94\x14\x9c\x93+r\xd7\xd2" +
	"H\x06e\xdc%\xa2N\xbc\xab\xe4\xf1\xbaE9\x856" +
	"\xe3.\x11V\x18\xce\xa6\xb3\xeej\xdd$\xddJ\x8a\x0e" +
	"\xddqbc=#\xe5\x1eS\xc8\xd5\x90\x0bq\xe1-" +
	"\xec\x8c'\xd3\x13\x15kM\xb0Q\xe3\x9fR\x88\xd0V" +
	"KA\xa7_xY\xc7*\xa7\x13\xb4s\x82<\x91\x91" +
	"\xc1Q\x99\xd0'i\x1ai\xdd\x1324\xd2K\x0e\xa8" +
	"\xea\x0a\xeb\\.v\xf1K\\\xc3b\x88\xa9\xf3AN" +
	"Mn\xab\xcd\x11#\x86\x9du)\xae\x8f\xb9\x08\xbb\xd5" +
	"\x89:2\xb3Rn\xa4\xde\x98\xb1\xadn1Z\xeb\xc5" +
	"\xf5\xb1|\xcc\x91\xd2\xc7\xdc\x0d\x867\x1c\x84b\xb9}" +
	"\x11\x0c\xa7\xee\x84\xe7\xb0\xa2c\x18P?\xfd\xaf41" +
	"\x12\x12\x99\xe5\xd8\x96(\xce\xad\xfa\xf8\x98&\x11\x8cm" +
	"9\xb2\x0bA\x05\xc9\x80f\x9d\x1a\xa1z\xb9\xbc\xbf#" +
	"\xc3\xe3w\x11\xd7\x9e#\x85\x18\xf3\x97\xf7\xdf\xca(\xfb" +
	"CR\xa9_\x09\xad\xee\xbf\x97A\xf6G\xd0\x9e)C" +
	"\x8a\xe0\xab\x153\xa4\xa7\xcb\xe1\xe9\xce\x93!\x85\xe2\xaf" +
	"\xee\x8d\xd2#o\x00_!C\x0a\xd5_\xdd\xaf\x90\x1e" +
	"\xf6\xf2|\x08R\x11\xf1W\xf7.E^\xe5\xc8\x87\x1a" +
	"S\x14\x7fy\x17\x92\x17B\x8d\xa8\xea/\xefi\xe5\xeb" +
	"E\xa1Fe\xc4_\xde\xc7\x14ye\x03|\xbb\x8c(" +
	"*\xfc\xe5\xfd^\xa9\xbf\x1d\xfc1\x19QL\xf1\x97\xf7" +
	"G\xa5g\xffX>r\x98\x1a\xf5\x97\xf7g\x95\xef\xe5" +
	"\"\x07\x19\x09\xd4T\xfa\xcb\xfbIe5\x96/\xf0w" +
	"eDQ\xe5/\xef\xef\xc8\x90KF\x02\x11x-\xd3" +
	"+8\xd5\x12i\xa4^\x1f\xf2\xf8\xebk\xab\xfd\xd5\xbd" +
	"J\xc5kU\x827\x83\xd7M\xf5W\xf7&\xc9\xe7\x81" +
	"\xafD\x84\x90K\xdd\xa0t\xfb\x88n\x98\xfa\xe6\xa8)" +
	"\xba\xc3c!k\x8a^\x9d\xd5\x06\x11\xf4\x8a\x05\xde}" +
	"o\x89\x7f}1?9lkDz\xbe\xea\xc4-p" +
	"\x99\xba:!\x83<e\x0c\x0ef]\xc3fmVQ" +
	"zv>w\xd3p3\xc2q\xcb\x96\x98\x93\x91\xed\xff" +
	"v\xc2\xd9\xcc\x88\xdb)\xf4\xe4\xb0A~:Mh\xc3" +
	"\xdf\x94\xdc\x1a\xa2vo5\x16\x12]u\xc6B\x9b\xaa" +
	"\xddq\x91\xb1]\x163\x8a\xd7\xac\xa4\x7f\xa4@b\xad" +
	"\x9f\x9b\xa0\x969~\xb4\x1d\xe1\xcf\xb0\x9b\x84i'\x0d" +
	"\x8f\xc6&\xd6\xea\x0f9\x8e\xbb\x07KFwOk\xb9" +
	"S\xba\xee\x9eV\x9d\xd1\x9d\x13\x0e\x10&9\xf0\x91\x87" +
	"\xc2\x86K\xb2\xb1lk\xe2\x11\x96p\x92\xb6\xe9{\x08" +
	"2\x81\xbdT\xe1\xe3\xbd~\x99}X:\xf7\x17\xa9\x11" +
	"\xaa\x92s\xbf\x8a\xe0c\xd7a67\x84v\xfcf\xc9" +
	"I>\x13\xb89\xbc\xe3\xd7D\x98\x0c\xcd\xe0K\xc2;" +
	"~\x97\x12&\xd5\x12\xf0\x95\xe1\x1d\xbf\xabH\xee?\x80" +
	"\xc7\xe5\x8e\x1f\xf7'\x7f\xbb\xe4\xab\xc0;I!\x0a\xbe" +
	"X\xb3^n\x10\xae\x03NQ\xe8\x8b5:\xc1eK" +
	"\x81g(\xf4\xc5\x9a4\xfd\x8c\xb1\x84\x07\xbe\x8d\x02\x97" +
	"\x1cs\xffnY\xfd\xad\xe0;\x08\x93'\xbdn,\xe5" +
	"\xe8Y\xc54\x92\x1d\xb6\x95\xca\x06\x07\xcc\xfd\xb5\x85\xc4" +
	"q\x16\\\xe0\x88\x8b\x0cS'\x89pec\x96\x1c\xa7" +
	"ZbH\x1e\xf1S\\\x0c9B\xf8)\xd2\xf9\x90u" +
	"X/\x17\x9d\xbbX(\x18\x15r\x83M=\xbd9\xa5" +
	"\xf7\x0b\x16M\x959~\x0abR\xca:\xf2|\xd0\xa9" +
	"-\x8a]\x87\xe5\xab\x99\x86R\xfcj\xfeIV\xfe\x98" +
	"\xc9\x1b\x90c\x90\xa9\"\xf3\xc7\xae \x85T\xb1\xdc8" +
	"\x8a\xea\xfe\xceqg>D\xacP\x10,T\xc2\xeaq" +
	"E!R\xfdqT/\xf7\x87\xea\x80\x1b\xe4\xf6\x07\x16" +
	"\x11\"m\x964\xce3\xc1\x9bs\x8b\x8b*\xb7\xb7\x10" +
	"C4\x83/Q\x82\xd0\x11\xe3\xe8R\xc9\x0b\xfb[\x91" +
	"J\x7f\x1c]%\x17\x97\xc2\xfeVE\x95?\x90\xda\x95" +
	"\x9dE\xfb[S\x82\x18\xb1Kn\x03\xc9\xfd-S." +
	"\"A\x8ch\xc8\xc5e8\xbfXT\x061\xe2\xbd\xca" +
	"\x05\xb9\xfd\xaa=r\x11\x09b\xc4\x87\xe5{\xed\x06?" +
	" \x17\x91 F\xfc\x8e,g\x7f~\x9bij\x10#" +
	"\xbe(\xcb9\x0c~F.\"A\x8cxZ..g" +
	"\xc0\xcf\xc9E\xa4\xda_D~+\xdf\xf7\x9clN\xb9" +
	"\x88\xa8~\x8cX\x8fE$Q\x87U\xa1A\xae\"S" +
	"\xfdUd\x96\x8a\xf7m\x00_!W\x91\x1a\x7f\x15\xb9" +
	"B\xc5\xc4Y\x01>\xa0\x16\xbe}\xa4\xf5\xa9\xa8\x7f/" +
	"\xb8)\xf7\x9fl\xc3Ld\x9dA\xd2\x93B\xf6w\x9b" +
	"\xdf\xe1\x93/0\x97\x9c^t\x81\xd2x\xe4\xfd\xdc\x02" +
	"\x93\xd2\xd3\x19\xc3\x1aZ\xcbbrg6\xc8p\xfd\xfa" +
	"#\xf8\xef\x1d\x99\xe1\x9a\xf3\xf6\x95\xb4u\x93\xe7\xc7)" +
	"~\x16\x19\xd5\x15>\x06V\x12\x19H\xdd\xd5\xb6\xe7\xe5" +
	"2\xce\xca\xe8Z2a\xadg\x90\xb5I\x157tN" +
	"\x97\xcfe\xf3%Egx\xd2\xd4\xdb\x94Kq\x8fZ" +
	"n\xd9\xbc\x8b\xe2\x00\xa4X\x81F&\xac \xb6\x99M" +
	"\x8b.\x9d\xd5z\x8e1:\x99\x94 \xec1S\x13\xca" +
	"\xdb<\xc1\xbe\xebP\xeduH\x9e\x8f\xc6\x0d=6d" +
	"[\xbaY^-!\x94dV\xe6\x97\xc5\x0d]\xeaM" +
	"X/\x86\x85\xee\xad5\xed-,\x14i\x80\xc1rP" +
	"\xcet\xb0\xb2?+R\xf1\xb3\xa8\xcai\xe9\x19\x9d\xd5" +
	"&\xcb$\x07\xfda\xc6&w\xe7`\xc2w\xd6\"\xa4" +
	"Fh\x95\xb45\xd3\xa2\x98\xf45Qx\xa0Q\x85\xea" +
	"\xdb\x82EkF\x14F\x85\x83\xcf\x8b*D\xd7\xfak" +
	"Vc\x14si\x1e\xf0\xe2\xa8Bu\xc1n\xd4%Q" +
	"\xb9\x9d\x03\xbc\x1c\xa5\\\x13\xecF-\x8d\xc2\x0f\\\x0e" +
	"\xbe\x0a|e\xb0\x1buM\x14k\xd3J\xf0u\xe0T" +
	"\xe3\x9b\x9a5\xb26q\xf0^peZ`j\xa2\xf2" +
	"\xf3e\xe0\x1b\xa3\xc1\x92\x08Ss\x8b,\x7f#\xf8p" +
	"4\xd8b\x87\xa9\x11\xd1\x97\x19K\x98\xe0\xa3\xd1`\x8b" +
	"\x1d\xa6&\x1b\x85\xc9\x1a\x05\xdf\x1e\x0dL\x19L\xcd\xbd" +
	"\xf2\xb9\xdb\xc0\xf7F\x835\x11\xa6\xe6\x11\xd9\x0a{\xc0" +
	"\xf7E\x03\x7f\x18\xa6\xe6q\xf9\xdc}\xe0\x87\xa3\x81?" +
	"\x0cS\xf3\x9c,\xe7\x10\xf8\xa9h\xe0\x0f\xc3\xd4\x9c\x94" +
	"\xf5?\x05\xfea4\xf0\x87aj>\x90\xed\xf0>x" +
	"Me\xe0\x0f\xc3\xd4TU\xc2\x05\xa8\xa9T)\xb1\xa8" +
	"2\xf0\x87ajZ*Q\x9ff\xf0U\x95\xa1\xed\xa8" +
	"k*\xf1^\xab\xc0;+\x03\x87\x98\xc3\x07\x90\xe5t" +
	"\x82\x0f\x83\xd7U\xf9\xdbQB\xf2ap\x0f\xbc\xbe\xda" +
	"\xdf\x8e\xba\xb3\x12\xf5\xf4\xc0\xb7\x81_0\xd5\xdf\x8e\xba" +
	"\xbb\x12\xa6o\x1b\xf8.pm\xba\xbf\x1du\xbf\xd4\xdf" +
	"\x05\xbe\x07\x9cO\xf5\xb7\xa3\x1e\x96|\x0f\xf8\xd3\xe03" +
	"j\xfc\xed\xa8\xa7*\xe1c\x1c\x04?\x02~\xe14\x7f" +
	";\xea\xf9J\x8c\x9f\xc3\xe0\xc7\xc0/\x9a\xeeoG\xbd" +
	"$\xf9Q\xf0\x13\xe03k\xfd\x8f\xac\xbdZ\x09\x9f\xe4" +
	"8\xf8\x19\xf0Y5\xfev\xd4\xe9J\xb9+\x0a\xfe>" +
	"\xf8\xec:\x7f;\xea=\xd9n\xef\x82\x9f\x03\x9fS\xef" +
	"oG\xfdV\x96\xf3a\xa5J\xfdU\x0a\xd57L\xf3" +
	"w\xa3~_\x89n\xfc\x08\xea3\xc1\x1b/\xf0w\xa3" +
	"fT\xe1\xb5fVa\xa5\x05\x9f\xabqZ\x80\x95\xb6" +
	"J\xc6\x17\xe0\x8b\xc1c\xb5\xfe7\xd6.\xa9B\xb3-" +
	"\x06_\x01>\x8f\xfb\xdfX\xbb\xa2\x0a\xdd\xb5\x02<\x0e" +
	"\xde4\xc3\xff\xc6Z\xbb\xd4\x8f\x83\xf7\x82\xcf\xbf\xd0\xff" +
	"\xc6Z\x97\xe4\xbd\xe0\x1b\xc1\x17\\\xe4\x7fc\xed\x16Y" +
	"\xceF\xf0a\xf0\xe6\x99\xfe7\xd6D\x95\xec^p\x0f" +
	"\xbce\x96\xff\x8d\xb5;\xab\xf0^\x19\xf0\xad\xe0\x0b\xa7" +
	"\xfb\xdfX\x1b\xab\x92\xbb\x99\xe0{\xc0/\x9e\xed\x7fc" +
	"\xed\xe1*L\xa3\xbd\xe0O\x80/\xaa\xf5\xbf\xb1\xf6-" +
	"\xf9\xbe\xfb\xc0\x0f\x83_2G~dM{N\xf2C" +
	"\xe0G\xc1?\xd1\xc0\xe9r\"\xed\xc5\xaa7\x19K\x1c" +
	"\x03?\x05\xfe\xc9F\xf9\x8d5\xed\xa4l\xcfS\xe0g" +
	"\xc1\x17\xd7\xf9\x9fX{\xa3\x0a\xc3\xe4m\xf0H\xb5B" +
	"\xf5\x97\xd6\xfb\x9fX\xa3\xea\xff\x86cT\x8d\xf6\x07\xbf" +
	"\xec\x02N\xadh\xffj\x0c\x93y\xe0+\xc1/\x9f+" +
	"?\xb1\xa6]U\x8d\xf2W\x82\xaf\x03_\x12\xf3\xbf\xb0" +
	"\xb6\xa6\x1a\xed\xb6\x0e|\x00|\xa9\xc6\xe9SX\xc9\xab" +
	"\xd1>\xbd\xe0&\xf8\xb2y\x9c\xae\x84G#\xf5M\xf0" +
	"Q\xf0\xd6&\xff\x0bkYY\xfe(\xf8v\xf0\xe5\xf3" +
	"\xfd/\xac\xdd[\x8d\xe1\xb6\x0d|\x17\xf8\x15\x0b8]" +
	"\x8d\xe9\"\xf5w\x81\xef\x01\xffT\xb3\xff\x85\xb5\x87e" +
	"\xf9{\xc0\xf7\x81_\xd9\xe2\x7fa\xed\xf1j\x0c\xcf\xc7" +
	"\xc0\xf7\x83\xafX\xe8\x7fa\xed\xc9j\x98\x9f\xfd\xe0\x07" +
	"\xc1\xaf\xe2\xfe'\xd6\x9e\x91\xcf}\x1a\xfc8\xf8\xd5\x17" +
	"\xfb\x9fX{\xa5\x1a\xe3\xe78\xf8\x19\xf0O\xcf\xf0?" +
	"\xb1v\xba\x1a\x91\xc3)\xf0\x0f\xabs\x97\xae;\xec4" +
	"k\xcb\xd8\x16\x82\xb5\xba\xc2\xe7Ys\xce\x84eo\xe9" +
	"\xb0\xd3\x19\x16\xcbi\xe4?&\x1bh\x8c&\xda\xe5=" +
	"U%\xa9\x9b\xe1U\x88M\xee\xff\xfc\xe8\xe6\xdfLQ" +
	"\xe7\x8c\xe7\xf7\x19G\xb6l0\xacT\"CB\xa4\xe4" +
	"}\x13\xf2B[\xaa\xbe\x8cEE(I\xee\xff\xc9o" +
	"\xf1oX\xaf\x19!\xff6\\Q\x8atN\xa6\x14e" +
	"\x11\x97f]\x9d\xef\x86\xb6\xeeo-\x98\xacM\xf8'" +
	"j\xa5;\x05z\xc60M\xdda\xb1\xb1~\xc3-x" +
	"\x879N\x12\xf7\xcb\x83\xc3\xc9~\xda6v\xde\xa2\xc9" +
	"\x17_\xb9d\xa2\x17\x92\xbb\x02\xe8g\x15\x96\x13z\x8e" +
	"N\xb9\xd7.\xb3-1(\xef\xfe\xe9\x19\xf8\xa8e<" +
	"\x94A3;\xda\xeeu\xda\xb4E8r\xef!\xaa\x87" +
	"\xf6\x1e\x86\x1c}\xc4\xf0\xfcX\\77\xe8^\x99=" +
	"\x86\xe0b\x9c\xa0\xa4\xe1_|Q\x8b/\xc5\xe57\xc6" +
	"\xdbS\xfe\xa5\xb8r\xb2\xb8\xe1&\x87ku'\x94'" +
	"\x1c\x16\xfb\xd7W\x0b#\xe2\x0fq\xdf\xfe\x90\x08\xd1\x08" +
	"\x0e}Y\xf1q@\xeeN[\x09\x1eI\xfa\xb7\xe8\x98" +
	"\x9a\xf7\xf5C\xb7\xd9\xda\xfcx\xb6\xb4\x1e\xf9(7\x96" +
	"\xca&E\xea\xfc\x1f+01\xf4\x07\x86\x0d\xd6\x96\xbc" +
	"\xc3\x12e.\xe3\xf9\x11\xc1\x00\x0d\x1b\xbeB8\x17<" +
	"=\xd9\xf6R\xa9\xa4\xb3\x16\x85\x14\xa6\x9e<\xa15\x9c" +
	"\xf2\xe7\xc0\x99t\x97>\xda+\x1c\x92\x9b2\xf2\xfeN" +
	"Q\x0a\xf8\x16x\xc5\xed\x069e\x8f\xafG\xb6t\x19" +
	"\xd6\xa4e\x8f$\xbb\xe5\x9d\xa9\xb2CgdK\xb7\xf0" +
	"\xfa\xf5\x14k3J.\xe2\x0b'\xad[\xc2\"o\x83" +
	"a\xca\\\xef^\xdb\x98\x988:\x92\xecE'Z\x8a" +
	"\xa7\x0f\x89D\x90\x8b\xee\x84R@\xff\x90\xbd\xa6\x91-" +
	"\xf2JW\x86rW\xba\xfe\x98\xbb\x10\x87g\xaeb," +
	"\x7f\x1d\x82\xd6e\xd3F\xaa\xf8\xe8\xdb\xcf\x02\xd2M\xa5" +
	"\xa4\x8cr\x13\xd9\x95\xa9\xf6\x9ePR\xeb\x82\xa1\x1d\x8c" +
	"\xec6\x7fh\x97\x0b\xe4B\xa7D\x93H\x09\xc2\xa4c" +
	"\x84/g\x14\xc9\xca\xa6\xf5\xf7\xda\x8e`m7\xc9\xd0" +
	"nb\xbb\xcbOwx\xa4\xf7\xfb\xd9\xe5\xd1|N\xae" +
	"<\x7fq\x06\xf5\xa4\xe8';;4\\2\x82s2" +
	"\x16\xcbZ=\xa1K\x93n6\x8d8]\xa7\xa4\xe8\x97" +
	"\x92\x89\xbf\xd9@0\xa0\x13\xae\x9f\x96\xdd\x01\x92;\x90" +
	"\x1b`\xaf\x9d~\x91\xb6Gt2\xff\xdf\x12\xa7\x8b\x93" +
	"\xa2s\xb9$k\xcd,\xa3\xd1\xc9\"\xc1\xca\xf3F\x82" +
	"\x08\xff\xd3\x96\x9f\x8b%?> R\xdd\x98@\x99\x8c" +
	"i\xf8\x1f\x00\xe9\xf5\xf3\xc5z\x89\xfa\x1a\xf2\xd9Y\xcf" +
	"\xccf\xac\xef\x80J}\x87\x14\xca%g=\xeb0\xd6" +
	"wP\xa5\xbe#\xc1y\x85\xc2X\xfd\xf3\x9b\x19\xeb;" +
	"\xacR\xdf\xb1\xe0\xb0Be\xac\xfe%h\x1eU\xa9\xef" +
	"DpR\x11a\xac\xfe\xd5\x97\x19\xeb;\xa5R\xdf\xd9" +
	"\xe0\x98\xa2\x82\xb1\xfa7\x00\xdfV\xa9\xefC\xc4d\xfe" +
	"\xfee\xfd\x07;\x19\xeb\xfbP\xa5~RH\x1d\xccP" +
	"\xdd\xf8\x1b3*\xae\xd2?\xff\xd3\x8f\xf2\xbe\x88\x9e\xce" +
	"\x98\x865\xc4\xca|\xfe\xa1{@wXtHx\x13" +
	"ilHx\xad\x85\xfb\x87\x83\xc1\x99\xa0\"\x9c\xe2&" +
	"\x09_c\x0f\xe9\xe8\xa3\xe5u<;\x13\x97gJ2" +
	"\x7f\xd9\xd4\xc7\xca$\x94\x9c?^\x0f\x0e\x18\xc3\xe1:" +
	"\xfac\x9f\x1a\xa1E2XO\xcb\xec\x053\x02?4" +
	"\x02?=\x08\xd6\xb3\x11\xf8w\xa3\xe0\xdb#\xfe\xa1\x13" +
	"\x82\xf5{e\x92\xc56\xe0]\x91\xd0\xc6\xe0\xfd2\xd9" +
	"\xa1\x90\xa4\x90\xdb\x18|X&\x1d\x14\x92\x14T\xf2\xa3" +
	"\xf5\xc7e\x12D!I!\xa2\xf8\xd1\xfawd9\x85" +
	"$\x85\x0a\xf2\xa3\xf5ge9\x87\xc0OE\x82S'" +
	"D\xeb'e5e2\xc2\x87\x91\xe0\xd4\x09\xd1\xfa\x07" +
	"29\xe2C\x99lR\x11D\xd9\x88\xd6\xa7\xc9\xa4\x80" +
	"\x9a\x0aD\xc1\x15A\x94\x8dh\xbdE&\x17\x14\x92\x11" +
	"\x10e\xd7\xc8d\x04\xb8\xcb+\xc1o\xae\x08\xa2lD" +
	"\xeb7\xcar\x06\xc03\x15A\x94\x8dh=-\xcb1" +
	"\xc1wT\x04Q6\xa2\xf5\xfbd9\xdb\xc1\x1f\x03\x9f" +
	"\x1e\x1c/=Zq=\xc2!\xf0\x83\xe0\xb5\xc1G\xd1" +
	"\x9f\xa9\x90\xdf2\x07?R\x11\x1c;!Z\x7f^\x96" +
	"\x7f\x18\xfc\x18x}\x8d\x1f\xad\xbfT\x01\xf7\xfd\x18\xf8" +
	"\xdb\xe0\x17D\xfch\xfd-\x99\x1cq\x16\xfc}p\xad" +
	"\xc2\x8f\xd6\xdf\x93I\x10\xef\x82\x9f\x03\xe7S\xfch\xfd" +
	"\xb7\x15\xf2\x93\x9f\xe0\x91)\x88\xb2\xa3~\xb4NS\xd0" +
	"\xce\x91)hO\xf0\x0b+\xfdh}\xda\x14\x99\xbc\x03" +
	"\xde\x00~Q\x95\x1f\xad\xcf\x9a\x82\xfem\x00_\x04>" +
	"s\x9a\x1f\xad\xb7H\xfdE\xe0q\xf0Y\xd5~\xb4\xde" +
	">\x05\xe1J\x1c\xbc\x17|\xf6T?Z\xef\x9a\x82z" +
	"v\x82\xdf\x0c>'H\x1e\xb9Q\xea\xdf\x0c\xee\x817" +
	"\xd4\xfa\xd1\xfa\x9dSd\xca3\xf8.\xf0\xc6 Z\xbf" +
	"_\xf2\x1d\xe0\xfb\xc0\xe7\x06\xd1\xfa\xe3Sd\xb2\x0c\xf8" +
	"a\xf0\xd8\x05~\xb8\xfe\x9c\xd4?\x04~\x0a|\x9e\xe6" +
	"\x87\xeb'%?\x01\xfe>x\x13\xf7\xc3\xf5\xf7$\x7f" +
	"\x17\xbc2\x8a0{\x86\x1f\xaeW\xc8]\xacHn\xcf" +
	"\xab~A\x8d\x1f\xae7F\xbf\x1e\xde\xf4\xaao\x9e\xe6" +
	"\x87\xeb\x97DQ\x9f\xc5\xe0+\xc0[\xa6\xfb\xe1\xfa\x15" +
	"r\x17\xa8\xb0\xeb\xb5\xb0\xd6\x0f\xd7\xaf\x91\xbbF\xab\xc0" +
	";\xa3\x0a\xdc\xc1\xa4\xedd\xec\xfc\xa2\x90;\xec\xf6\x8f" +
	"\xb2\x84E\x86\xe7\x18\x83F\xb2$\xa9dB\xf8\xf4\x85" +
	"\x9f~w\xd6\xae\xb6_\xffC!s\xe5|{\xb5\xf9" +
	"\xbb\xcb\x81\xb9\x09T\x0aQ\x11\xdc\xe9\x1eg\x88\xa4-" +
	"\xd2=\xe9\x9b\xe7\xaaf\x04\xc9\x09d[\xedi;[" +
	"t\xf7ROz\xed\xe9\xb4m)\x86\xde3j\xa4t" +
	"o2\xe7GOz\xddx5\x1a\x0c\xachm\xf8\x1a" +
	"lH+.,\xc3#\xbf\x0d<\xa3\xcd/n\x82\x9e" +
	"\x9d^\xab\xcb/\x86\x98\x9e\x9e\xc8\xa6\xd9$\x0a\xebY" +
	"\xad\x95\xc9z\x93H\x13L\x9dx\x9dM\xb7\xd3\x09S" +
	"f N^4\x14&/\x1a\xd2\xb2E'W\xeb\xa6" +
	"n%efz\xe9\x81\xafH\xda\xe9\x8c\xedJ?\"" +
	"t\xf1\xb8\xe8S/\x13?\xeabX\xc2\xf1\x12\xb6A" +
	"\xb9u\x84:JK\xb6\x96\xd9\xf2+\x01,\x1a\x8e\x18" +
	"\xf2\xb4-)R\xdd!\xb7#'\xa0\xa4H\xc9\xae(" +
	"\xfe\xf0\xc0\x9a\xa4\xed\x8e\x91\xbcU1\x8a \xcb\x0a9" +
	"HE\xe2r_5\xb1\x84\x07\x0fD\x90\xa3\x9b\xf2\xb6" +
	"\x96z>\xe1$]\xef\xdf\xa4[\xd7J7\xc9\x18\xc2" +
	"4\xa2n\xf8\xbd\x86[%gm2!(t\x0f*" +
	"\xbd\xb9\xa3g\xd9\x9a\x11\xb2Mys\xb6?Z\xa6l" +
	"7\xbdY\x0e+V\x8b\xce/#\x95#\xa3\xbc\xf4\x8f" +
	"\xb8\x8a*\xd3\xa9j-#\xd91Q\x9a>_\x05\xce" +
	";\xa8\xdd`\xe0N\xf2\xdbl\xbaxf\xa9\xc5\x17\x0b" +
	"\xbb\xd1\xfcd\xc8\xca\x1bn\xc9\xe8\x83|YO\xaf\xc3" +
	"\xda\xec\xe2\xc0\x13\x82u\xad7\xd9\xe4w\x85+(5" +
	"\xc1\xff\x99\xfc\x16M\x7f\xd6\xf2\x8c\xb4\x88I\xb7\x07^" +
	"O$\xef\x85N\xbb\x95\xb1\xbe\x1a\x95\xfaf*AI" +
	"\x09Og\xaa\xbc\xb2\x91\xff\xb7\x89\x02\xd3\xf7\xf1\x0f\xea" +
	"\xd2\xc76\x8b\xd5\xb6j\x9b%OY\xc6X_\xa5J" +
	"}\\\xc9]4(\xbd\xf0Pq^\xefM\xda\xd1\x82" +
	"\xd7\xb6\xd2/\x99H{\x98\xb0\x1c\xec&\xb8\x13T\xb8" +
	"\xe6\xa0=*o\xcc\xec\x05\x7f\x82\x14\xca\xa5\x05|K" +
	"\x1e\xe7\xef\x03>L\x05wZ{\x8eV\xc3\xcb\x00?" +
	"B\x05\x8fZ{^\xf2\xc2\x85\x9c\xc0\xa9\xd6^\x94\xfc" +
	"0\xf81*\xf8\xd5\xdaK\x92\xe7/\xea\xd4G\x83\xbc" +
	"\x80Wd\x8a\xd21\xf0S\xf2\xfc?\xca\xa9\x92H;" +
	")\xf5\x0b7x\xaa*9U\x11i\xa7%?\x01\xfe" +
	":xu\x15\xa7j\"\xed\xe7\x92\x9f\x02?K\x0a-" +
	"\x9d\xbaM\xf1\xaf\x02\xbd!\x13\x09^\x87\xe0]\xfc\xa0" +
	"\x86|\xb7\xed\x1d,\xd6\x89\xb3\xe0\xefS\xf0o\xd6L" +
	"#\xd2\xde\x93\xed\x96O\xa5\x92\xfff\x8d<\xcf\x957" +
	"\x99r\xb9T\x13\xf76\xc2\xa7\xa5\xcf\xe6OK7\xa0" +
	"cb\x88\xa2\x0a\xdb4#v{OW\xafm32" +
	"\x0b\xc9m\xf9\x7f\x1c\xc9On\xbb'\x98K\xb9\x1f\xdd" +
	"\x13\xcc\xbc\xc2\xdf}S\x10\xfe{X\xee\x1f\xbf\xea\xce" +
	"fV\xab\xa7\x8dT\xa8\x18\xc3\xec^\xb7<\xa8\xed\xa5" +
	"\x1d\x0d\xff\xf7\xcdO\xcdFm\x83\x94\x98 \x0f~\xfc" +
	"\xa3'?x\xadksoH\xd2:\xf17\xf2!k" +
	"\x1d\xfb.\xa6\x8a\xbc\x1f\x11u3\xf0\x0e\xfe\xf3\xda\xef" +
	"\x1f<qe\xd3\xd3\x13\xb2<\xdb\xe4\xd9`P\xda\xe1" +
	"\xe3mA1\xc5\x87\xb4\x7f\xf8\x0cFS:v\xa6\x0d" +
	"\xa1\x92\x90\x81\xe4@>\xa3\xe1\x1a\x99\xdfUH-\xc8" +
	"M\x81v\xc9W\x82\xaf\xcb\xa5(`\x0e\xac\x91G\xf6" +
	"\xeb\xc0\x07\x94 -\x1ds\xa0O\xf2\x01\xf0MJ\x90" +
	"\x96\x8e9p\x9b\xe4\x9b\xf2\xa9\x08\x15\xc1U\x1bCr" +
	"\x13|T\x09r`0\x07\xb22\xb5\xc0\x03\xdf\xa6\x04" +
	"\xe7}\xf2\x9f\xde\x92<t\xa5\xa6\xd2\x9f\x03\xf7\xc9r" +
	"v\x80\xefV\x82\xb4t\xcc\x81\x07%\xdf]\xc8\x7f\x0b" +
	"n\xda<*\xaf\xec\x14n\xdaL\xcd\xdf\xb4\xf9v." +
	"\xa5\xe1\xa0L]\xa8\xe1TC\xa4=#S/\x9e\x06" +
	"?,S\x17\xa6\xf9S\xe09\xc9\x0b7m\xa6\xaf\xe0" +
	"4\x9dH{Q\x96s\x14\xfc\x84\xbcQ\x13\xdc\xb4y" +
	"U\xa6d\x9c\x00\x7f]\xde\xa8\x09n\xda\xfc\\\xa6\x88" +
	"\xc8\xd4\x88\xb7\xe5\x8d\x9a\xe0\xa6\xcd[2\xf5\xe2,\xf8" +
	"\xfb2\xa5$\xb8i\xf3\x9e\xe4\xef\xe6R)\x96j\x0f" +
	"\xa8\x9c4\"\xed\xb7\xb2\xa0\x0f\x15\x95\xfaU\x85\x96\xf2" +
	"\x07U\x8e\xae\xd4~\xaf\xec\x0c%\xe4\xdd\xa3\x97\xcc\x19" +
	"\xbdx\xce\xe4\x1d+E$\xb1\xae{v\xa2k5\x00" +
	";\xaf\x06\x8a(\xd2\x90\xeb\xe3y\xcb\x98\xa01\xa1\x8c" +
	"\xc0\xc1K\x06\xb9u\xa5\xbf-+\xc9\xd5LJ\x12\x9e" +
	"n\xa5t'U|\x7f\xae\xf0\xe8\xc9\x952\xba\xe3\xb5" +
	"\xf7t%\xc8\xb4\xb7\xc8\xca\xd5\x86\x1b\xad\x8c\xb8\xa8\x0d" +
	"\x93\x96\xfc6I;k\xeb\xe9*\xfc.\xf8dgH" +
	"V\xf8Qp\xf9<\xf8N$9\xc1>\x86\x1f]\xe4" +
	"\xdd\x7f;\x1dw\xc6\xbat\xf2<\xe1t\xd8\x96\x17\x0d" +
	"\x7f\xef@\xb7\xd3\xdd\xeb\x96w\xd8,\xf0hJ\x1b%" +
	"p8J[\xb1\x04O\x16\xf8X\xb6\xef\xc8\x91i\xdc" +
	"\x95\xdb^!\xa6T\xfc\x11\xabph\xa7\x8b1y)" +
	"'\xffo\xfa\xd5\xd3o\xc6s\x9b_J\xc9\xee\x97." +
	"c\xa9\xbeUy\x8b\xf5\x94L\xce{:\xbf\x0a\xe7," +
	"\xd6s\x92\x17VU\xa5\xd2\xb7X/\xc9\xa4\xbd\xc2\xea" +
	"\x99\xb3X'\xa5~~5\xcc[\xac7\xe4\xe2_X" +
	"\x0cs\x16\xeb\x1dz\x99\xb1\xc4\xfb\xe0\x1fQ\xc8b\xfd" +
	"Nf\xf3\x9d\x03\x8f\xe4-\x16\x91F\xf2\xae\\>W" +
	"\xcc\xb7X2Y\xec\x85\xa2\x0c\xe2\xaa\xe0\xfan\xa3\x9c" +
	"\xc02\x83x\x91\xe2_\xd3\x85\xc1j\x91)g\xf9\xab" +
	"\x90\xf2\xdf\x99\x9b*\xefB~=\x97X\xbcJ\x09\xad" +
	"\xd9\xd7\xc8\x84\xe3\x82\xe1\x9e\xa6\x04\xff\xfe\\\xc1p\xa7" +
	"\x94`\xeb\x04k\xb6.y!\xe1\xb86\xc8\xc1J+" +
	"W\x87s\xc5\xe09\xcb\x8dW\xf2\xcf\xcc\x12^\xcc." +
	"\xf9\xc8\x8b\xff\xb1J\x12\x19\xff\xbb\x80\xa5\xf2t\xf8\xd2" +
	"\xc6\x80\xbeY5E(\xf6]+O\xa5\xa8\xd3\xf6O" +
	"\xa5b2\xc1\xa7\xf0\xe3;\xe5\x17jod\xb1L\xd1" +
	"\x979F<\xf91\x98\xac\"\xb7\x84C)|,\xfc" +
	"mTyWM\xb0\xa2\xcf\xc8d\xdc.}\xb4\xcb\xb0" +
	"\x14\x91\x8bdl\xcb?DaEn\xcai\xb9\x88O" +
	"\x1e\x9b\xe7\x9f28 w\x19Y\xccu\xc3\x97\xdar" +
	"\x9c$\xee\xd5\x9d6\xff{\xd0e6M\x8bU\xe3\xc2" +
	"T\xf5\xb1|\x0b%\x83\xab\x17\x0c\xcd6\xf1\xeeE\xaa" +
	"\xfc\xecqY\xc1{\xca\xcf\xb6\xdc\xd7\xb4\xd2\xf9\xaf\x1b" +
	"\xe7\x0e\x82\x8bO\x91\xdaL\xff\xc06_B8%m" +
	":\xa3\xff?\x00\x00\xff\xffir\x85\xe2"

func init() {
	schemas.Register(schema_86ea47c297746539,
		0x811d54ac7debc21e,
		0x8b008567c93f7c7d,
		0x98e203c76f83d365,
		0xa4da01d10b3b6acd,
		0xab56969492d293b3,
		0xb1760f65e652e737,
		0xb4f16ea3144d85a6,
		0xbd3e199eb9b03758,
		0xcd05962719bf7ec8,
		0xd1edcf54f4edf638,
		0xd594e64f6b5f461d,
		0xd599d06dc405571a,
		0xd8af9210839bc071,
		0xdd1e0c7c94dc4211,
		0xe3512e62df901c18,
		0xef3e4198d3e35596)
}
